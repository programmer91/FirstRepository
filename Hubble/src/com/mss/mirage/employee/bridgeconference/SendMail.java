/*
 * SendMail.java
 *
 * Created on July 31, 2007, 6:51 PM
 *
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */

package com.mss.mirage.employee.bridgeconference;
import com.mss.mirage.util.DateUtility;
import java.sql.Timestamp;
import java.util.Date;
import java.util.Properties;
import java.util.StringTokenizer;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

/**
 *
 * @Rajasekhar Miracle
 */

public class SendMail {
    
    public void sendMails( String contactNo,String  bridgeNumber,String  engagedBy,Date date,Timestamp startTime,Timestamp endTime,String title,String listOfEmailAdd,String status,String senderMail)  {
        try {
            boolean debug = false;
            
            //Subject Variable
            String subject= title;
            
            //Sender Variable
            String from=senderMail;
            
            //Serever IP Address
            String host="192.168.5.5";//mail server IP
            
            //Message
            String mailmessage=""+'\n'+"Dear user,"+'\n'+""+'\n'+" Scheduled meeting details are given below:"+'\n'+""+'\n'+" Bridge Number is :"+ bridgeNumber+'\n'+""+'\n'+" Title :"+title+'\n'+""+'\n'+"Date is :"+ date+'\n'+""+'\n'+" Start Time :"+startTime+'\n'+""+'\n'+" End Time :"+endTime+'\n'+""+'\n'+" Engaged By : "+engagedBy+'\n'+""+'\n'+" Contact Number :"+contactNo+'\n'+""+'\n'+" Thank You";
            
            
            
            //Set the host smtp address
            Properties props = new Properties();
            props.put("mail.smtp.host", host);
            
            // create some properties and get the default Session
            Session session = Session.getDefaultInstance(props, null);
            session.setDebug(debug);
            
            // create a message
            Message msg = new MimeMessage(session);
            
            // set the from and to address
            InternetAddress addressFrom = new InternetAddress(from);
            msg.setFrom(addressFrom);
            
            //split the String Object with StringTokenizer Object of specified Regex Expression
            StringTokenizer stringTokenizer = new StringTokenizer(listOfEmailAdd,",");
            
            //Counting Tokens
            String mailIds[] = new String[stringTokenizer.countTokens()];
            
            //Intialization of Tokenid
            int tokenId = 0;
            
            //Cheking next token availability
            while(stringTokenizer.hasMoreTokens()){
                mailIds[tokenId] = stringTokenizer.nextToken();
                tokenId = tokenId + 1;
            }
            
            //setting multiple to addresses
            InternetAddress addressTo = new InternetAddress();
            for(int count=0;count<mailIds.length;count++){
                
                //Assigning E-mail Addresses
                addressTo = new InternetAddress(mailIds[count]);
                
                if(count<2){
                    msg.setRecipient(Message.RecipientType.TO, addressTo);
                } else {
                    msg.setRecipient(Message.RecipientType.CC, addressTo);
                }
                // Optional : You can also set your custom headers in the Email if you Want
                msg.addHeader("THIS IS AUTOGENERATED BY BRIDGE SHEDULE SYSTEM ", status);
                // Setting the Subject and Content Type
                msg.setSubject(subject);
                msg.setContent(mailmessage,"text/plain");
                Transport.send(msg);
                msg.removeHeader("THIS IS AUTOGENERATED BY BRIDGE SHEDULE SYSTEM ");
                
            }//end of for loop
            
        }catch(AddressException add){add.printStackTrace();} catch(MessagingException mes){mes.printStackTrace();}
    }
    
}
