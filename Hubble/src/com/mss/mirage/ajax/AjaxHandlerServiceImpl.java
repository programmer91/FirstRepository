/*
 * AjaxHandlerServiceImpl.java
 *
 * Created on June 11, 2008, 12:57 AM
 *greensheetListSearch
 * To change this template, choose Tools | Template Manager
 * and open the template in the editor.
 */
package com.mss.mirage.ajax;

import com.constantcontact.ConstantContactFactory;
import com.constantcontact.components.contacts.Contact;
import com.constantcontact.components.contacts.ContactList;
import com.constantcontact.components.contacts.EmailAddress;
import com.constantcontact.components.emailcampaigns.EmailCampaignResponse;
import com.constantcontact.components.emailcampaigns.TrackingSummary;
import com.constantcontact.components.emailcampaigns.tracking.bounces.EmailCampaignTrackingBounce;
import com.constantcontact.components.emailcampaigns.tracking.forwards.EmailCampaignTrackingForward;
import com.constantcontact.components.emailcampaigns.tracking.opens.EmailCampaignTrackingOpen;
import com.constantcontact.components.emailcampaigns.tracking.sends.EmailCampaignTrackingSend;
import com.constantcontact.components.emailcampaigns.tracking.unsubscribes.EmailCampaignTrackingUnsubscribe;
import com.constantcontact.exceptions.service.ConstantContactServiceException;
import com.constantcontact.pagination.PaginationHelperService;
import com.constantcontact.services.contactlists.ContactListService;
import com.constantcontact.services.contactlists.IContactListService;
import com.constantcontact.services.contacts.ContactService;
import com.constantcontact.services.contacts.IContactService;
import com.constantcontact.services.emailcampaigns.EmailCampaignService;
import com.constantcontact.services.emailcampaigns.IEmailCampaignService;
import com.constantcontact.services.emailcampaigns.tracking.EmailCampaignTrackingService;
import com.mss.mirage.ecertification.QuestionsVTO;
import com.mss.mirage.util.ApplicationConstants;
import com.mss.mirage.util.ConnectionProvider;
import com.mss.mirage.util.DataSourceDataProvider;
import com.mss.mirage.util.PasswordUtility;
import com.mss.mirage.util.DateUtility;
import com.mss.mirage.util.MailManager;
import com.mss.mirage.util.Properties;
import com.mss.mirage.util.ServiceLocator;
import com.mss.mirage.util.ServiceLocatorException;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.GregorianCalendar;
import javax.servlet.http.HttpServletRequest;
import com.mss.mirage.crm.accounts.AccountService;
import com.mss.mirage.employee.Reviews.ReviewVTO;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TimeZone;
import java.util.TreeMap;
import org.apache.commons.lang.StringEscapeUtils;
import org.json.JSONObject;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;

/**
 *
 * @author miracle
 */
public class AjaxHandlerServiceImpl implements AjaxHandlerService {

    /**
     *
     * Creating a reference variable for Connection
     */
    private Connection connection;
    /**
     *
     * Creating a reference variable for preparedStatement
     */
    private PreparedStatement preparedStatement;
    /**
     *
     * Creating a reference variable for Resultset
     */
    private ResultSet resultSet;
    /**
     *
     * Creating a reference variable for String Buffer
     */
    private StringBuffer stringBuffer;
    /**
     *
     * Creating a String queryString used to store SQL Query
     */
    private String queryString;
    /**
     *
     * Creating a boolean flag to return true or false
     */
    private boolean flag;
    /**
     *
     * Creating a String noRecords to replace spaces in Ajax response
     */
    private String noRecords = "no records";
    /**
     *
     * Creating a String deptId to store the value in Database
     */
    public static String deptId;
    /**
     *
     * Creating a String practiceId to store the value in Database
     */
    public static String practiceId;
    /**
     *
     * Creating a String subPractice to store the value in Database
     */
    public static String subPractice;
    private AccountService accountService;
    private HttpServletRequest httpServletRequest;
    /** Creates a new instance of AjaxHandlerServiceImpl */
    private StringBuffer queryStringBuffer;
    private String REQ_SEARCH_QUERY;

    public AjaxHandlerServiceImpl() {
    }

    /**
     *
     * This method is used to save the Activity Details
     * @param activityType
     * @param priority
     * @param cId
     * @param assignedToId
     * @param status
     * @param dueDate
     * @param alarmValue
     * @param description
     * @param comments
     * @param accountId
     * @param contactId
     * @param createdById
     * @param modifiedById
     * @param assignedById
     * @param createdDate
     * @param modifiedDate
     * @param activityId
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String saveActivityDetails(String activityType, String priority, int cId, String assignedToId, String status,
            Timestamp dueDate, boolean alarmValue, String description, String comments, int accountId,
            int contactId, String createdById, String modifiedById, String assignedById, Timestamp createdDate,
            Timestamp modifiedDate, int activityId) throws ServiceLocatorException {

        // Connection connection = null;
        //CallableStatement callableStatement = null;
        //PreparedStatement preparedStatement = null;
        // ResultSet resultSet=null;
        String returnStmt = "FAILURE";
        int updatedRows = 0;
        flag = false;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement("SELECT * FROM tblCrmActivity WHERE Id=" + activityId);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                flag = true;
            }
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
            } catch (SQLException sql) {
                sql.printStackTrace();
            }

//            public String saveActivityDetails(String  , String  , int  , String  , String  ,
//            Timestamp  , boolean  , String  , String  , int  ,
//            int  , String  , String , String  , Timestamp  ,
//            Timestamp , int activityId) throws ServiceLocatorException

            if (flag == false) {

                String sqlString = "INSERT INTO tblCrmActivity(AccountId,ContactId,CampaignId,ActivityType,Status,Priority,Alarm,DateDue,AssignedById,AssignedToId,Description,Comments,CreatedDate,CreatedById,ModifiedDate,ModifiedById) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                preparedStatement = connection.prepareStatement(sqlString);

                preparedStatement.setInt(1, accountId);
                preparedStatement.setInt(2, contactId);
                preparedStatement.setInt(3, cId);
                preparedStatement.setString(4, activityType);
                preparedStatement.setString(5, status);
                preparedStatement.setString(6, priority);
                preparedStatement.setBoolean(7, alarmValue);
                preparedStatement.setTimestamp(8, dueDate);
                preparedStatement.setString(9, assignedById);
                preparedStatement.setString(10, assignedToId);
                preparedStatement.setString(11, description);
                preparedStatement.setString(12, comments);
                preparedStatement.setTimestamp(13, createdDate);
                preparedStatement.setString(14, createdById);
                preparedStatement.setTimestamp(15, modifiedDate);
                preparedStatement.setString(16, modifiedById);

                updatedRows = preparedStatement.executeUpdate();

                if (updatedRows == 0) {
                    returnStmt = "FAILURE";
                } else if (updatedRows == 1) {
                    returnStmt = "SUCCESS";
                }
            }

            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
            } catch (SQLException sql) {
                sql.printStackTrace();
            }

            if (flag == true) {

                String sqlString = "UPDATE tblCrmActivity SET AccountId=?,ContactId=?,CampaignId=?,ActivityType=?,Status=?,Priority=?,Alarm=?,DateDue=?,AssignedById=?,AssignedToId=?,Description=?,Comments=?,CreatedDate=?,CreatedById=?,ModifiedDate=?,ModifiedById=? WHERE ID=" + activityId;
                preparedStatement = connection.prepareStatement(sqlString);

                preparedStatement.setInt(1, accountId);
                preparedStatement.setInt(2, contactId);
                preparedStatement.setInt(3, cId);
                preparedStatement.setString(4, activityType);
                preparedStatement.setString(5, status);
                preparedStatement.setString(6, priority);
                preparedStatement.setBoolean(7, alarmValue);
                preparedStatement.setTimestamp(8, dueDate);
                preparedStatement.setString(9, assignedById);
                preparedStatement.setString(10, assignedToId);
                preparedStatement.setString(11, description);
                preparedStatement.setString(12, comments);
                preparedStatement.setTimestamp(13, createdDate);
                preparedStatement.setString(14, createdById);
                preparedStatement.setTimestamp(15, modifiedDate);
                preparedStatement.setString(16, modifiedById);

                updatedRows = preparedStatement.executeUpdate();

                if (updatedRows == 0) {
                    returnStmt = "FAILURE";
                } else if (updatedRows == 1) {
                    returnStmt = "SUCCESS";
                }
            }
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }
        return returnStmt;

    }

    /**
     *
     * This method is used to save the contact details
     * @param accountId
     * @param contactId
     * @param firstName
     * @param lastName
     * @param middleName
     * @param email
     * @param phone
     * @param source
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String saveContact(int accountId, int contactId, String firstName, String lastName, String middleName, String email, String phone, String source)
            throws ServiceLocatorException {

        int updatedRows = 0;
        String sendAccid = "";
        flag = false;

        // Connection connection = null;
        CallableStatement callableStatement = null;
        // PreparedStatement preparedStatement = null;
        //ResultSet resultSet=null;
        queryString = "SELECT * FROM tblCrmContact WHERE Id=" + contactId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                flag = true;
            }
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
            } catch (SQLException sql) {
                sql.printStackTrace();
            }

            if (flag == true) {
                callableStatement = connection.prepareCall("{call spMarketingContacts(?,?,?,?,?,?,?,?,?,?,?)}");

                callableStatement.setInt(1, accountId);
                callableStatement.setInt(2, contactId);
                callableStatement.setString(3, firstName);
                callableStatement.setString(4, lastName);
                callableStatement.setString(5, middleName);
                callableStatement.setString(6, email);
                callableStatement.setString(7, phone);
                callableStatement.setString(8, source);
                callableStatement.setString(9, "Upd");
                callableStatement.registerOutParameter(10, Types.INTEGER);
                callableStatement.registerOutParameter(11, Types.INTEGER);

                updatedRows = callableStatement.executeUpdate();
                int getaccIdProcedure = callableStatement.getInt(11);
                sendAccid = Integer.toString(getaccIdProcedure);
            }
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
            } catch (SQLException sql) {
                sql.printStackTrace();
            }

            if (flag == false) {
                callableStatement = connection.prepareCall("{call spMarketingContacts(?,?,?,?,?,?,?,?,?,?,?)}");

                callableStatement.setInt(1, accountId);
                callableStatement.setInt(2, 1);
                callableStatement.setString(3, firstName);
                callableStatement.setString(4, lastName);
                callableStatement.setString(5, middleName);
                callableStatement.setString(6, email);
                callableStatement.setString(7, phone);
                callableStatement.setString(8, source);
                callableStatement.setString(9, "Ins");
                callableStatement.registerOutParameter(10, Types.INTEGER);
                callableStatement.registerOutParameter(11, Types.INTEGER);

                updatedRows = callableStatement.executeUpdate();
                int getaccIdProcedure = callableStatement.getInt(11);
                sendAccid = Integer.toString(getaccIdProcedure);
            }
        } catch (SQLException se) {
            se.printStackTrace();
        } finally {
            try {

                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }
        return sendAccid;
    }

    /**
     *
     * This method is used to get the Name & Id off the Account
     * @param accName
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getScreenAccount(String accName) throws ServiceLocatorException {
        boolean isGetting = false;
        StringBuffer sb = new StringBuffer();
        queryString = "SELECT Name,Id FROM tblCrmAccount WHERE Name LIKE '" + accName + "%' LIMIT 75";

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();

            int count = 0;
            sb.append("<xml version=\"1.0\">");
            sb.append("<ACCOUNTS>");
            while (resultSet.next()) {
                sb.append("<ACCOUNT><VALID>true</VALID>");
                sb.append("<NAME>" + resultSet.getString(1) + "</NAME>");
                sb.append("<ACCID>" + String.valueOf(resultSet.getInt(2)) + "</ACCID>");
                sb.append("</ACCOUNT>");
                isGetting = true;
                count++;
            }
            if (!isGetting) {
                isGetting = false;
                sb.append("<ACCOUNT><VALID>false</VALID></ACCOUNT>");
            }
            sb.append("</ACCOUNTS>");
            sb.append("</xml>");

        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }

        }
        return sb.toString();
    }

    /**
     *
     * This method is used to get the Account Details
     * @param accountName
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getAccountDetails(String accountName) throws ServiceLocatorException {
        //Connection connection=null;
        // PreparedStatement statement=null;
        // ResultSet resultSet=null;
        StringBuffer sb = new StringBuffer();
        queryString = "SELECT AccountId,AccountName,WebAddress,PhoneNo,StockSymbol1,ModifiedBy,DateModified,"
                + "Gentran,Harbinger,Mercator,SeeBeyond,WebMethods,Wdi,Ics,MessageBroker,Tibco,Vitria,Wps,BiztalkServer,JDEdwards,OracleApps,"
                + "PeopleSoft,Sap,Siebel,Baan,BeaPortals,OraclePortals,IbmPortals,SharePoint,SapPortals,Microsoft from vwAccountSoftwares "
                + "WHERE AccountName LIKE '" + accountName + "'";
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {

                sb.append(resultSet.getString("AccountName"));
                sb.append('*');
                sb.append(resultSet.getString("WebAddress"));
                sb.append('*');
                sb.append(resultSet.getString("PhoneNo"));
                sb.append('*');
                sb.append(resultSet.getString("StockSymbol1"));
                sb.append('*');
                sb.append(resultSet.getString("ModifiedBy"));
                sb.append('*');
                String date = resultSet.getTimestamp("DateModified").toString();
                sb.append(date);
                sb.append('*');
                sb.append(resultSet.getBoolean("Gentran"));
                sb.append('*');
                sb.append(resultSet.getBoolean("Harbinger"));
                sb.append('*');
                sb.append(resultSet.getBoolean("Mercator"));
                sb.append('*');
                sb.append(resultSet.getBoolean("SeeBeyond"));
                sb.append('*');
                sb.append(resultSet.getBoolean("WebMethods"));
                sb.append('*');
                sb.append(resultSet.getBoolean("Wdi"));
                sb.append('*');
                sb.append(resultSet.getBoolean("Ics"));
                sb.append('*');
                sb.append(resultSet.getBoolean("MessageBroker"));
                sb.append('*');
                sb.append(resultSet.getBoolean("Tibco"));
                sb.append('*');
                sb.append(resultSet.getBoolean("Vitria"));
                sb.append('*');
                sb.append(resultSet.getBoolean("Wps"));
                sb.append('*');
                sb.append(resultSet.getBoolean("BiztalkServer"));
                sb.append('*');
                sb.append(resultSet.getBoolean("JDEdwards"));
                sb.append('*');
                sb.append(resultSet.getBoolean("OracleApps"));
                sb.append('*');
                sb.append(resultSet.getBoolean("PeopleSoft"));
                sb.append('*');
                sb.append(resultSet.getBoolean("Sap"));
                sb.append('*');
                sb.append(resultSet.getBoolean("Siebel"));
                sb.append('*');
                sb.append(resultSet.getBoolean("Baan"));
                sb.append('*');
                sb.append(resultSet.getBoolean("BeaPortals"));
                sb.append('*');
                sb.append(resultSet.getBoolean("OraclePortals"));
                sb.append('*');
                sb.append(resultSet.getBoolean("IbmPortals"));
                sb.append('*');
                sb.append(resultSet.getBoolean("SharePoint"));
                sb.append('*');
                sb.append(resultSet.getBoolean("SapPortals"));
                sb.append('*');
                sb.append(resultSet.getBoolean("Microsoft"));
                sb.append('*');
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return sb.toString();
    }

    /**
     *
     * This method is used to save the Account Details
     * @param accountId
     * @param accountName
     * @param urlPath
     * @param homePhone
     * @param stockSymbol1
     * @param lastModiyBy
     * @param modifiedDate
     * @param gentran
     * @param harbinger
     * @param mercator
     * @param seeBeyond
     * @param webMethods
     * @param WDI
     * @param ICS
     * @param messageBroker
     * @param tibco
     * @param vitria
     * @param WPS
     * @param biztalkServer
     * @param jdEdwards
     * @param oracleApps
     * @param peopleSoft
     * @param SAP
     * @param siebel
     * @param baan
     * @param beaPortals
     * @param oraclePortals
     * @param ibmPortals
     * @param sharePoint
     * @param sapPortals
     * @param microsoft
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String saveAccount(int accountId, String accountName, String urlPath, String homePhone,
            String stockSymbol1, String lastModiyBy, Timestamp modifiedDate, String gentran, String harbinger,
            String mercator, String seeBeyond, String webMethods, String WDI, String ICS, String messageBroker,
            String tibco, String vitria, String WPS, String biztalkServer, String jdEdwards, String oracleApps,
            String peopleSoft, String SAP, String siebel, String baan, String beaPortals, String oraclePortals,
            String ibmPortals, String sharePoint, String sapPortals, String microsoft) throws ServiceLocatorException {

        int updatedRows = 0;
        String sendAccid = "";
        flag = false;

        // Connection connection = null;
        CallableStatement callableStatement = null;
        //  PreparedStatement preparedStatement = null;
        // ResultSet resultSet=null;
        queryString = "SELECT * FROM tblCrmAccount WHERE Id=" + accountId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                flag = true;
            }
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                }
            } catch (SQLException sql) {
                sql.printStackTrace();
            }

            if (flag == true) {
                callableStatement = connection.prepareCall("{call spMarketingAccountSoftwares(?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

                callableStatement.setInt(1, accountId);
                callableStatement.setString(2, accountName);
                callableStatement.setString(3, urlPath);
                callableStatement.setString(4, homePhone);
                callableStatement.setString(5, stockSymbol1);
                callableStatement.setString(6, lastModiyBy);
                callableStatement.setTimestamp(7, modifiedDate);

                callableStatement.setBoolean(8, Boolean.valueOf(gentran).booleanValue());
                callableStatement.setBoolean(9, Boolean.valueOf(harbinger).booleanValue());
                callableStatement.setBoolean(10, Boolean.valueOf(mercator).booleanValue());
                callableStatement.setBoolean(11, Boolean.valueOf(seeBeyond).booleanValue());
                callableStatement.setBoolean(12, Boolean.valueOf(webMethods).booleanValue());
                callableStatement.setBoolean(13, Boolean.valueOf(WDI).booleanValue());
                callableStatement.setBoolean(14, Boolean.valueOf(ICS).booleanValue());
                callableStatement.setBoolean(15, Boolean.valueOf(messageBroker).booleanValue());
                callableStatement.setBoolean(16, Boolean.valueOf(tibco).booleanValue());
                callableStatement.setBoolean(17, Boolean.valueOf(vitria).booleanValue());
                callableStatement.setBoolean(18, Boolean.valueOf(WPS).booleanValue());
                callableStatement.setBoolean(19, Boolean.valueOf(biztalkServer).booleanValue());
                callableStatement.setBoolean(20, Boolean.valueOf(jdEdwards).booleanValue());
                callableStatement.setBoolean(21, Boolean.valueOf(oracleApps).booleanValue());

                callableStatement.setBoolean(22, Boolean.valueOf(peopleSoft).booleanValue());
                callableStatement.setBoolean(23, Boolean.valueOf(SAP).booleanValue());
                callableStatement.setBoolean(24, Boolean.valueOf(siebel).booleanValue());
                callableStatement.setBoolean(25, Boolean.valueOf(baan).booleanValue());
                callableStatement.setBoolean(26, Boolean.valueOf(beaPortals).booleanValue());
                callableStatement.setBoolean(27, Boolean.valueOf(oraclePortals).booleanValue());
                callableStatement.setBoolean(28, Boolean.valueOf(ibmPortals).booleanValue());
                callableStatement.setBoolean(29, Boolean.valueOf(sharePoint).booleanValue());
                callableStatement.setBoolean(30, Boolean.valueOf(sapPortals).booleanValue());
                callableStatement.setBoolean(31, Boolean.valueOf(microsoft).booleanValue());

                callableStatement.setString(32, "Upd");
                callableStatement.registerOutParameter(33, Types.VARCHAR);
                updatedRows = callableStatement.executeUpdate();
                int getaccIdProcedure = callableStatement.getInt(33);
                sendAccid = Integer.toString(getaccIdProcedure);
            }

            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
            } catch (SQLException sql) {
                sql.printStackTrace();
            }


            if (flag == false) {
                callableStatement = connection.prepareCall("{call spMarketingAccountSoftwares(?,?,?,?,?,"
                        + "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

                callableStatement.setInt(1, 1);
                callableStatement.setString(2, accountName);
                callableStatement.setString(3, urlPath);
                callableStatement.setString(4, homePhone);
                callableStatement.setString(5, stockSymbol1);
                callableStatement.setString(6, lastModiyBy);
                callableStatement.setTimestamp(7, modifiedDate);

                callableStatement.setBoolean(8, Boolean.valueOf(gentran).booleanValue());
                callableStatement.setBoolean(9, Boolean.valueOf(harbinger).booleanValue());
                callableStatement.setBoolean(10, Boolean.valueOf(mercator).booleanValue());
                callableStatement.setBoolean(11, Boolean.valueOf(seeBeyond).booleanValue());
                callableStatement.setBoolean(12, Boolean.valueOf(webMethods).booleanValue());
                callableStatement.setBoolean(13, Boolean.valueOf(WDI).booleanValue());
                callableStatement.setBoolean(14, Boolean.valueOf(ICS).booleanValue());
                callableStatement.setBoolean(15, Boolean.valueOf(messageBroker).booleanValue());
                callableStatement.setBoolean(16, Boolean.valueOf(tibco).booleanValue());
                callableStatement.setBoolean(17, Boolean.valueOf(vitria).booleanValue());
                callableStatement.setBoolean(18, Boolean.valueOf(WPS).booleanValue());
                callableStatement.setBoolean(19, Boolean.valueOf(biztalkServer).booleanValue());
                callableStatement.setBoolean(20, Boolean.valueOf(jdEdwards).booleanValue());
                callableStatement.setBoolean(21, Boolean.valueOf(oracleApps).booleanValue());

                callableStatement.setBoolean(22, Boolean.valueOf(peopleSoft).booleanValue());
                callableStatement.setBoolean(23, Boolean.valueOf(SAP).booleanValue());
                callableStatement.setBoolean(24, Boolean.valueOf(siebel).booleanValue());
                callableStatement.setBoolean(25, Boolean.valueOf(baan).booleanValue());
                callableStatement.setBoolean(26, Boolean.valueOf(beaPortals).booleanValue());
                callableStatement.setBoolean(27, Boolean.valueOf(oraclePortals).booleanValue());
                callableStatement.setBoolean(28, Boolean.valueOf(ibmPortals).booleanValue());
                callableStatement.setBoolean(29, Boolean.valueOf(sharePoint).booleanValue());
                callableStatement.setBoolean(30, Boolean.valueOf(sapPortals).booleanValue());
                callableStatement.setBoolean(31, Boolean.valueOf(microsoft).booleanValue());

                callableStatement.setString(32, "Ins");
                callableStatement.registerOutParameter(33, Types.VARCHAR);
                updatedRows = callableStatement.executeUpdate();
                int getaccIdProcedure = callableStatement.getInt(33);
                sendAccid = Integer.toString(getaccIdProcedure);
            }

        } catch (SQLException se) {
            se.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }
        return sendAccid;
    }

    /**
     *
     * This method is used to get the Name & Id off the Account
     * @param accountId
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getScreenContactDetails(int accountId) throws ServiceLocatorException {
        boolean isGetting = false;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        StringBuffer sb = new StringBuffer();
        StringBuffer newString = new StringBuffer();
        queryString = "SELECT concat(FirstName,' ',MiddleName,' ',LastName) AS ContactName,Id "
                + "FROM tblCrmContact WHERE (FirstName is NOT NULL OR LastName is NOT NULL OR MiddleName is NOT NULL) AND AccountId =" + accountId;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();

            int count = 0;
            sb.append("<xml version=\"1.0\">");
            sb.append("<CONTACTS>");
            while (resultSet.next()) {
                sb.append("<CONTACT><VALID>true</VALID>");
                sb.append("<NAME>" + resultSet.getString(1) + "</NAME>");
                sb.append("<CONTID>" + String.valueOf(resultSet.getInt(2)) + "</CONTID>");
                sb.append("</CONTACT>");
                isGetting = true;
                count++;
            }
            if (!isGetting) {
                isGetting = false;
                sb.append("<CONTACT><VALID>false</VALID></CONTACT>");
            }
            sb.append("</CONTACTS>");
            sb.append("</xml>");


        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }

        }

        return sb.toString();
    }

    /**
     *
     * This method is used to get the Contact Details
     * @param contactId
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getContactDetails(int contactId) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        StringBuffer sb = new StringBuffer();
        queryString = "Select Id,FirstName,LastName,MiddleName,Email1,HomePhone,LeadSource from tblCrmContact WHERE Id =" + contactId;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.prepareStatement(queryString);
            resultSet = statement.executeQuery();

            int count = 0;
            String test = null;

            while (resultSet.next()) {
                sb.append(resultSet.getString("FirstName"));
                sb.append('*');
                sb.append(resultSet.getString("LastName"));
                sb.append('*');
                sb.append(resultSet.getString("MiddleName"));
                sb.append('*');
                sb.append(resultSet.getString("Email1"));
                sb.append('*');
                sb.append(resultSet.getString("HomePhone"));
                sb.append('*');
                sb.append(resultSet.getString("LeadSource"));
                sb.append('*');
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return sb.toString();
    }

    /**
     *
     * This method is used to get the Employee Image
     * @param image
     * @return byte[]
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public byte[] getEmployeeImage(String image) throws ServiceLocatorException {
        byte[] bytes = null;
        long len = 0;
        File imageFile = null;
        String loginId = null;
        try {
         //   byte[] imgByteArray = null;
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement("select LoginId from tblEmployee where Email1='" + image + "'");
         //   resultSet = statement.executeQuery("select image from tblEmployee where loginId='" + image + "'" );
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
             //   imgByteArray = resultSet.getBytes("image");
                loginId = resultSet.getString("LoginId");
            }
            String basePath = Properties.getProperty("EmpImages.path");
            File createPath = new File(basePath);
                    System.out.println("createPath..." + createPath);
                     imageFile = new File(createPath.getAbsolutePath() + "//" + loginId + ".png");
             System.out.println("......."+imageFile);
            if (!imageFile.exists()) {
                       imageFile = new File(Properties.getProperty("No.Image"));
                 //  imageFile = new File(Properties.getProperty("No.Image"));
              //  bytes = imgByteArray;
            }
                InputStream is = new FileInputStream(imageFile);
                long length = imageFile.length();

                bytes = new byte[(int) length];
                int offset = 0;
                int numRead = 0;
                while (offset < bytes.length
                        && (numRead = is.read(bytes, offset, bytes.length - offset)) >= 0) {
                    offset += numRead;
                }
                is.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (Exception sql) {
                sql.printStackTrace();
            }
        }

        return bytes;

    }


    /**
     *
     * This method is used to get the List of States of a Country
     * @param country
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getStates(String country) throws ServiceLocatorException {

        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        stringBuffer = new StringBuffer();
        queryString = "SELECT StateName,CountryName FROM vwCountryState where CountryName = " + "'" + country + "'";
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            //stringBuffer.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
            stringBuffer.append("<xml version=\"1.0\">");
            stringBuffer.append("<COUNTRY countryName=\"" + country + "\">");
            stringBuffer.append("<STATE>--Please Select--</STATE>");
            while (resultSet.next()) {
                stringBuffer.append("<STATE>" + resultSet.getString("StateName") + "</STATE>");
            }
            stringBuffer.append("</COUNTRY>");
            stringBuffer.append("</xml>");

        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return stringBuffer.toString();
    }

    /**
     *
     * This method is used to get the Department of a user
     * @param departmentName
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getEmployeeDepartment(String departmentName) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        deptId = departmentName;
        queryString = "Select Description from tblLKPractice where DepartmentId = "
                + "(select id from tblLKDepartment where Description='" + departmentName + "') ORDER BY Description";
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            //stringBuffer.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
            stringBuffer.append("<xml version=\"1.0\">");
            stringBuffer.append("<DEPARTMENT Description=\"" + departmentName + "\">");
            stringBuffer.append("<PRACTICE>--Please Select--</PRACTICE>");

            stringBuffer.append("<PRACTICE>All</PRACTICE>");
            while (resultSet.next()) {
                stringBuffer.append("<PRACTICE att=\"\">" + resultSet.getString("description") + "</PRACTICE>");
            }
            stringBuffer.append("</DEPARTMENT>");
            stringBuffer.append("</xml>");

        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }

        }
        //System.out.println("Practice List: "+stringBuffer.toString());
        return stringBuffer.toString();
    }

    /**
     *
     * This method is used to get the Title of user
     * @param departmentName
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getEmpForTitles(String departmentName) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        try {
            queryString = "Select Description from tblLKTitleType where DepartmentId = "
                    + "(select id from tblLKDepartment where Description='" + departmentName + "') and Status='Active'";
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            //stringBuffer.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
            stringBuffer.append("<xml version=\"1.0\">");
            stringBuffer.append("<DEPARTMENT Description=\"" + departmentName + "\">");
            stringBuffer.append("<TITLE>--Please Select--</TITLE>");
             while (resultSet.next()) {
            String titleName = resultSet.getString("Description") ;
            if(titleName.contains("&") && !titleName.contains("&amp;")){
            titleName =   titleName.replaceAll("&", "&amp;") ;
            }
               // System.out.println("titleName.."+titleName);
                stringBuffer.append("<TITLE att=\"\">" + titleName + "</TITLE>");
            }
            stringBuffer.append("</DEPARTMENT>");
            stringBuffer.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return stringBuffer.toString();
    }

    /**
     *
     * This method is used to get the Practice of User
     * @param practiceName
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getEmpPractice(String practiceName) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        practiceId = practiceName;

        //System.out.println("practiceName  "+  practiceName);

        try {
            if (practiceName.equals("All")) {
                queryString = "select description from tblLKSubPractice  ORDER BY description";
            } else {
                queryString = "select description from tblLKSubPractice where PracticeId in "
                        + " (select id from tblLKPractice where Description=" + "'" + practiceName + "')  ORDER BY description";
            }
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            //stringBuffer.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
            stringBuffer.append("<xml version=\"1.0\">");
            stringBuffer.append("<PRACTICE Description=\"" + practiceName + "\">");
            stringBuffer.append("<SUBPRACTICE>--Please Select--</SUBPRACTICE>");
            if (!practiceName.equalsIgnoreCase("East") && !practiceName.equalsIgnoreCase("West") && !practiceName.equalsIgnoreCase("Central")) {
                stringBuffer.append("<SUBPRACTICE>All</SUBPRACTICE>");
            }
            while (resultSet.next()) {
                //System.out.println("description  "+ resultSet.getString("description"));
                stringBuffer.append("<SUBPRACTICE att=\"\">" + resultSet.getString("description") + "</SUBPRACTICE>");
            }
            stringBuffer.append("</PRACTICE>");
            stringBuffer.append("</xml>");

        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }

        }
        return stringBuffer.toString();
    }

    /**
     *
     *  This method is used to get the Subpractice of user
     * @param subPracticeName
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getEmpSubPractice(String subPracticeName) throws ServiceLocatorException {
        subPractice = subPracticeName;
        stringBuffer = new StringBuffer();
        queryString = "select description from tblLKTeam where SubPracticeId="
                + " (select id from tblLKSubPractice where Description=" + "'" + subPracticeName + "')";


        //  System.out.println("queryString------>"+queryString);

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            //stringBuffer.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
            stringBuffer.append("<xml version=\"1.0\">");
            stringBuffer.append("<SUBPRACTICE Description=\"" + subPracticeName + "\">");
            stringBuffer.append("<TEAM >--Please Select--</TEAM>");
            if (!subPracticeName.equalsIgnoreCase("East") && !subPracticeName.equalsIgnoreCase("West") && !subPracticeName.equalsIgnoreCase("Central")) {
                stringBuffer.append("<TEAM >All</TEAM>");
            }
            while (resultSet.next()) {
                stringBuffer.append("<TEAM>" + resultSet.getString("description") + "</TEAM>");
            }
            stringBuffer.append("</SUBPRACTICE>");
            stringBuffer.append("</xml>");


        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return stringBuffer.toString();
    }

    /**
     *
     * This method is used to get The Managers & Teamleads List of a Department
     * @param deptName
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getEmpForReportsTo(String deptName) throws ServiceLocatorException {
        StringBuffer reportsToBuffer = new StringBuffer();
        String loginId = null;
        String topManagementPeople[] = null;
        boolean isTopManager = false;
        // queryString = "SELECT LoginId,FName,MName,LName FROM tblEmployee WHERE DepartmentId='" + deptName + "' AND (IsManager=1 OR IsTeamLead=1) AND CurStatus='Active' ORDER BY FName";
        if (deptName.equals("GDC") || deptName.equals("SSG") || deptName.equals("Marketing")) {
            queryString = "SELECT LoginId,FName,MName,LName FROM tblEmployee WHERE (DepartmentId='SSG' OR DepartmentId='GDC' OR DepartmentId='Marketing') AND (IsManager=1 OR IsTeamLead=1) AND CurStatus='Active' ORDER BY FName";
        } else {
            queryString = "SELECT LoginId,FName,MName,LName FROM tblEmployee WHERE DepartmentId='" + deptName + "' AND (IsManager=1 OR IsTeamLead=1) AND CurStatus='Active' ORDER BY FName";
        }
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            reportsToBuffer.append("<xml version=\"1.0\">");
            reportsToBuffer.append("<TEAM Description=\"" + deptName + "\">");
            reportsToBuffer.append("<USER userId=\"\">--Please Select--</USER>");

            topManagementPeople = Properties.getProperty("Top.Management.People").split(",");
            for (String topManager : topManagementPeople) {
                reportsToBuffer.append("<USER userId=\"" + topManager + "\">" + Properties.getProperty(topManager) + "</USER>");
            }
            while (resultSet.next()) {
                loginId = resultSet.getString("LoginId");
                isTopManager = false;
                for (String topManager : topManagementPeople) {
                    if (topManager.equals(loginId)) {
                        isTopManager = true;
                    }
                    break;
                }

                if (!isTopManager) {
                    reportsToBuffer.append("<USER userId=\"" + loginId + "\">");
                    reportsToBuffer.append(resultSet.getString("FName") + " " + resultSet.getString("MName") + "." + resultSet.getString("LName"));
                    reportsToBuffer.append("</USER>");
                }
            }
            reportsToBuffer.append("</TEAM>");
            reportsToBuffer.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        //System.out.println("Team List: "+reportsToBuffer.toString());
        return reportsToBuffer.toString();
    }

    /**
     *
     * This method is used to get The Vacation List
     * @param startDate
     * @param endDate
     * @param department
     * @param organization
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getEmpVacationList(String startDate, String endDate, String department, String organization) throws ServiceLocatorException {
        String queryString = "";

        CallableStatement callableStatement = null;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spGetVacationList(?,?,?,?,?,?)}");
            callableStatement.setString(1, startDate);
            callableStatement.setString(2, endDate);
            callableStatement.setString(3, organization);
            callableStatement.setString(4, department);
            callableStatement.registerOutParameter(5, java.sql.Types.VARCHAR);
            callableStatement.registerOutParameter(6, java.sql.Types.VARCHAR);
            resultSet = callableStatement.executeQuery();
            queryString = callableStatement.getString(5);
        } catch (Exception e) {
        } finally {
            try {

                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }
        return queryString;
    }

    //Hari Accounts
    /**
     *
     * This method is used to get The List of Accounts
     * @param accountName
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getAccountList(String accountName) throws ServiceLocatorException {
        String accList = "";
        CallableStatement callableStatement = null;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spGetAccountList(?,?)}");
            callableStatement.setString(1, accountName);
            callableStatement.registerOutParameter(2, Types.VARCHAR);
            callableStatement.executeUpdate();
            // System.out.println("callableStatement.getString(frmAccList)"+callableStatement.getString("frmAccList"));
            accList = callableStatement.getString("frmAccList");
            // System.out.println("accList"+accList);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return accList;
    }

    public String mergeAccounts(String accountName, String accountName2) throws ServiceLocatorException {
        String accList = "";
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        CallableStatement callableStatement = null;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call AccountsMerge(?,?,?)}");
            callableStatement.setString(1, accountName);
            callableStatement.setString(2, accountName2);
            callableStatement.registerOutParameter(3, java.sql.Types.VARCHAR);
            callableStatement.executeUpdate();
            // System.out.println("Before"+callableStatement.getString(3));
            accList = callableStatement.getString(3);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return accList;
    }

    /**
     *
     * This method is used to Assign Account
     * @param accountName
     * @param state
     * @param secondState
     * @param loginId
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String assignAccount(String accountName, String state, String secondState, String loginId, String loginEMpName, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        String queryString = null;
        //  String loginId1 = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_NAME).toString();
        CallableStatement callableStatement = null;
        DataSourceDataProvider dataSourceDataProvider = null;
        try {
            connection = ConnectionProvider.getInstance().getConnection();

            if (!(loginId.equalsIgnoreCase("newloginId"))) {

                // New : get loginid employee team accounts team states list.
                List stateList = (ArrayList) dataSourceDataProvider.getInstance().getStatesListForTeam(loginEMpName, httpServletRequest);
                //  System.out.println("state----"+secondState);
                // System.out.println("state contains-----"+stateList.contains(secondState));
                // New : If condition added for verifing the given state is existed in his team states
                if (stateList.contains(secondState)) {

                    callableStatement = connection.prepareCall("{call spTransferStateAccounts(?,?,?)}");

                    callableStatement.setString(1, loginId);
                    callableStatement.setString(2, secondState);
                    callableStatement.registerOutParameter(3, Types.VARCHAR);
                    resultSet = callableStatement.executeQuery();
                    queryString = callableStatement.getString(3);
                    resultSet.close();
                    resultSet = null;
                    callableStatement.close();
                    callableStatement = null;
                } else {
                    queryString = "You are not priviliged to assign the state " + state + " accounts";
                }
            }


            if ((loginId.equalsIgnoreCase("newloginId"))) {
                //callableStatement = connection.prepareCall("{call spAccountTeamAssignment(?,?,?)}");
                //System.out.println("start");
                // if(dataSourceDataProvider.getInstance().getAccountState(accountName).equalsIgnoreCase(state)){
                String loginId1 = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
                callableStatement = connection.prepareCall("{call spAccountTeamAssignment(?,?,?,?)}");
                callableStatement.setString(1, accountName);
                callableStatement.registerOutParameter(2, Types.VARCHAR);
                callableStatement.setString(3, state);
                callableStatement.setString(4, loginId1);
                resultSet = callableStatement.executeQuery();
                queryString = callableStatement.getString(2);
                resultSet.close();
                resultSet = null;
                callableStatement.close();
                callableStatement = null;
                /*  }else{
                queryString = "This Account is not belongs to the given state";
                }*/
            }
        } catch (Exception e) {

            throw new ServiceLocatorException(e);

        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                throw new ServiceLocatorException(ex);
            }
        }
        return queryString;
    }

    /**
     *
     * This method is used to transfer the Account
     * @param accId
     * @param oldTeamMember
     * @param newMember
     * @param optType
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String accountSearchUpdate(String accId, String oldTeamMember, String newMember, String optType) throws ServiceLocatorException {
        String queryString = null;
        CallableStatement callableStatement = null;
        int count = 0;
        try {
            connection = ConnectionProvider.getInstance().getConnection();

            int valType = Integer.parseInt(optType);

            int acId = Integer.parseInt(accId);
            callableStatement = connection.prepareCall("{call spUpdateAccountPrimary(?,?,?,?)}");
            callableStatement.setInt(1, acId);
            callableStatement.setString(2, oldTeamMember);
            callableStatement.setString(3, newMember);
            callableStatement.setInt(4, valType);
            count = callableStatement.executeUpdate();
            if (count > 0) {
                queryString = "Account Transfered";
            } else {
                queryString = "Account Not Transfered";
            }

        } catch (Exception e) {
            throw new ServiceLocatorException(e);
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                throw new ServiceLocatorException(ex);
            }
        }

        return queryString;
    }

    //  Sagar Employee
    /**
     *
     * This method is used to Serach the Greensheet
     * @param poStatus
     * @param poType
     * @param accountName
     * @param empFname
     * @param empLname
     * @param poStartDateFrom
     * @param poStartDateTo
     * @param poEndDateFrom
     * @param poEndDateTo
     * @param empStartDateFrom
     * @param empStartDateTo
     * @param empEndDateFrom
     * @param empEndDateTo
     * @param queryType
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getGreensheetSearch(String poStatus, String poType, String accountName, String empFname, String empLname,
            String poStartDateFrom, String poStartDateTo, String poEndDateFrom, String poEndDateTo, String empStartDateFrom, String empStartDateTo,
            String empEndDateFrom, String empEndDateTo, String country, String queryType) throws ServiceLocatorException {


        if (poStatus == null || poStatus.equalsIgnoreCase("nodata")) {
            poStatus = "%";
        } else {
            poStatus += "%";
        }

        if (accountName == null || accountName.equalsIgnoreCase("nodata")) {
            accountName = "%";
            //System.err.println("accountName"+accountName);
        } else {
            accountName += "%";
        }

        if (empFname == null || empFname.equalsIgnoreCase("nodata")) {
            empFname = "%";
        } else {
            empFname += "%";
        }

        if (empLname == null || empLname.equalsIgnoreCase("nodata")) {
            empLname = "%";
        } else {
            empLname += "%";
        }

        if (country == null || country.equalsIgnoreCase("nodata")) {
            country = "%";
        } else {
            country += "%";
        }

        String out = getGreenSheettList(poStatus, accountName, empFname, empLname, poStartDateFrom, poStartDateTo, poEndDateFrom, poEndDateTo,
                empStartDateFrom, empStartDateTo, empEndDateFrom, empEndDateTo, country, queryType);
        return out;
        //return "out";
    }

    /**
     *
     * This method is used to Serach the Greensheet List
     * @param poStatus
     * @param accountName
     * @param empFname
     * @param empLname
     * @param poStartDateFrom
     * @param poStartDateTo
     * @param poEndDateFrom
     * @param poEndDateTo
     * @param empStartDateFrom
     * @param empStartDateTo
     * @param empEndDateFrom
     * @param empEndDateTo
     * @param queryType
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getGreenSheettList(String poStatus, String accountName, String empFname, String empLname,
            String poStartDateFrom, String poStartDateTo, String poEndDateFrom, String poEndDateTo, String empStartDateFrom, String empStartDateTo,
            String empEndDateFrom, String empEndDateTo, String country, String queryType) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spGetGreenSheetList(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");

            callableStatement.setString(1, poStatus);
            callableStatement.setString(2, accountName);
            callableStatement.setString(3, empFname);
            callableStatement.setString(4, empLname);
            callableStatement.setString(5, poStartDateFrom);
            callableStatement.setString(6, poStartDateTo);
            callableStatement.setString(7, poEndDateFrom);
            callableStatement.setString(8, poEndDateTo);
            callableStatement.setString(9, empStartDateFrom);
            callableStatement.setString(10, empStartDateTo);
            callableStatement.setString(11, empEndDateFrom);
            callableStatement.setString(12, empEndDateTo);
            callableStatement.setString(13, country);
            callableStatement.setString(14, queryType);

            callableStatement.registerOutParameter(15, Types.VARCHAR);
            callableStatement.registerOutParameter(16, Types.VARCHAR);

            callableStatement.executeUpdate();
            //consultantList = callableStatement.getString(5);
            stringBuffer.append(callableStatement.getString(15));
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getString(16));
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        //System.out.println("in impl >> "+ stringBuffer.toString());
        return stringBuffer.toString();
    }

    //public String getConsultantSearch(String firstName, String skillset, String email, String practiceid, String workAuthor, String createdBy) throws ServiceLocatorException{
    /**
     *
     * This method is used to Serach the Consultant
     * @param firstName
     * @param skillset
     * @param email
     * @param source
     * @param workAuthor
     * @param createdBy
     * @param location
     * @param comments
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getConsultantSearch(String firstName, String skillset, String email, String source, String workAuthor, String createdBy, String location, String comments) throws ServiceLocatorException {

        //String lastName="";

        /*        if (firstName=="nodata")
        firstName = "%";
        else
        firstName += "%";
         */
        if (firstName.equalsIgnoreCase("nodata") && skillset.equalsIgnoreCase("nodata") && email.equalsIgnoreCase("nodata") && source.equalsIgnoreCase("nodata")
                && workAuthor.equalsIgnoreCase("nodata") && createdBy.equalsIgnoreCase("nodata") && location.equalsIgnoreCase("nodata") && comments.equalsIgnoreCase("nodata")) {
            firstName = "";
            firstName += "%";
            skillset = "";
            skillset += "%";
            email = "";
            email += "%";
            source = "";
            source += "%";
            workAuthor = "";
            workAuthor += "%";
            createdBy = "";
            createdBy += "%";
            location = "";
            location += "%";
            comments = "";
            comments += "%";
        } else {

            if (firstName == null || firstName.equalsIgnoreCase("nodata")) {
                firstName = "";
            } else {
                firstName += "%";
            }

            if (skillset == null || skillset.equalsIgnoreCase("nodata")) {
                skillset = "";
            } else {
                skillset += "%";
            }

            if (email == null || email.equalsIgnoreCase("nodata")) {
                email = "";
            } else {
                email += "%";
            }

            if (source == null || source.equalsIgnoreCase("nodata")) {
                source = "";
            } else {
                source += "%";
            }

            if (workAuthor == null || workAuthor.equalsIgnoreCase("nodata")) {
                workAuthor = "";
            } else {
                workAuthor += "%";
            }

            if (createdBy == null || createdBy.equalsIgnoreCase("nodata")) {
                createdBy = "";
            } else {
                createdBy += "%";
            }

            if (location == null || location.equalsIgnoreCase("nodata")) {
                location = "";
            } else {
                location += "%";
            }

            if (comments == null || comments.equalsIgnoreCase("nodata")) {
                comments = "";
            } else {
                comments += "%";
            }
        }

        String out = getConsultantList(firstName, skillset, email, source, workAuthor, createdBy, location, comments);
        //System.out.println("cons result in search impl class******** "+out);
        //System.out.println("******** "+out);
        return out;
    }

    //private String getConsultantList(String firstName,String skillset,String email,String practiceid,String workAuthor,String createdBy){
    /**
     *
     * This method is used to Serach the List of Consultant
     * @param firstName
     * @param skillset
     * @param email
     * @param source
     * @param workAuthor
     * @param createdBy
     * @param location
     * @param comments
     * @return String
     */
    private String getConsultantList(String firstName, String skillset, String email, String source, String workAuthor, String createdBy, String location, String comments) {
        //String consultantList="";
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spGetConsultantList(?,?,?,?,?,?,?,?,?,?)}");
            callableStatement.setString(1, firstName);
            callableStatement.setString(2, skillset);
            callableStatement.setString(3, email);
            callableStatement.setString(4, source);
            callableStatement.setString(5, workAuthor);
            callableStatement.setString(6, createdBy);
            callableStatement.setString(7, location);
            callableStatement.setString(8, comments);
            callableStatement.registerOutParameter(9, Types.VARCHAR);
            callableStatement.registerOutParameter(10, Types.VARCHAR);

            callableStatement.executeUpdate();
            //consultantList = callableStatement.getString(5);
            stringBuffer.append(callableStatement.getString(9));
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getString(10));
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return stringBuffer.toString();
    }

    /**
     *
     * This method is used to Serach the Employee
     * @param firstName
     * @param lastName
     * @param skills
     * @return String
     */
    public String getEmployeeSearch(String firstName, String lastName, String skills) {
        if (firstName == null || firstName == "") {
            firstName = "%";
        } else {
            firstName += "%";
        }


        if (lastName == null || lastName == "") {
            lastName = "%";
        } else {
            lastName += "%";
        }

        if (skills == null || skills == "") {
            skills = "%";
        } else {
            skills += "%";
        }

        String out = getEmployeeList(firstName, lastName, skills);

        return out;
    }

    /**
     *
     * This method is used to get The Employee List
     * @param firstName
     * @param lastName
     * @param skils
     * @return String
     */
    private String getEmployeeList(String firstName, String lastName, String skils) {
        String empList = "";
        CallableStatement callableStatement = null;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spGetEmployeeList(?,?,?,?)}");
            callableStatement.setString(1, lastName);
            callableStatement.setString(2, firstName);
            callableStatement.setString(3, skils);
            callableStatement.registerOutParameter(4, Types.VARCHAR);
            callableStatement.executeUpdate();
            empList = callableStatement.getString(4);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return empList;
    }

    /**
     *
     * This method is used to get The Catagories
     * @param query
     * @param categoryId
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String catagory(String query, String categoryId) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();
            //stringBuffer.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
            stringBuffer.append("<xml version=\"1.0\">");
            stringBuffer.append("<CATAGORY catagoryName=\"" + categoryId + "\">");

            while (resultSet.next()) {
                stringBuffer.append("<ASSIGNID>" + resultSet.getString("Name") + "</ASSIGNID>");
            }
            stringBuffer.append("</CATAGORY>");
            stringBuffer.append("</xml>");

        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
            }

        }

        return stringBuffer.toString();

    }

    /**
     *
     * This method is used to get the Territories
     * @param query
     * @param region
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getTerritoryData(String query, String region) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();
            //stringBuffer.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
            stringBuffer.append("<xml version=\"1.0\">");
            stringBuffer.append("<REGION regionName=\"" + region + "\">");
            stringBuffer.append("<TERRITORY>--Please Select--</TERRITORY>");
            while (resultSet.next()) {
                stringBuffer.append("<TERRITORY>" + resultSet.getString("TerritoryName") + "</TERRITORY>");
            }
            stringBuffer.append("</REGION>");
            stringBuffer.append("</xml>");

        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }

        }

        return stringBuffer.toString();
    }

    /**
     *
     * This method is used to get The Subprojects
     * @param query
     * @param project
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getSubProject(String query, String project) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();
            //stringBuffer.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
            stringBuffer.append("<xml version=\"1.0\">");
            stringBuffer.append("<PROJECT projectName=\"" + project + "\">");
            stringBuffer.append("<SUBPROJECT>--Please Select--</SUBPROJECT>");
            while (resultSet.next()) {
                stringBuffer.append("<SUBPROJECT>" + resultSet.getString("SubProjectName") + "</SUBPROJECT>");
            }
            stringBuffer.append("</PROJECT>");
            stringBuffer.append("</xml>");

        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }

        }

        return stringBuffer.toString();
    }

    //Ajax PopUp
    /**
     *
     * This method is used to Populate the Activities
     * @param accId
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String popupActivity(int accId) throws ServiceLocatorException {
        String activityDesc = null;

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement("SELECT Description FROM tblCrmActivity WHERE Id=" + accId);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                activityDesc = resultSet.getString("Description");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return activityDesc;
    }

    /**
     *
     * This method is used to populat the Comments
     * @param accId
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String popupComments(int accId) throws ServiceLocatorException {
        String activityDesc = null;

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement("SELECT Comments,Description FROM tblCrmActivity WHERE Id=" + accId);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                //activityDesc = resultSet.getString("Comments");
                activityDesc = resultSet.getString("Description") + "<br><hr>" + resultSet.getString("Comments");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return activityDesc;
    }

    //Hari Projects Strarts
    /**
     *
     * This method is used to get the Subprojects
     * @param query
     * @param project
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getSubProjects(String query, String project) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();
            //stringBuffer.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
            stringBuffer.append("<xml version=\"1.0\">");
            stringBuffer.append("<PROJECT projectName=\"" + project + "\">");
            stringBuffer.append("<SUBPROJECT>--Please Select--</SUBPROJECT>");
            while (resultSet.next()) {
                stringBuffer.append("<SUBPROJECT>" + resultSet.getString("SubProjectName") + "</SUBPROJECT>");
            }
            stringBuffer.append("</PROJECT>");
            stringBuffer.append("</xml>");

        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }

        }

        return stringBuffer.toString();
    }

    /**
     *
     * This method is used to get the List of employees of a Project
     * @param query
     * @param project
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getProjEmployees(String query, String project) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();
            //stringBuffer.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
            stringBuffer.append("<xml version=\"1.0\">");
            stringBuffer.append("<PROJECT projectName=\"" + project + "\">");
            stringBuffer.append("<EMPNAME>--Please Select--</EMPNAME>");
            while (resultSet.next()) {
                stringBuffer.append("<EMPNAME>" + resultSet.getString("EmpName") + "</EMPNAME>");
            }
            stringBuffer.append("</PROJECT>");
            stringBuffer.append("</xml>");

        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }

        }

        return stringBuffer.toString();
    }
    //Hari Projects Ends

    /**
     *
     * This method is used to get the Customer Details
     * @param query
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getCustomerDetails(String query) throws ServiceLocatorException {
        boolean isGetting = false;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        StringBuffer sb = new StringBuffer();
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();

            int count = 0;
            sb.append("<xml version=\"1.0\">");
            sb.append("<EMPLOYEES>");
            while (resultSet.next()) {
                sb.append("<EMPLOYEE><VALID>true</VALID>");

                if (resultSet.getString(1) == null || resultSet.getString(1).equals("")) {
                    sb.append("<NAME>NoRecord</NAME>");
                } else {
                    String title = resultSet.getString(1);
                    if (title.contains("&")) {
                        title = title.replace("&", "&amp;");
                    }
                    sb.append("<NAME>" + title + "</NAME>");
                }
                //sb.append("<NAME>" +resultSet.getString(1) + "</NAME>");
                sb.append("<EMPID>" + String.valueOf(resultSet.getInt(2)) + "</EMPID>");
                sb.append("</EMPLOYEE>");
                isGetting = true;
                count++;
            }

            if (!isGetting) {
                //sb.append("<EMPLOYEES>" + sb.toString() + "</EMPLOYEES>");
                //} else {
                isGetting = false;
                //nothing to show
                //  response.setStatus(HttpServletResponse.SC_NO_CONTENT);
                sb.append("<EMPLOYEE><VALID>false</VALID></EMPLOYEE>");
            }
            sb.append("</EMPLOYEES>");
            sb.append("</xml>");
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        return sb.toString();
    }

    /**
     *
     * This method is used to get Consultant
     * @param query
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String gsConsultant(String query) throws ServiceLocatorException {
        boolean isGetting = false;
        StringBuffer sb = new StringBuffer();
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();
            int count = 0;
            String test = null;
            sb.append("<xml version=\"1.0\">");
            sb.append("<EMPLOYEES>");
            while (resultSet.next()) {
                sb.append("<EMPLOYEE><VALID>true</VALID>");
                sb.append("<FIRSTNAME>" + resultSet.getString(1) + "</FIRSTNAME>");
                test = resultSet.getString(2);
                test = (test == null || test.equals("") || test.length() < 1) ? "Not Avail" : resultSet.getString(2);
                sb.append("<LASTNAME>" + test + "</LASTNAME>");
                test = resultSet.getString(3);
                test = (test == null || test.equals("") || test.length() < 1) ? "Not Avail" : resultSet.getString(3);
                sb.append("<MIDDLENAME>" + test + "</MIDDLENAME>");
                test = resultSet.getString(4);
                test = (test == null || test.equals("") || test.length() < 1) ? "Not Avail" : resultSet.getString(4);
                sb.append("<CELLNO>" + test + "</CELLNO>");
                sb.append("</EMPLOYEE>");
                isGetting = true;
                count++;
                if (count > 30) {
                    break;
                }
            }
            if (!isGetting) {
//                response.getWriter().write("<employees>" + sb.toString() + "</employees>");
//            } else {
                isGetting = false;
                //nothing to show
                //  response.setStatus(HttpServletResponse.SC_NO_CONTENT);
                sb.append("<EMPLOYEE><VALID>false</VALID></EMPLOYEE>");
            }
            sb.append("</EMPLOYEES>");
            sb.append("</xml>");
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                throw new ServiceLocatorException(sqle);
            }
        }
        //System.err.println("Xml File----"+sb.toString());
        return sb.toString();
    }

    /**
     *
     * This method is used to get the Phone & WebAddress Details
     * @param query
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String greenSheet(String query) throws ServiceLocatorException {
        boolean isGetting = false;
        StringBuffer sb = new StringBuffer();
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();
            sb.append("<xml version=\"1.0\">");
            sb.append("<VENLIST>");
            if (resultSet.next()) {
                sb.append("<VENDETAILS><VALID>true</VALID>");
                sb.append("<PHONE>" + resultSet.getString(1) + "</PHONE>");
                sb.append("<MAIL>" + resultSet.getString(2) + "</MAIL>");
                sb.append("</VENDETAILS>");
                isGetting = true;
            }
            resultSet.close();
            resultSet = null;
            preparedStatement.close();
            preparedStatement = null;
            connection.close();
            connection = null;
            if (!isGetting) {
//            response.getWriter().write("<venList>" + sb.toString() + "</venList>");
//        } else {
                isGetting = false;
                //nothing to show
                //response.setStatus(HttpServletResponse.SC_NO_CONTENT);
                sb.append("<VENDETAILS><VALID>false</VALID></VENDETAILS>");
            }
            sb.append("</VENLIST>");
            sb.append("</xml>");
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                throw new ServiceLocatorException(sqle);
            }
        }
        return sb.toString();
    }

    /**
     *
     * This method is used to get the Consultant Details
     * @param query
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    /* public String getConsultantDetails(HttpServletRequest httpServletRequest,String query) throws ServiceLocatorException {
    boolean isGetting=false;
    Connection connection = null;
    PreparedStatement preparedStatement = null;
    ResultSet resultSet = null;
    StringBuffer sb = new StringBuffer();
    try{
    connection = ConnectionProvider.getInstance().getConnection();
    preparedStatement = connection.prepareStatement(query);
    resultSet = preparedStatement.executeQuery();
    
    int count=0;
    sb.append("<xml version=\"1.0\">");
    sb.append("<CONSULTANTS>");
    while(resultSet.next()) {
    httpServletRequest.getSession(false).setAttribute("consultantId",resultSet.getInt(2));
    //To set first name and last name
    
    httpServletRequest.getSession(false).setAttribute("consultantFirstName",resultSet.getString(3));
    httpServletRequest.getSession(false).setAttribute("consultantLastName",resultSet.getString(4));
    
    //System.err.print("consultantId------------>"+httpServletRequest.getSession(false).getAttribute("consultantId").toString());
    sb.append("<CONSULTANT><VALID>true</VALID>");
    sb.append("<EMAIL>" +resultSet.getString(1) + "</EMAIL>");
    sb.append("<ID>" +String.valueOf(resultSet.getInt(2)) + "</ID>");
    sb.append("<FNAME>"+resultSet.getString(3)+"</FNAME>");
    sb.append("<LNAME>"+resultSet.getString(4)+"</LNAME>");
    
    if(resultSet.getString(5) == null || resultSet.getString(5).equals("") ) {
    sb.append("<MNAME>NoRecord</MNAME>");
    }else {
    sb.append("<MNAME>"+resultSet.getString(5)+"</MNAME>");
    }
    
    if(resultSet.getString(6) == null || resultSet.getString(6).equals("") ) {
    sb.append("<TITLE>NoRecord</TITLE>");
    }else {
    String title = resultSet.getString(6);
    if(title.contains("&")) {
    title = title.replace("&","&amp;");
    }
    sb.append("<TITLE>"+title+"</TITLE>");
    }
    if(resultSet.getString(7) == null || resultSet.getString(7).equals("")) {
    sb.append("<GENDER>NoRecord</GENDER>");
    }else {
    sb.append("<GENDER>"+resultSet.getString(7)+"</GENDER>");
    }
    
    if(resultSet.getString(8) == null || resultSet.getString(8).equals("")) {
    sb.append("<WPHONE>NoRecord</WPHONE>");
    }else {
    sb.append("<WPHONE>"+resultSet.getString(8)+"</WPHONE>");
    }
    
    if(resultSet.getString(9) == null || resultSet.getString(9).equals("") ) {
    sb.append("<HPHONE>NoRecord</HPHONE>");
    }else {
    sb.append("<HPHONE>"+resultSet.getString(9)+"</HPHONE>");
    }
    
    if(resultSet.getString(10) == null || resultSet.getString(10).equals("") ) {
    sb.append("<CPHONE>NoRecord</CPHONE>");
    }else {
    sb.append("<CPHONE>"+resultSet.getString(10)+"</CPHONE>");
    }
    
    if(resultSet.getString(11) == null || resultSet.getString(11).equals("") ) {
    sb.append("<WORK>NoRecord</WORK>");
    }else {
    sb.append("<WORK>"+resultSet.getString(11)+"</WORK>");
    }
    if(resultSet.getString(12) == null || resultSet.getString(12).equals("") ) {
    sb.append("<SKILLS>NoRecord</SKILLS>");
    }else {
    String skillsSet = resultSet.getString(12);
    if(skillsSet.contains("&")) {
    skillsSet = skillsSet.replace("&","&amp;");
    }
    sb.append("<SKILLS>"+skillsSet+"</SKILLS>");
    }
    
    if(resultSet.getString(13) == null || resultSet.getString(13).equals("") ) {
    sb.append("<RATE>NoRecord</RATE>");
    }else {
    sb.append("<RATE>"+resultSet.getString(13)+"</RATE>");
    }
    
    if(resultSet.getString(14) == null || resultSet.getString(14).equals("") ) {
    sb.append("<PRACTICE>NoRecord</PRACTICE>");
    }else {
    sb.append("<PRACTICE>"+resultSet.getString(14)+"</PRACTICE>");
    }
    
    if(resultSet.getString(15) == null || resultSet.getString(15).equals("") ) {
    sb.append("<COUNTRY>NoRecord</COUNTRY>");
    }else {
    sb.append("<COUNTRY>"+resultSet.getString(15)+"</COUNTRY>");
    }
    
    if(resultSet.getString(16) == null || resultSet.getString(16).equals("") ) {
    sb.append("<REFFER>NoRecord</REFFER>");
    }else {
    sb.append("<REFFER>"+resultSet.getString(16)+"</REFFER>");
    }
    
    if(resultSet.getString(17) == null || resultSet.getString(17).equals("") ) {
    sb.append("<COMMENTS>NoRecord</COMMENTS>");
    }else {
    String comments = resultSet.getString(17);
    if(comments.contains("&")) {
    comments = comments.replace("&","&amp;");
    }
    sb.append("<COMMENTS>"+comments+"</COMMENTS>");
    }
    
    if(resultSet.getString(18) == null || resultSet.getString(18).equals("")) {
    sb.append("<INDUSTRY>NoRecord</INDUSTRY>");
    }else {
    String industry = resultSet.getString(18);
    if(industry.contains("&")) {
    industry = industry.replace("&","&amp;");
    }
    sb.append("<INDUSTRY>"+industry+"</INDUSTRY>");
    }
    
    if(resultSet.getString(19) == null ||resultSet.getString(19).equals("null") || resultSet.getString(19).equals("") ) {
    sb.append("<SOURCE>NoRecord</SOURCE>");
    }else {
    sb.append("<SOURCE>"+resultSet.getString(19)+"</SOURCE>");
    }
    
    
    /**
     *New Appender
     */
    /*if(resultSet.getString(20) == null ||resultSet.getString(20).equals("null") || resultSet.getString(20).equals("")) {
    sb.append("<DESCRIPTION>NoRecord</DESCRIPTION>");
    }else {
    String description = resultSet.getString(20);
    if(description.contains("&")) {
    description = description.replace("&","&amp;");
    }
    sb.append("<DESCRIPTION>"+description+"</DESCRIPTION>");
    }
    
    //System.out.println("timestamp-------String---------"+resultSet.getString(21)+"-------time stamp"+resultSet.getTimestamp(21));
    if(resultSet.getString(21) == null ||resultSet.getString(21).equals("null") || resultSet.getString(21).equals("")) {
    sb.append("<AVAILABLEFROM>NoRecord</AVAILABLEFROM>");
    }else {
    String availableFrom = resultSet.getString(21);
    if(availableFrom.contains("&")) {
    availableFrom = availableFrom.replace("&","&amp;");
    }
    sb.append("<AVAILABLEFROM>"+availableFrom+"</AVAILABLEFROM>");
    }
    
    
    
    sb.append("</CONSULTANT>");
    isGetting = true;
    count++;
    }
    
    if (!isGetting) {
    //sb.append("<CONSULTANTS>" + sb.toString() + "</CONSULTANTS>");
    //} else {
    isGetting = false;
    //nothing to show
    //  response.setStatus(HttpServletResponse.SC_NO_CONTENT);
    sb.append("<CONSULTANT><VALID>false</VALID></CONSULTANT>");
    }
    sb.append("</CONSULTANTS>");
    sb.append("</xml>");
    //System.err.println("Result----"+sb);
    }catch(SQLException sqle){
    throw new ServiceLocatorException(sqle);
    }finally{
    try{
    if(resultSet!=null){
    
    resultSet.close();
    resultSet =null;
    }
    if(preparedStatement!=null){
    preparedStatement.close();
    preparedStatement = null;
    }
    
    if(connection!=null){
    connection.close();
    connection = null;
    }
    }catch(SQLException sql){
    //System.err.print("Error :"+sql);
    }
    
    }
    return sb.toString();
    }*/
    //getConsultantDetails modified
    //To escape special charcter when end uesr enters specilal charcters  
    public String getConsultantDetails(HttpServletRequest httpServletRequest, String query) throws ServiceLocatorException {
        boolean isGetting = false;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        StringBuffer sb = new StringBuffer();
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();

            int count = 0;
            sb.append("<xml version=\"1.0\">");
            sb.append("<CONSULTANTS>");
            while (resultSet.next()) {
                httpServletRequest.getSession(false).setAttribute("consultantId", resultSet.getInt(2));
                //To set first name and last name

                httpServletRequest.getSession(false).setAttribute("consultantFirstName", resultSet.getString(3));
                httpServletRequest.getSession(false).setAttribute("consultantLastName", resultSet.getString(4));

                //System.err.print("consultantId------------>"+httpServletRequest.getSession(false).getAttribute("consultantId").toString());
                sb.append("<CONSULTANT><VALID>true</VALID>");
                sb.append("<EMAIL>" + resultSet.getString(1) + "</EMAIL>");
                sb.append("<ID>" + String.valueOf(resultSet.getInt(2)) + "</ID>");
                sb.append("<FNAME>" + StringEscapeUtils.escapeHtml(resultSet.getString(3)) + "</FNAME>");
                sb.append("<LNAME>" + StringEscapeUtils.escapeHtml(resultSet.getString(4)) + "</LNAME>");

                if (resultSet.getString(5) == null || resultSet.getString(5).equals("")) {
                    sb.append("<MNAME>NoRecord</MNAME>");
                } else {
                    sb.append("<MNAME>" + StringEscapeUtils.escapeHtml(resultSet.getString(5)) + "</MNAME>");
                }

                if (resultSet.getString(6) == null || resultSet.getString(6).equals("")) {
                    sb.append("<TITLE>NoRecord</TITLE>");
                } else {
                    /* String title = resultSet.getString(6);
                    if(title.contains("&")) {
                    title = title.replace("&","&amp;");
                    }
                    sb.append("<TITLE>"+title+"</TITLE>");*/
                    sb.append("<TITLE>" + StringEscapeUtils.escapeHtml(resultSet.getString(6)) + "</TITLE>");
                }
                if (resultSet.getString(7) == null || resultSet.getString(7).equals("")) {
                    sb.append("<GENDER>NoRecord</GENDER>");
                } else {
                    sb.append("<GENDER>" + resultSet.getString(7) + "</GENDER>");
                }

                if (resultSet.getString(8) == null || resultSet.getString(8).equals("")) {
                    sb.append("<WPHONE>NoRecord</WPHONE>");
                } else {
                    sb.append("<WPHONE>" + resultSet.getString(8) + "</WPHONE>");
                }

                if (resultSet.getString(9) == null || resultSet.getString(9).equals("")) {
                    sb.append("<HPHONE>NoRecord</HPHONE>");
                } else {
                    sb.append("<HPHONE>" + resultSet.getString(9) + "</HPHONE>");
                }

                if (resultSet.getString(10) == null || resultSet.getString(10).equals("")) {
                    sb.append("<CPHONE>NoRecord</CPHONE>");
                } else {
                    sb.append("<CPHONE>" + resultSet.getString(10) + "</CPHONE>");
                }

                if (resultSet.getString(11) == null || resultSet.getString(11).equals("")) {
                    sb.append("<WORK>NoRecord</WORK>");
                } else {
                    sb.append("<WORK>" + StringEscapeUtils.escapeHtml(resultSet.getString(11)) + "</WORK>");
                }
                if (resultSet.getString(12) == null || resultSet.getString(12).equals("")) {
                    sb.append("<SKILLS>NoRecord</SKILLS>");
                } else {
                    String skillsSet = resultSet.getString(12);
                    /* if(skillsSet.contains("&")) {
                    skillsSet = skillsSet.replace("&","&amp;");
                    }*/
                    sb.append("<SKILLS>" + StringEscapeUtils.escapeHtml(skillsSet) + "</SKILLS>");
                }

                if (resultSet.getString(13) == null || resultSet.getString(13).equals("")) {
                    sb.append("<RATE>NoRecord</RATE>");
                } else {
                    sb.append("<RATE>" + resultSet.getString(13) + "</RATE>");
                }

                if (resultSet.getString(14) == null || resultSet.getString(14).equals("")) {
                    sb.append("<PRACTICE>NoRecord</PRACTICE>");
                } else {
                    sb.append("<PRACTICE>" + resultSet.getString(14) + "</PRACTICE>");
                }

                if (resultSet.getString(15) == null || resultSet.getString(15).equals("")) {
                    sb.append("<COUNTRY>NoRecord</COUNTRY>");
                } else {
                    sb.append("<COUNTRY>" + resultSet.getString(15) + "</COUNTRY>");
                }

                if (resultSet.getString(16) == null || resultSet.getString(16).equals("")) {
                    sb.append("<REFFER>NoRecord</REFFER>");
                } else {
                    sb.append("<REFFER>" + StringEscapeUtils.escapeHtml(resultSet.getString(16)) + "</REFFER>");
                }

                if (resultSet.getString(17) == null || resultSet.getString(17).equals("")) {
                    sb.append("<COMMENTS>NoRecord</COMMENTS>");
                } else {
                    String comments = resultSet.getString(17);
                    /* if(comments.contains("&")) {
                    comments = comments.replace("&","&amp;");
                    }*/
                    sb.append("<COMMENTS>" + StringEscapeUtils.escapeHtml(comments) + "</COMMENTS>");
                }

                if (resultSet.getString(18) == null || resultSet.getString(18).equals("")) {
                    sb.append("<INDUSTRY>NoRecord</INDUSTRY>");
                } else {
                    String industry = resultSet.getString(18);
                    /*  if(industry.contains("&")) {
                    industry = industry.replace("&","&amp;");
                    }*/
                    sb.append("<INDUSTRY>" + StringEscapeUtils.escapeHtml(industry) + "</INDUSTRY>");
                }

                if (resultSet.getString(19) == null || resultSet.getString(19).equals("null") || resultSet.getString(19).equals("")) {
                    sb.append("<SOURCE>NoRecord</SOURCE>");
                } else {
                    sb.append("<SOURCE>" + StringEscapeUtils.escapeHtml(resultSet.getString(19)) + "</SOURCE>");
                }


                /**
                 *New Appender
                 */
                if (resultSet.getString(20) == null || resultSet.getString(20).equals("null") || resultSet.getString(20).equals("")) {
                    sb.append("<DESCRIPTION>NoRecord</DESCRIPTION>");
                } else {
                    String description = resultSet.getString(20);
                    /* if(description.contains("&")) {
                    description = description.replace("&","&amp;");
                    }*/
                    sb.append("<DESCRIPTION>" + StringEscapeUtils.escapeHtml(description) + "</DESCRIPTION>");
                }

                //System.out.println("timestamp-------String---------"+resultSet.getString(21)+"-------time stamp"+resultSet.getTimestamp(21));
                if (resultSet.getString(21) == null || resultSet.getString(21).equals("null") || resultSet.getString(21).equals("")) {
                    sb.append("<AVAILABLEFROM>NoRecord</AVAILABLEFROM>");
                } else {
                    String availableFrom = resultSet.getString(21);
                    if (availableFrom.contains("&")) {
                        availableFrom = availableFrom.replace("&", "&amp;");
                    }
                    sb.append("<AVAILABLEFROM>" + availableFrom + "</AVAILABLEFROM>");
                }

                // Newly Added Ajay

                if (resultSet.getString(22) == null || resultSet.getString(22).equals("")) {
                    sb.append("<EXP>NoRecord</EXP>");
                } else {
                    sb.append("<EXP>" + resultSet.getString(22) + "</EXP>");
                }

                if (resultSet.getString(23) == null || resultSet.getString(23).equals("")) {
                    sb.append("<TECHVAL>NoRecord</TECHVAL>");
                } else {
                    sb.append("<TECHVAL>" + resultSet.getString(23) + "</TECHVAL>");
                }

                if (resultSet.getString(24) == null || resultSet.getString(24).equals("")) {
                    sb.append("<AVAILABLE>NoRecord</AVAILABLE>");
                } else {
                    sb.append("<AVAILABLE>" + resultSet.getString(24) + "</AVAILABLE>");
                }

                if (resultSet.getString(25) == null || resultSet.getString(25).equals("")) {
                    sb.append("<PREFSTATE>NoRecord</PREFSTATE>");
                } else {
                    sb.append("<PREFSTATE>" + resultSet.getString(25) + "</PREFSTATE>");
                }


                sb.append("</CONSULTANT>");
                isGetting = true;
                count++;
            }

            if (!isGetting) {
                //sb.append("<CONSULTANTS>" + sb.toString() + "</CONSULTANTS>");
                //} else {
                isGetting = false;
                //nothing to show
                //  response.setStatus(HttpServletResponse.SC_NO_CONTENT);
                sb.append("<CONSULTANT><VALID>false</VALID></CONSULTANT>");
            }
            sb.append("</CONSULTANTS>");
            sb.append("</xml>");
            //  System.err.println("Result----"+sb);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        return sb.toString();
    }

    /**
     *
     * This method is used to get the Consultant Details
     * @param consultantMail
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getConsultDetails(String consultantMail) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        StringBuffer sb = new StringBuffer();
        queryString = "Select FName,LName,MName,Email2,TitleTypeId,Gender,WorkPhoneNo,HomePhoneNo,CellPhoneNo,SkillSet,"
                + "RatePerHour,PracticeId,Comments FROM tblRecConsultant WHERE Email2 LIKE '" + consultantMail + "'";

        //System.out.println("QUERY IS "+queryString);

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.prepareStatement(queryString);
            resultSet = statement.executeQuery();

            while (resultSet.next()) {
                sb.append(resultSet.getString("FName"));
                sb.append('*');
                sb.append(resultSet.getString("LName"));
                sb.append('*');
                sb.append(resultSet.getString("MName"));
                sb.append('*');
                sb.append(resultSet.getString("Email2"));
                sb.append('*');
                sb.append(resultSet.getString("TitleTypeId"));
                sb.append('*');
                sb.append(resultSet.getString("Gender"));
                sb.append('*');
                sb.append(resultSet.getString("WorkPhoneNo"));
                sb.append('*');
                sb.append(resultSet.getString("HomePhoneNo"));
                sb.append('*');
                sb.append(resultSet.getString("CellPhoneNo"));
                sb.append('*');
                sb.append(resultSet.getString("SkillSet"));
                sb.append('*');
                sb.append(resultSet.getString("RatePerHour"));
                sb.append('*');
                sb.append(resultSet.getString("PracticeId"));
                sb.append('*');
                sb.append(resultSet.getString("Comments"));
                sb.append('*');
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        //System.out.println("this is string >> "+sb.toString());
        return sb.toString();
    }

    /**
     *
     * This method is used to get the Consultant Resumes
     * @param consultantId
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getConsultantResume(int consultantId) throws ServiceLocatorException {

        String out = getResumeList(consultantId);
        //System.out.println("resume result in impl class******** "+out);
        return out;
    }

    /**
     *
     * This method is used to get the Resumes List
     * @param consultantId
     * @return String
     */
    private String getResumeList(int consultantId) {
        String resumeList = "";
        CallableStatement callableStatement = null;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spGetResumeList(?,?)}");
            callableStatement.setInt(1, consultantId);
            callableStatement.registerOutParameter(2, Types.VARCHAR);

            callableStatement.executeUpdate();
            resumeList = callableStatement.getString(2);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return resumeList;
    }

    /*public String getRequirementDetails(String query) throws ServiceLocatorException {
    boolean isGetting=false;
    Connection connection = null;
    PreparedStatement preparedStatement = null;
    ResultSet resultSet = null;
    StringBuffer sb = new StringBuffer();
    try{
    connection = ConnectionProvider.getInstance().getConnection();
    preparedStatement = connection.prepareStatement(query);
    resultSet = preparedStatement.executeQuery();
    
    int count=0;
    sb.append("<xml version=\"1.0\">");
    sb.append("<REQUIREMENTS>");
    while(resultSet.next()) {
    sb.append("<REQUIREMENT><VALID>true</VALID>");
    sb.append("<ID>" +String.valueOf(resultSet.getInt(1)) + "</ID>");
    if(resultSet.getString(2) == null || resultSet.getString(2).equals("")) {
    sb.append("<STATE>NoRecords</STATE>");
    }else {
    sb.append("<STATE>"+resultSet.getString(2)+"</STATE>");
    }
    if(resultSet.getString(3) == null || resultSet.getString(3).equals("")) {
    sb.append("<TITLE>NoRecords</TITLE>");
    }else {
    sb.append("<TITLE>"+resultSet.getString(3)+"</TITLE>");
    }
    
    if(resultSet.getString(4) == null || resultSet.getString(4).equals("") ) {
    sb.append("<PRACTICE>NoRecords</PRACTICE>");
    }else {
    sb.append("<PRACTICE>"+resultSet.getString(4)+"</PRACTICE>");
    }
    
    if(resultSet.getString(5) == null || resultSet.getString(5).equals("") ) {
    sb.append("<COMMENTS>NoRecords</COMMENTS>");
    }else {
    String comments = resultSet.getString(5);
    if(comments.contains("&")) {
    comments = comments.replace("&","&amp;");
    }
    sb.append("<COMMENTS>"+comments+"</COMMENTS>");
    }
    if(resultSet.getDate(6) == null || resultSet.getDate(6).equals("")) {
    sb.append("<SDATE>NoRecords</SDATE>");
    }else {
    String sdate = DateUtility.getInstance().convertDateToView(resultSet.getDate(6));
    sb.append("<SDATE>"+sdate+"</SDATE>");
    }
    
    if(resultSet.getDate(7) == null || resultSet.getDate(7).equals("")) {
    sb.append("<EDATE>NoRecords</EDATE>");
    }else {
    String edate = DateUtility.getInstance().convertDateToView(resultSet.getDate(7));
    sb.append("<EDATE>"+edate+"</EDATE>");
    }
    
    if(resultSet.getString(9) == null || resultSet.getString(9).equals("") ) {
    sb.append("<CONTACT>NoRecords</CONTACT>");
    }else {
    sb.append("<CONTACT>"+resultSet.getString(9)+"</CONTACT>");
    }
    
    if(resultSet.getString(10) == null || resultSet.getString(10).equals("") ) {
    sb.append("<ASSIGN>NoRecords</ASSIGN>");
    }else {
    sb.append("<ASSIGN>"+resultSet.getString(10)+"</ASSIGN>");
    }
    
    if(resultSet.getString(11) == null || resultSet.getString(11).equals("") ) {
    sb.append("<RESUME>NoRecords</RESUME>");
    }else {
    sb.append("<RESUME>"+resultSet.getString(11)+"</RESUME>");
    }
    
    if(resultSet.getString(13) == null || resultSet.getString(13).equals("") ) {
    sb.append("<FUNCTIONS>NoRecords</FUNCTIONS>");
    }else {
    String functions = resultSet.getString(13);
    if(functions.contains("&")) {
    functions = functions.replace("&","&amp;");
    }
    sb.append("<FUNCTIONS>"+functions+"</FUNCTIONS>");
    }
    
    if(resultSet.getString(14) == null || resultSet.getString(14).equals("") ) {
    sb.append("<RESPONSIBILITY>NoRecords</RESPONSIBILITY>");
    }else {
    String resp = resultSet.getString(14);
    if(resp.contains("&")) {
    resp = resp.replace("&","&amp;");
    }
    sb.append("<RESPONSIBILITY>"+resp+"</RESPONSIBILITY>");
    }
    
    if(resultSet.getString(15) == null || resultSet.getString(15).equals("") ) {
    sb.append("<EDUCATION>NoRecords</EDUCATION>");
    }else {
    String educ = resultSet.getString(15);
    if(educ.contains("&")) {
    educ = educ.replace("&","&amp;");
    }
    sb.append("<EDUCATION>"+educ+"</EDUCATION>");
    }
    
    if(resultSet.getString(16) == null || resultSet.getString(16).equals("")) {
    sb.append("<EXPERIENCE>NoRecords</EXPERIENCE>");
    }else {
    sb.append("<EXPERIENCE>"+resultSet.getString(16)+"</EXPERIENCE>");
    }
    
    if(resultSet.getString(17) == null || resultSet.getString(17).equals("")) {
    sb.append("<TAXTERM>NoRecords</TAXTERM>");
    }else {
    sb.append("<TAXTERM>"+resultSet.getString(17)+"</TAXTERM>");
    }
    
    if(resultSet.getString(18) == null || resultSet.getString(18).equals("")) {
    sb.append("<RATE>NoRecords</RATE>");
    }else {
    sb.append("<RATE>"+resultSet.getString(18)+"</RATE>");
    }
    
    if(resultSet.getString(19) == null || resultSet.getString(19).equals("")) {
    sb.append("<SALARY>NoRecords</SALARY>");
    }else {
    sb.append("<SALARY>"+resultSet.getString(19)+"</SALARY>");
    }
    
    if(resultSet.getString(20) == null || resultSet.getString(20).equals("")) {
    sb.append("<STATUS>NoRecords</STATUS>");
    }else {
    sb.append("<STATUS>"+resultSet.getString(20)+"</STATUS>");
    }
    
    if(resultSet.getString(21) == null || resultSet.getString(21).equals("")) {
    sb.append("<SKILLS>NoRecords</SKILLS>");
    }else {
    String skills = resultSet.getString(21);
    if(skills.contains("&")) {
    skills = skills.replace("&","&amp;");
    }
    sb.append("<SKILLS>"+skills+"</SKILLS>");
    }
    
    if(resultSet.getString(22) == null || resultSet.getString(22).equals("")) {
    sb.append("<CITY>NoRecords</CITY>");
    }else {
    sb.append("<CITY>"+resultSet.getString(22)+"</CITY>");
    }
    
    sb.append("</REQUIREMENT>");
    isGetting = true;
    count++;
    }
    
    if (!isGetting) {
    //sb.append("<CONSULTANTS>" + sb.toString() + "</CONSULTANTS>");
    //} else {
    isGetting = false;
    //nothing to show
    //  response.setStatus(HttpServletResponse.SC_NO_CONTENT);
    sb.append("<REQUIREMENT><VALID>false</VALID></REQUIREMENT>");
    }
    sb.append("</REQUIREMENTS>");
    sb.append("</xml>");
    //System.err.println(sb.toString());
    }catch(SQLException sqle){
    throw new ServiceLocatorException(sqle);
    }finally{
    try{
    if(resultSet!=null){
    
    resultSet.close();
    resultSet =null;
    }
    if(preparedStatement!=null){
    preparedStatement.close();
    preparedStatement = null;
    }
    
    if(connection!=null){
    connection.close();
    connection = null;
    }
    }catch(SQLException sql){
    sql.printStackTrace();
    }
    
    }
    return sb.toString();
    }*/
    /**
     *
     * This method is used to get the Consultant List
     * @param query
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
   public String getConsultantList(String query) throws ServiceLocatorException {
        boolean isGetting = false;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        StringBuffer sb = new StringBuffer();
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();

            int count = 0;
            sb.append("<xml version=\"1.0\">");
            sb.append("<CONSULTANTS>");
            while (resultSet.next()) {
                sb.append("<CONSULTANT><VALID>true</VALID>");
                sb.append("<ID>" + resultSet.getInt(1) + "</ID>");
                sb.append("<NAME>" + resultSet.getString(2) + "</NAME>");
                sb.append("<EMAIL>" + resultSet.getString(3) + "</EMAIL>");
                if (!"".equals(resultSet.getString(4)) && resultSet.getString(4) != null) {
                    sb.append("<CELLPHONE>" + resultSet.getString(4) + "</CELLPHONE>");
                } else {
                    sb.append("<CELLPHONE>empty</CELLPHONE>");
                }
                if (resultSet.getString(5) != null) {
                    sb.append("<AVAILABLEFORM>" + DateUtility.getInstance().convertToviewFormat(resultSet.getString(5)) + "</AVAILABLEFORM>");
                } else {
                    sb.append("<AVAILABLEFORM>empty</AVAILABLEFORM>");
                }
                // System.out.println("target rate--->"+resultSet.getString(6)+"-------");
                sb.append("<ISREJECT>" + resultSet.getInt(6) + "</ISREJECT>");
                if (resultSet.getString(7) != null && !"".equals(resultSet.getString(7))) {
                    sb.append("<TARGETRATE>" + resultSet.getString(7) + "</TARGETRATE>");
                } else {
                    sb.append("<TARGETRATE>empty</TARGETRATE>");
                }
                if (!"1".equals(resultSet.getString(8)) && resultSet.getString(8) != null) {
                    sb.append("<WORKAUTHORIZATION>" + resultSet.getString(8) + "</WORKAUTHORIZATION>");
                } else {
                    sb.append("<WORKAUTHORIZATION>empty</WORKAUTHORIZATION>");
                }
                sb.append("</CONSULTANT>");
                isGetting = true;
                count++;
            }
            if (!isGetting) {
                //sb.append("<CONSULTANTS>" + sb.toString() + "</CONSULTANTS>");
                //} else {
                isGetting = false;
                //nothing to show
                //  response.setStatus(HttpServletResponse.SC_NO_CONTENT);
                sb.append("<CONSULTANT><VALID>false</VALID></CONSULTANT>");
            }
            sb.append("</CONSULTANTS>");
            sb.append("</xml>");
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        //System.out.println(sb.toString());
        return sb.toString();
    }

    /**
     *
     * This method is used to get the Resume Id
     * @param query
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getResumeId(String query) throws ServiceLocatorException {
        boolean isGetting = false;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        StringBuffer sb = new StringBuffer();
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();

            int count = 0;
            sb.append("<xml version=\"1.0\">");
            sb.append("<RESUMES>");
            while (resultSet.next()) {
                sb.append("<RESUME><VALID>true</VALID>");
                if (resultSet.getInt(1) != 0) {
                    sb.append("<OBJID>" + resultSet.getInt(1) + "</OBJID>");
                } else {
                    sb.append("<OBJID>NoRecord</OBJID>");
                }

                if (resultSet.getString(2) == null || resultSet.getString(2).equals("")) {
                    sb.append("<RESUMENAME>NoRecord</RESUMENAME>");
                }
                sb.append("<RESUMENAME>" + resultSet.getString(2) + "</RESUMENAME>");
                sb.append("</RESUME>");
                isGetting = true;
                count++;
            }
            if (!isGetting) {
                isGetting = false;
                sb.append("<RESUME><VALID>false</VALID></RESUME>");
            }
            sb.append("</RESUMES>");
            sb.append("</xml>");
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        return sb.toString();
    }



    /*
     *  Calendar in CRM Module
     *
     *
     */
    /**
     *
     * This method is used to get the Weekly Events
     * @param queryString
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getWeeklyEvents(String queryString) throws ServiceLocatorException {

        StringBuffer sb = new StringBuffer();
        String eventType = null;
        String description = null;
        boolean hasRecords = false;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            sb.append("<xml version=\"1.0\">");
            sb.append("<WEEKLYEVENTS>");
            while (resultSet.next()) {
                sb.append("<EVENTS><VALID>true</VALID>");
                eventType = resultSet.getString("EventType");
                description = resultSet.getString("Description");
                if (eventType.contains("&")) {
                    eventType = eventType.replace("&", "&amp;");
                }
                sb.append("<EVENTID>" + resultSet.getString("Id") + "</EVENTID>");
                sb.append("<EVENTTYPE>" + eventType + "</EVENTTYPE>");
                if (description != null && !description.equals("")) {
                    sb.append("<DESCRIPTION>" + description + "</DESCRIPTION>");
                } else {
                    sb.append("<DESCRIPTION>" + noRecords + "</DESCRIPTION>");
                }
                sb.append("<CREATEDBYID>" + resultSet.getString("CreatedById") + "</CREATEDBYID>");
                sb.append("<EVENTCREATEDDATE>" + resultSet.getString("EventCreatedDate") + "</EVENTCREATEDDATE>");
                if (resultSet.getString("EventEndDate") != null && !resultSet.getString("EventEndDate").equals("") && !resultSet.getString("EventEndDate").equals(" ")) {
                    sb.append("<EVENTENDDATE>" + resultSet.getString("EventEndDate") + "</EVENTENDDATE>");
                } else {
                    sb.append("<EVENTENDDATE>" + "no records" + "</EVENTENDDATE>");
                }
                sb.append("<MODIFIEDBYID>" + resultSet.getString("ModifiedById") + "</MODIFIEDBYID>");
                sb.append("</EVENTS>");
                hasRecords = true;
            }
            if (!hasRecords) {
                sb.append("<EVENTS><VALID>false</VALID></EVENTS>");
            }
            sb.append("</WEEKLYEVENTS>");
            sb.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                throw new ServiceLocatorException(sqle);
            }
        }
        return sb.toString();
    }

    /**
     *
     * This method is used to get the Weekdates
     * @param cal
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getWeekDates(Calendar cal) throws ServiceLocatorException {
        List daysList = new ArrayList();
        StringBuffer sb = new StringBuffer();
        /* Used for Storing the Week Start Date */
        String wstDate = null;

        /* Used for Storing the Week End Date */
        String wenDate = null;

        /* used for the current date */
        String curntDate = null;

        /* for stroring the weekdays */
        String[] weekDays = new String[8];

        /* to get the day of week */
        int w = cal.get(Calendar.DAY_OF_WEEK);

        /* if its sunday then the index is 0 other then sunday then minus the index */
        if (w == 1) {
            cal.add(Calendar.DATE, 0);

        } else if (w == 2) {
            cal.add(Calendar.DATE, -1);

        } else if (w == 3) {
            cal.add(Calendar.DATE, -2);

        } else if (w == 4) {
            cal.add(Calendar.DATE, -3);

        } else if (w == 5) {
            cal.add(Calendar.DATE, -4);

        } else if (w == 6) {
            cal.add(Calendar.DATE, -5);

        } else if (w == 7) {
            cal.add(Calendar.DATE, -6);

        }

        /* for generating the month/day sequence of the week */
        int zeroForMon = 0; // if month is single digit then Zero is append to left of that digit
        int zeroForDay = 0; // if day is single digit then Zero is append to left of that digit
        sb.append("<xml version=\"1.0\">");
        sb.append("<WEEKDATES>");
        for (int index = 0; index < 8; index++) {

            /* for the purpose of concatinating 0 before the day and month */
            zeroForMon = (cal.get(Calendar.MONTH) + 1);
            zeroForDay = cal.get(Calendar.DAY_OF_MONTH);

            if (zeroForMon < 10 && zeroForDay < 10) {
                weekDays[index] = "0" + (cal.get(Calendar.MONTH) + 1) + "/0" + cal.get(Calendar.DAY_OF_MONTH) + "/" + (cal.get(Calendar.YEAR));
                sb.append("<DAY>" + weekDays[index] + "</DAY>");
            } else if (zeroForMon > 9 && zeroForDay < 10) {
                weekDays[index] = (cal.get(Calendar.MONTH) + 1) + "/0" + cal.get(Calendar.DAY_OF_MONTH) + "/" + (cal.get(Calendar.YEAR));
                sb.append("<DAY>" + weekDays[index] + "</DAY>");
            } else if (zeroForMon < 10 && zeroForDay > 9) {
                weekDays[index] = "0" + (cal.get(Calendar.MONTH) + 1) + "/" + cal.get(Calendar.DAY_OF_MONTH) + "/" + (cal.get(Calendar.YEAR));
                sb.append("<DAY>" + weekDays[index] + "</DAY>");

            } else {
                weekDays[index] = (cal.get(Calendar.MONTH) + 1) + "/" + cal.get(Calendar.DAY_OF_MONTH) + "/" + (cal.get(Calendar.YEAR));
                sb.append("<DAY>" + weekDays[index] + "</DAY>");
            }
            cal.add(Calendar.DAY_OF_MONTH, 1);
        }// End for loop
        sb.append("</WEEKDATES>");
        sb.append("</xml>");
        /*wstDate =weekDays[0];  // storing the week startday
        wenDate =  weekDays[6]; // storing the week endday
        
        current date
        Calendar currDay = Calendar.getInstance();
        curntDate = (currDay.get(Calendar.MONTH)+1) + "/" + currDay.get(Calendar.DAY_OF_MONTH)+"/"+currDay.get(Calendar.YEAR) ;
        daysList.add(wstDate);
        daysList.add(wenDate);
        daysList.add(curntDate);
        daysList.add(weekDays);*/

        return sb.toString();
    }

    /*public String getDaillyEvents(String queryString) throws ServiceLocatorException {
    StringBuffer sb = new StringBuffer();
    String eventType = null;
    String description = null;
    boolean hasRecords =  false;
    try{
    connection = ConnectionProvider.getInstance().getConnection();
    preparedStatement = connection.prepareStatement(queryString);
    resultSet = preparedStatement.executeQuery();
    sb.append("<xml version=\"1.0\">");
    sb.append("<DAILYEVENTS>");
    while(resultSet.next()) {
    sb.append("<EVENTS><VALID>true</VALID>");
    eventType = resultSet.getString("EventType");
    description = resultSet.getString("Description");
    if(eventType.contains("&")) {
    eventType = eventType.replace("&","&amp;");
    }
    sb.append("<EVENTID>"+resultSet.getString("Id")+"</EVENTID>");
    sb.append("<EVENTTYPE>"+eventType+"</EVENTTYPE>");
    if(description !=null && !description.equals("") )
    sb.append("<DESCRIPTION>"+description+"</DESCRIPTION>");
    else
    sb.append("<DESCRIPTION>"+noRecords+"</DESCRIPTION>");
    sb.append("<CREATEDBYID>"+resultSet.getString("CreatedById")+"</CREATEDBYID>");
    sb.append("<EVENTCREATEDDATE>"+resultSet.getString("EventCreatedDate")+"</EVENTCREATEDDATE>");
    if(resultSet.getString("EventEndDate")!= null && !resultSet.getString("EventEndDate").equals("") && !resultSet.getString("EventEndDate").equals(" "))
    sb.append("<EVENTENDDATE>"+resultSet.getString("EventEndDate")+"</EVENTENDDATE>");
    else sb.append("<EVENTENDDATE>"+"no records"+"</EVENTENDDATE>");
    sb.append("<MODIFIEDBYID>"+resultSet.getString("ModifiedById")+"</MODIFIEDBYID>");
    sb.append("</EVENTS>");
    hasRecords = true;
    }
    if(!hasRecords) {
    sb.append("<EVENTS><VALID>false</VALID></EVENTS>");
    }
    
    sb.append("</DAILYEVENTS>");
    sb.append("</xml>");
    }catch(SQLException sqle) {
    throw new ServiceLocatorException(sqle);
    }finally{
    try {
    if(resultSet!=null){
    resultSet.close();
    resultSet =null;
    }
    if(preparedStatement!=null){
    preparedStatement.close();
    preparedStatement = null;
    }
    
    if(connection!=null){
    connection.close();
    connection = null;
    }
    }catch(SQLException sqle) {
    throw new ServiceLocatorException(sqle);
    }
    }
    return sb.toString();
    }*/
    /**
     *
     * This method is used to get the Daily Events
     * @param queryString
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getDaillyEvents(String queryString) throws ServiceLocatorException {
        StringBuffer sb = new StringBuffer();
        String eventType = null;
        String description = null;
        boolean hasRecords = false;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            sb.append("<xml version=\"1.0\">");
            sb.append("<DAILYEVENTS>");
            while (resultSet.next()) {
                sb.append("<EVENTS><VALID>true</VALID>");
                eventType = resultSet.getString("EventType");
                description = resultSet.getString("Description");
                if (eventType.contains("&")) {
                    eventType = eventType.replace("&", "&amp;");
                }
                sb.append("<EVENTID>" + resultSet.getString("Id") + "</EVENTID>");
                sb.append("<EVENTTYPE>" + eventType + "</EVENTTYPE>");
                if (description != null && !description.equals("")) {
                    sb.append("<DESCRIPTION>" + description + "</DESCRIPTION>");
                } else {
                    sb.append("<DESCRIPTION>" + noRecords + "</DESCRIPTION>");
                }
                sb.append("<CREATEDBYID>" + resultSet.getString("CreatedById") + "</CREATEDBYID>");
                sb.append("<EVENTCREATEDDATE>" + DateUtility.getInstance().sqlTimeStampTousTimeStamp(resultSet.getString("EventCreatedDate")) + "</EVENTCREATEDDATE>");
                if (resultSet.getString("EventEndDate") != null && !resultSet.getString("EventEndDate").equals("") && !resultSet.getString("EventEndDate").equals(" ")) {
                    sb.append("<EVENTENDDATE>" + DateUtility.getInstance().sqlTimeStampTousTimeStamp(resultSet.getString("EventEndDate")) + "</EVENTENDDATE>");
                } else {
                    sb.append("<EVENTENDDATE>" + "no records" + "</EVENTENDDATE>");
                }
                sb.append("<MODIFIEDBYID>" + resultSet.getString("ModifiedById") + "</MODIFIEDBYID>");
                sb.append("</EVENTS>");
                hasRecords = true;
            }
            if (!hasRecords) {
                sb.append("<EVENTS><VALID>false</VALID></EVENTS>");
            }

            sb.append("</DAILYEVENTS>");
            sb.append("</xml>");
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                throw new ServiceLocatorException(sqle);
            }
        }
        return sb.toString();
    }

    /**
     *
     * This method is used to populate the Events
     * @param eventDate
     * @param empId
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String popupEvent(String eventDate, int empId) throws ServiceLocatorException {
        StringBuffer stringBuffer = new StringBuffer();
        queryString = "select * from tblCrmCalendar where EventCreatedDate LIKE '" + eventDate + "%' AND EmpId='" + empId + "' ORDER BY EventCreatedDate";
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            stringBuffer.append("<xml version=\"1.0\">");
            stringBuffer.append("<YEAR>");
            while (resultSet.next()) {
                stringBuffer.append("<EVENT>" + resultSet.getString("Description") + "</EVENT>");
                stringBuffer.append("<DATE>" + resultSet.getDate("EventCreatedDate") + "</DATE>");
                if (resultSet.getString("EventType") != null && !resultSet.getString("EventType").equals("")) {
                    stringBuffer.append("<EVENTTYPE>" + resultSet.getString("EventType") + "</EVENTTYPE>");
                } else {
                    stringBuffer.append("<EVENTTYPE>" + "noRecords" + "</EVENTTYPE>");
                }
            }
            stringBuffer.append("</YEAR>");
            stringBuffer.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return stringBuffer.toString();
    }

    /*  Add Event And Populate Team Memebers Done By Venki
     *
     *
     */
    /**
     *
     * This method is used to get the Account Team Id
     * @param accTeamId
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getAccountTeamId(int accTeamId) throws ServiceLocatorException {
        StringBuffer sb = new StringBuffer();
        queryString = "select concat(FName,'.',LName) as TeamMemberId,Id  from tblEmployee,tblCrmAccountTeam where tblEmployee.LoginId=tblCrmAccountTeam.TeamMemberId and AccountId=" + accTeamId;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            sb.append("<xml version=\"1.0\">");
            sb.append("<MEMBER-IDS>");
            while (resultSet.next()) {
                sb.append("<MEMBERS>");
                sb.append("<MEMBER-KEY>" + resultSet.getString("Id") + "</MEMBER-KEY>");
                sb.append("<MEMBER-ID>" + resultSet.getString("TeamMemberId") + "</MEMBER-ID>");
                sb.append("</MEMBERS>");
            }
            sb.append("</MEMBER-IDS>");
            sb.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        return sb.toString();
    }

    /**
     *
     * This method is used to Add The Event
     * @param empId
     * @param CalEventDate
     * @param eventType
     * @param EventDesc
     * @param accTeam
     * @param userId
     * @param EveAccId
     * @param contactsId
     * @param calEveId
     * @param eventDate1
     * @return int
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public int addEvent(int empId, String CalEventDate, String eventType, String EventDesc, String accTeam, String userId, String EveAccId, String contactsId, int calEveId, String eventDate1) throws ServiceLocatorException {
        Connection connection = null;
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        int updatedRows = 0;




        String operationalType = "";
        if (calEveId == 0) {
            operationalType = "Ins";
        } else {
            operationalType = "Upd";
        }
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spCalendar(?,?,?,?,?,?,?,?,?,?,?,?,?,?,? )}");
            callableStatement.setInt(1, empId);
            if (eventType.equals("-please select-")) {
                callableStatement.setString(2, null);
            } else {
                callableStatement.setString(2, eventType);
            }

            callableStatement.setString(3, EventDesc);
            callableStatement.setString(4, userId);
            callableStatement.setString(5, userId);
            callableStatement.setTimestamp(6, DateUtility.getInstance().strToTimeStampObj(CalEventDate));
//           if(eventDate1!="" || eventDate1!=null)
            callableStatement.setTimestamp(7, DateUtility.getInstance().strToTimeStampObj(eventDate1));
//         else
//               callableStatement.setTimestamp(7,(TimeStamp)"0000-00-00 00:00:00");
            callableStatement.setTimestamp(8, DateUtility.getInstance().strToTimeStampObj(CalEventDate));
            /*if(dayStatus.equals("-please select-"))
            callableStatement.setString(9,null);
            else
            callableStatement.setString(9,dayStatus);*/
            if (EveAccId.trim() != null && EveAccId.trim() != "") {
                callableStatement.setInt(9, Integer.parseInt(EveAccId.trim()));
            } else {
                callableStatement.setInt(9, 0);
            }
            if (contactsId != null && contactsId != "") {
                callableStatement.setInt(10, Integer.parseInt(contactsId.trim()));
            } else {
                callableStatement.setInt(10, 0);
            }

//            if(eventAssigenedIds==0)
//                callableStatement.setInt(11,eventIds+1);
//            else
//                callableStatement.setInt(11,eventAssigenedIds);
            if (operationalType == "Ins") {
                callableStatement.setString(11, "Ins");
                callableStatement.setInt(12, 0);
                callableStatement.setString(13, accTeam);
                callableStatement.setString(14, "|");

                callableStatement.registerOutParameter(15, Types.INTEGER);
                updatedRows = callableStatement.executeUpdate();


            }
            if (operationalType == "Upd") {
                callableStatement.setString(11, "Upd");
                callableStatement.setInt(12, calEveId);
                callableStatement.setString(13, accTeam);
                callableStatement.setString(14, "|");

                callableStatement.registerOutParameter(15, Types.INTEGER);
                updatedRows = callableStatement.executeUpdate();
                updatedRows = updatedRows + 1; //this is for checking insertion or updation
            }


        } catch (SQLException se) {
            throw new ServiceLocatorException(se);
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException se) {
                throw new ServiceLocatorException(se);
            }
        }

        return updatedRows;
    }

    /**
     *
     * This method is used to get the Event Details
     * @param eventId
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getEventDetails(int eventId) throws ServiceLocatorException {
        StringBuffer sb = new StringBuffer();
        String empNamesList = "";
        String accId = null;
        String contactId = null;
        queryString = "select * from tblCrmCalendar where Id=" + eventId;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            sb.append("<xml version=\"1.0\">");
            sb.append("<EVENT-DETAILS>");
            while (resultSet.next()) {
                sb.append("<EVENT-ID>" + resultSet.getInt("Id") + "</EVENT-ID>");
                sb.append("<EVENT-TYPE>" + resultSet.getString("EventType") + "</EVENT-TYPE>");
                sb.append("<EVENT-DATE>" + DateUtility.getInstance().sqlTimeStampTousTimeStamp(resultSet.getString("EventCreatedDate")) + "</EVENT-DATE>");
                if (resultSet.getString("EventEndDate") != null && !resultSet.getString("EventEndDate").equals("") && !resultSet.getString("EventEndDate").equals(" ")) {
                    sb.append("<EVENT-END-DATE>" + DateUtility.getInstance().sqlTimeStampTousTimeStamp(resultSet.getString("EventEndDate")) + "</EVENT-END-DATE>");
                } else {
                    sb.append("<EVENT-END-DATE>" + "no records" + "</EVENT-END-DATE>");
                }
                accId = DataSourceDataProvider.getInstance().getAccountName(Integer.parseInt(resultSet.getString("AccountId")));
                contactId = DataSourceDataProvider.getInstance().getContactName(Integer.parseInt(resultSet.getString("ContactId")));
                if (accId != null && !accId.equals("")) {
                    sb.append("<EVENT-ACCNAME>" + accId + "</EVENT-ACCNAME>");
                } else {
                    sb.append("<EVENT-ACCNAME>" + "no records" + "</EVENT-ACCNAME>");
                }
                if (contactId != null && !contactId.equals("")) {
                    sb.append("<EVENT-CONNAME>" + contactId + "</EVENT-CONNAME>");
                } else {
                    sb.append("<EVENT-CONNAME>" + "no records" + "</EVENT-CONNAME>");
                }
                //System.err.println("event assigned"+resultSet.getString("EventAssignedTo"));
                if (resultSet.getString("EventAssignedTo") != null && !resultSet.getString("EventAssignedTo").equals("|") && !resultSet.getString("EventAssignedTo").equals("") && !resultSet.getString("EventAssignedTo").equals(" ")) {
                    String temp = resultSet.getString("EventAssignedTo");
                    String temp1[] = temp.trim().split("\\|");
                    for (int i = 0; i < temp1.length; i++) {
                        empNamesList += temp1[i] + "^ " + DataSourceDataProvider.getInstance().getFname_Lname1(Integer.parseInt(temp1[i])) + "|";
                    }
                    sb.append("<EVENT-ASSIGNED>" + empNamesList + "</EVENT-ASSIGNED>");
                } else {
                    sb.append("<EVENT-ASSIGNED>" + "no records" + "</EVENT-ASSIGNED>");
                }
                if (resultSet.getString("Description") != null && !resultSet.getString("Description").equals("") && !resultSet.getString("Description").equals(" ")) {
                    sb.append("<EVENT-DESC>" + resultSet.getString("Description") + "</EVENT-DESC>");
                } else {
                    sb.append("<EVENT-DESC>" + "no records" + "</EVENT-DESC>");
                }
                sb.append("<EVENT-ASSIGEND-IDS>" + resultSet.getString("EventAssignedIds") + "</EVENT-ASSIGEND-IDS>");
                sb.append("<EVENTCREATEDBY>" + resultSet.getString("CreatedById") + "</EVENTCREATEDBY>");
            }
            sb.append("</EVENT-DETAILS>");
            sb.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return sb.toString();

    }

    /**
     *
     * This method is used to get the Clendar Users List
     * @param empId
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getCalendarUsersList(String empId) throws ServiceLocatorException {
        StringBuffer stringBuffer = new StringBuffer();
        queryString = "select `tblCrmCalAccessList`.`Id` As `Id`,`tblCrmCalAccessList`.`OtherEmpId` as OtherEmpId,"
                + "`tblCrmCalAccessList`.`AccessType` as AccessType,concat(`tblEmployee`.`FName`,' ',`tblEmployee`.`MName`,'.',`tblEmployee`.`LName` ) AS `UserName`"
                + " from(`tblEmployee` join `tblCrmCalAccessList` on(`tblEmployee`.`Id` = `tblCrmCalAccessList`.`OtherEmpId`)) where `tblCrmCalAccessList`.`EmpId` = " + empId;
        //System.err.println("Query String---"+queryString);
        boolean hasRecords = false;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            stringBuffer.append("<xml version=\"1.0\">");
            stringBuffer.append("<CAL-ACCESSLIST>");
            while (resultSet.next()) {
                stringBuffer.append("<ACCESSLIST><VALID>true</VALID>");
                stringBuffer.append("<CAL-ACCESSLISTID>" + resultSet.getString("Id") + "</CAL-ACCESSLISTID>");
                stringBuffer.append("<CAL-ACCESSLIST-OTHERID>" + resultSet.getString("OtherEmpId") + "</CAL-ACCESSLIST-OTHERID>");
                stringBuffer.append("<CAL-ACCESSLIST-ACCESSTYPE>" + resultSet.getString("AccessType") + "</CAL-ACCESSLIST-ACCESSTYPE>");
                stringBuffer.append("<CAL-ACCESSLIST-USERNAME>" + resultSet.getString("UserName") + "</CAL-ACCESSLIST-USERNAME>");
                stringBuffer.append("</ACCESSLIST>");
                hasRecords = true;
            }
            if (!hasRecords) {
                stringBuffer.append("<ACCESSLIST><VALID>false</VALID></ACCESSLIST>");
            }
            stringBuffer.append("</CAL-ACCESSLIST>");
            stringBuffer.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        return stringBuffer.toString();
    }

    /**
     *
     * This method is used to get the users List
     * @param userName
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getUserPopupList(String userName) throws ServiceLocatorException {
        StringBuffer stringBuffer = new StringBuffer();
        queryString = "select Id,concat(Fname,' ',MName,'.',LName) as Name from tblEmployee where LName like '" + userName + "%' or FName like '" + userName + "%' and CurStatus= 'Active'";
        boolean hasRecords = false;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            stringBuffer.append("<xml version=\"1.0\">");
            stringBuffer.append("<ACCESS-USERLIST>");
            while (resultSet.next()) {
                stringBuffer.append("<USERLIST><VALID>true</VALID>");
                stringBuffer.append("<USERID>" + resultSet.getString("Id") + "</USERID>");
                stringBuffer.append("<USERNAME>" + resultSet.getString("Name") + "</USERNAME>");
                stringBuffer.append("</USERLIST>");
                hasRecords = true;
            }
            if (!hasRecords) {
                stringBuffer.append("<USERLIST><VALID>false</VALID></USERLIST>");
            }
            stringBuffer.append("</ACCESS-USERLIST>");
            stringBuffer.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return stringBuffer.toString();
    }

    /**
     *
     * This method is used to save the Access to the calendar
     * @param empId
     * @param accessUserId
     * @param saveType
     * @param accessType
     * @param loginId
     * @param accessId
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String saveCalAccessUser(String empId, String accessUserId, String saveType, String accessType, String loginId, String accessId) throws ServiceLocatorException {
        StringBuffer stringBuffer = new StringBuffer();
        int rows = 10;
        int lastId = 0;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            //System.err.println("Save Type ---"+saveType);
            //System.err.println("accessId---"+accessId);
            if (saveType.equals("add")) {
                queryString = "insert into tblCrmCalAccessList(EmpId,OtherEmpId,AccessType,CreatedBy,CreatedDate) values(?,?,?,?,?)";
            } else if (saveType.equals("upd")) {
                queryString = "update tblCrmCalAccessList set OtherEmpId=?,AccessType=?,ModifiedBy=?,ModifiedDate=? where Id=?";
            }
            preparedStatement = connection.prepareStatement(queryString);
            if (saveType.equals("add")) {
                preparedStatement.setString(1, empId);
                preparedStatement.setString(2, accessUserId);
                preparedStatement.setString(3, accessType);
                preparedStatement.setString(4, loginId);
                preparedStatement.setTimestamp(5, DateUtility.getInstance().getCurrentMySqlDateTime());
                rows = preparedStatement.executeUpdate();
                resultSet = preparedStatement.executeQuery("SELECT LAST_INSERT_ID() as accessId");
                resultSet.next();
                lastId = resultSet.getInt("accessId");
            } else if (saveType.equals("upd")) {
                preparedStatement.setString(1, accessUserId);
                preparedStatement.setString(2, accessType);
                preparedStatement.setString(3, loginId);
                preparedStatement.setTimestamp(4, DateUtility.getInstance().getCurrentMySqlDateTime());
                preparedStatement.setString(5, accessId);
                rows = preparedStatement.executeUpdate();
            }
            stringBuffer.append("<xml version=\"1.0\">");
            stringBuffer.append("<ACCESS-USERLIST-UPDATE>");
            if (rows == 1) {
                stringBuffer.append("<UPDATE>Successfully Saved The User Details</UPDATE>");
            } else if (rows == 0) {
                stringBuffer.append("<UPDATE>Sorry..Please Try Again..</UPDATE>");
            }
            stringBuffer.append("<UPDATE-ID>" + lastId + "</UPDATE-ID>");
            //System.err.println("Last Id------"+lastId);
            stringBuffer.append("</ACCESS-USERLIST-UPDATE>");
            stringBuffer.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return stringBuffer.toString();
    }

    /**
     *
     * This method is used to delete the Access to the Calendar
     * @param accessId
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String deleteCalAccessUser(String accessId) throws ServiceLocatorException {
        StringBuffer stringBuffer = new StringBuffer();
        int rows = 10;
        queryString = "delete from tblCrmCalAccessList where Id = " + accessId;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            rows = preparedStatement.executeUpdate();
            stringBuffer.append("<xml version=\"1.0\">");
            stringBuffer.append("<ACCESS-USERLIST-DELETE>");
            if (rows == 1) {
                stringBuffer.append("<DELETE>Successfully Deleted the User From Access List</DELETE>");
            } else if (rows == 0) {
                stringBuffer.append("<DELETE>Sorry..Please Try Again..</DELETE>");
            }
            stringBuffer.append("</ACCESS-USERLIST-DELETE>");
            stringBuffer.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {


                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return stringBuffer.toString();
    }

    /**
     *
     * This method is used to get the Access of Calendar
     * @param empId
     * @param calUserId
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getAccessCalendar(String empId, String calUserId) throws ServiceLocatorException {
        StringBuffer sb = new StringBuffer();
        //queryString="select EmpId,AccessType from tblCrmCalAccessList where otherEmpId="+Integer.parseInt(empId);
        queryString = "select AccessType from tblCrmCalAccessList where otherEmpId='" + empId + "' and EmpId='" + calUserId + "'";
        //System.err.println("queryString--"+queryString);
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            sb.append("<xml version=\"1.0\">");
            sb.append("<MEMBER-IDS>");
            while (resultSet.next()) {
                sb.append("<MEMBERS>");
                //sb.append("<MEMBER-NAME>"+DataSourceDataProvider.getInstance().getFname_Lname1(Integer.parseInt(resultSet.getString("EmpId")))+"</MEMBER-NAME>");
                // sb.append("<MEMBER-ID>"+resultSet.getString("EmpId")+"</MEMBER-ID>");
                sb.append("<MEMBER-ACCESS>" + resultSet.getString("AccessType") + "</MEMBER-ACCESS>");

                sb.append("</MEMBERS>");
            }
            sb.append("</MEMBER-IDS>");
            sb.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        //System.err.println("sb--"+sb.toString());
        return sb.toString();

    }

    /**
     *
     * This method is used to populate The Comments
     * @param id
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String popupComment(int id) throws ServiceLocatorException {
        String comments = null;

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement("SELECT Comments FROM tblRec WHERE Id=" + id);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                comments = resultSet.getString("Comments");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return comments;
    }

    /**
     *
     * This method is used to get the Team Names
     * @param teamName
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getEmpTeamNames(String teamName) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        //System.out.println("TeamName........"+teamName);
        queryString = "select concat(tblEmployee.FName,'',tblEmployee.MName,'.',tblEmployee.LName) as Name,Id from tblEmployee where DepartmentId ='" + deptId + "' and  PracticeId='" + practiceId + "'"; //and SubPractice='"+subPractice+"' and TeamId="+ "'" + teamName + "'";
        //System.out.println("queryString......"+queryString);
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            //stringBuffer.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
            stringBuffer.append("<xml version=\"1.0\">");
            stringBuffer.append("<TEAM Description=\"" + teamName + "\">");
            stringBuffer.append("<TEAMMEMBER>");
            stringBuffer.append("<TEAMMEMBER-ID>All</TEAMMEMBER-ID>");
            stringBuffer.append("<TEAMMEMBER-NAME>All</TEAMMEMBER-NAME>");
            stringBuffer.append("</TEAMMEMBER>");
            while (resultSet.next()) {
                stringBuffer.append("<TEAMMEMBER>");
                stringBuffer.append("<TEAMMEMBER-ID>" + resultSet.getString("Id") + "</TEAMMEMBER-ID>");
                stringBuffer.append("<TEAMMEMBER-NAME>" + resultSet.getString("Name") + "</TEAMMEMBER-NAME>");
                stringBuffer.append("</TEAMMEMBER>");
            }
            stringBuffer.append("</TEAM>");
            stringBuffer.append("</xml>");


        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return stringBuffer.toString();
    }

    /**
     *
     * This method is used to add the Status
     * @param empId
     * @param status
     * @param date
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public int addStatus(int empId, String status, Date date) throws ServiceLocatorException {
        Date dbDate = null;
        Connection connection = null;
        Statement statement = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        int updatedRows = 0;
        int isFirst = 0;
        try {
            queryString = "select CalDate from tblCrmCalStatus where EmpId = " + empId;
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            while (resultSet.next()) {
                dbDate = resultSet.getDate("CalDate");
                isFirst++;
                if (dbDate.toString().equals(date.toString())) {
                    break;
                }
            }
            resultSet.close();
            statement.close();
            connection.close();
            if (status.equals("Remove Status") && !dbDate.toString().equals(date.toString())) {
                updatedRows = updatedRows + 5;
            } else if (isFirst == 0) {
                connection = ConnectionProvider.getInstance().getConnection();
                queryString = "insert into tblCrmCalStatus (CalDate,Status,EmpId) values (?,?,?)";
                preparedStatement = connection.prepareStatement(queryString);
                preparedStatement.setDate(1, date);
                preparedStatement.setString(2, status);
                preparedStatement.setInt(3, empId);
                updatedRows = preparedStatement.executeUpdate();
            } else if (dbDate.toString().equals(date.toString())) {
                connection = ConnectionProvider.getInstance().getConnection();
                queryString = "update tblCrmCalStatus set Status=? where Caldate=? and EmpId=" + empId;
                preparedStatement = connection.prepareStatement(queryString);
                preparedStatement.setString(1, status);
                preparedStatement.setDate(2, date);
                updatedRows = preparedStatement.executeUpdate();
                updatedRows = updatedRows + 1;
            } else {
                connection = ConnectionProvider.getInstance().getConnection();
                queryString = "insert into tblCrHttpServletRequestmCalStatus (CalDate,Status,EmpId) values (?,?,?)";
                preparedStatement = connection.prepareStatement(queryString);
                preparedStatement.setDate(1, date);
                preparedStatement.setString(2, status);
                preparedStatement.setInt(3, empId);
                updatedRows = preparedStatement.executeUpdate();

            }

        } catch (SQLException se) {
            throw new ServiceLocatorException(se);
        } finally {
            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException se) {
                throw new ServiceLocatorException(se);
            }
        }

        return updatedRows;
    }

    /**
     *
     * This method is used to get the Day Status
     * @param eventDate
     * @param empId
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getDayStatus(String eventDate, int empId) throws ServiceLocatorException {
        StringBuffer stringBuffer = new StringBuffer();
        queryString = "select * from tblCrmCalStatus where CalDate LIKE '" + eventDate + "%' AND EmpId='" + empId + "' ORDER BY CalDate";
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            stringBuffer.append("<xml version=\"1.0\">");
            stringBuffer.append("<YEAR>");
            while (resultSet.next()) {
                stringBuffer.append("<DATE>" + resultSet.getDate("CalDate") + "</DATE>");
                stringBuffer.append("<STATUS>" + resultSet.getString("Status") + "</STATUS>");
            }
            stringBuffer.append("</YEAR>");
            stringBuffer.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return stringBuffer.toString();
    }

    /**
     *
     * This method is used to get the Projects List
     * @param project
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getProjectsList(String project) throws ServiceLocatorException {
        StringBuffer stringBuffer = new StringBuffer();
        int projectId = 0;
        queryString = "Select Id FROM tblProjects WHERE ProjectName ='" + project + "'";
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                projectId = resultSet.getInt("Id");
            }
            preparedStatement.close();
            resultSet.close();
            queryString = "Select * FROM tblPrjStatusTracker WHERE ProjectId =" + projectId + " ORDER BY  ModifiedDate DESC";
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            stringBuffer.append("<xml version=\"1.0\">");
            stringBuffer.append("<PROJECT>");
            while (resultSet.next()) {
                stringBuffer.append("<ID>" + resultSet.getInt("ProjectId") + "</ID>");
                stringBuffer.append("<STATUS>" + resultSet.getString("StatusCode") + "</STATUS>");
                if (resultSet.getTimestamp("ModifiedDate") != null && !resultSet.getTimestamp("ModifiedDate").equals("")) {
                    stringBuffer.append("<MDATE>" + resultSet.getTimestamp("ModifiedDate") + "</MDATE>");
                } else {
                    stringBuffer.append("<MDATE>" + "No Records" + "</MDATE>");
                }
                if (resultSet.getString("Reason") != null && !resultSet.getString("Reason").equals("")) {
                    stringBuffer.append("<REASON>" + resultSet.getString("Reason") + "</REASON>");
                } else {
                    stringBuffer.append("<REASON>" + "No Records" + "</REASON>");
                }
            }
            stringBuffer.append("</PROJECT>");
            stringBuffer.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return stringBuffer.toString();
    }

    /**
     *
     * This method is used to add the Project Status
     * @param userId
     * @param projectId
     * @param statusCode
     * @param reason
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public int addProjectStatus(String userId, String projectId, String statusCode, String reason) throws ServiceLocatorException {
        Connection connection = null;
        Statement statement = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        int updatedRows = 0;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            queryString = "insert into tblPrjStatusTracker (ProjectId,StatusCode,ModifiedDate,ModifiedBy,Reason) values(?,?,?,?,?)";
            preparedStatement = connection.prepareStatement(queryString);
            preparedStatement.setInt(1, Integer.parseInt(projectId));
            preparedStatement.setInt(2, Integer.parseInt(statusCode));
            preparedStatement.setTimestamp(3, DateUtility.getInstance().getCurrentMySqlDateTime());
            preparedStatement.setString(4, userId);
            preparedStatement.setString(5, reason);
            updatedRows = preparedStatement.executeUpdate();

        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return updatedRows;
    }

    /**
     *
     * This method is used to get the Total Holidays
     * @param year
     * @param month
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public int getTotalHolidays(String year, String month) throws ServiceLocatorException {
        Connection connection = null;
        Statement statement = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        int holidays = 0;
        int nationalHolidays = 0;
        int miracleHolidays = 0;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery("Select * from tblEmpClendarSummary where Year=" + year + " and Month<=" + month);
            while (resultSet.next()) {
                nationalHolidays = resultSet.getInt("NationalHolidays");
                miracleHolidays = resultSet.getInt("MiracleHolidays");
                holidays = holidays + nationalHolidays + miracleHolidays;
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return holidays;
    }

    /**
     *
     * This method is used to get Team Streangth
     * @param userId
     * @param userList
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public int getTeamStrangth(String userId, String userList) throws ServiceLocatorException {
        int teamStreangth = 0;
        String user = null;
        Connection connection = null;
        Statement statement = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        queryString = "select concat(tblEmployee.FName,'.',tblEmployee.LName ) AS EmpName "
                + "from tblEmployee where tblEmployee.reportsTo ='" + userId + "'"
                + "OR tblEmployee.reportsTo IN(" + userList + ") ";
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            while (resultSet.next()) {
                user = resultSet.getString("EmpName");
                teamStreangth = teamStreangth + 1;
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return teamStreangth;
    }

    /**
     *
     * This method is used to get the venus Report
     * @param startDate
     * @param endDate
     * @param deptId
     * @param empName
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getVenusReport(Date startDate, Date endDate, String deptId, String empName) throws ServiceLocatorException {
        if (empName == null || empName == "") {
            empName = "%";
        } else {
            empName += "%";
        }

        String out = getVenusReportList(startDate, endDate, deptId, empName);
        return out;
    }

    /**
     *
     * This method is used to get the List of Venus Report
     * @param startDate
     * @param endDate
     * @param deptId
     * @param empName
     * @return String
     */
    private String getVenusReportList(Date startDate, Date endDate, String deptId, String empName) {
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spVenus(?,?,?,?,?,?)}");
            callableStatement.setDate(1, startDate);
            callableStatement.setDate(2, endDate);
            callableStatement.setString(3, deptId);
            callableStatement.setString(4, empName);
            callableStatement.registerOutParameter(5, Types.VARCHAR);
            callableStatement.registerOutParameter(6, Types.VARCHAR);

            callableStatement.executeUpdate();
            //consultantList = callableStatement.getString(5);
            stringBuffer.append(callableStatement.getString(5));
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getString(6));
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.err.println("string is"+stringBuffer);
        return stringBuffer.toString();
    }

    /**
     *
     * This method is used to get Absentees Report
     * @param startDate
     * @param endDate
     * @param deptId
     * @param empName
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getAbsanteeReport(Date startDate, Date endDate, String deptId, String empName) throws ServiceLocatorException {
        if (empName == null || empName == "") {
            empName = "%";
        } else {
            empName += "%";
        }
        String out = getAbstaneeReportList(startDate, endDate, deptId, empName);
        return out;
    }

    /**
     *
     * This method is used to get the Absentees List
     * @param startDate
     * @param endDate
     * @param deptId
     * @param empName
     * @return String
     */
    private String getAbstaneeReportList(Date startDate, Date endDate, String deptId, String empName) {
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spAbsanteeList(?,?,?,?,?,?)}");
            callableStatement.setDate(1, startDate);
            callableStatement.setDate(2, endDate);
            callableStatement.setString(3, deptId);
            callableStatement.setString(4, empName);
            callableStatement.registerOutParameter(5, Types.VARCHAR);
            callableStatement.registerOutParameter(6, Types.VARCHAR);

            callableStatement.executeUpdate();
            //consultantList = callableStatement.getString(5);
            stringBuffer.append(callableStatement.getString(5));
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getString(6));
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.err.println("string is"+stringBuffer);
        return stringBuffer.toString();
    }

    public String getTimeSheetsReport(String dept, String weekStartDate, String weekEndDate) {

        String out = getTimeSheetsReportList(dept, weekStartDate, weekEndDate);

        return out;
    }

    public String getTimeSheetsReportList(String dept, String weekStartDate, String weekEndDate) {

        stringBuffer = new StringBuffer();
        Statement statement = null;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            String query = "select concat(tblEmployee.FName ,' ',tblEmployee.MName,' . ', tblEmployee.LName) as empName,tblEmployee.DepartmentId,tblEmployee.ReportsTo from tblEmployee where tblEmployee.CurStatus like 'Active%' and DepartmentId like '" + dept + "' and tblEmployee.ID not in (Select EmpId from tblTimeSheetLines where Date(tblTimeSheetLines.WorkDate) between '" + weekStartDate + "' and '" + weekEndDate + "') order by tblEmployee.FName";
            //System.out.println("Query---->"+query);
            resultSet = statement.executeQuery(query);
            String totalStream = "";
            int i = 0;
            while (resultSet.next()) {
                i++;
                String ename = resultSet.getString("empName");
                String department = resultSet.getString("DepartmentId");
                String reportsTO = resultSet.getString("reportsTO");
                totalStream = totalStream + i + "|" + ename + "|" + department + "|" + reportsTO + "|" + "^";
            }
            stringBuffer.append(totalStream);
            stringBuffer.append("addto");
            stringBuffer.append(i);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }

                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        //System.err.println("string is"+stringBuffer);
        return stringBuffer.toString();
    }

    public String getNotApprovedReport(String dept, String weekStartDate, String weekEndDate) {

        String out = getNotApprovedReportList(dept, weekStartDate, weekEndDate);

        return out;
    }

    public String getNotApprovedReportList(String dept, String weekStartDate, String weekEndDate) {

        stringBuffer = new StringBuffer();
        Statement statement = null;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            String query = "select concat(tblEmployee.FName ,' ',tblEmployee.MName,' . ', tblEmployee.LName) as empName,tblEmployee.DepartmentId,tblEmployee.ReportsTo from tblEmployee where tblEmployee.CurStatus like 'Active%' and DepartmentId like '" + dept + "' and tblEmployee.ID in (Select EmpId from tblTimeSheetLines where Date(tblTimeSheetLines.WorkDate) between '" + weekStartDate + "' and '" + weekEndDate + "') order by tblEmployee.FName ";
            //System.out.println("Query---->"+query);
            resultSet = statement.executeQuery(query);
            String totalStream = "";
            int i = 0;
            while (resultSet.next()) {
                i++;
                String ename = resultSet.getString("empName");
                String department = resultSet.getString("DepartmentId");
                String reportsTO = resultSet.getString("reportsTO");
                totalStream = totalStream + i + "|" + ename + "|" + department + "|" + reportsTO + "|" + "^";
            }
            stringBuffer.append(totalStream);
            stringBuffer.append("addto");
            stringBuffer.append(i);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        //System.err.println("string is"+stringBuffer);
        return stringBuffer.toString();
    }

    /**
     *
     * This method is used to get the Opportunities in Dashboard
     * @param type
     * @param stage
     * @param dueStartDate
     * @param dueEndDate
     * @param createdBy
     * @param httpServletRequest
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    //  public String getOppDashBoard(String type, String stage, String dueStartDate, String dueEndDate, String createdBy, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
    /*public String getOppDashBoard(String type, String stage, String dueStartDate, String dueEndDate, String createdBy, String state, String dueDate, String practice, String SVINum, String SVIStage, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        String oppDashboardList = "";
        CallableStatement callableStatement = null;
        String title = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE).toString();
        String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
        String newDueSDate = "";
        String newDueEDate = "";
        String newDueDate = "";

        int empId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_ID).toString());
        //Map myTeamMembersMap = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
        //String myTeamMembers = getKeys(myTeamMembersMap,",");
        if (type.equals("All")) {
            type = "%";
        }
        if (stage.equals("All")) {
            stage = "%";
        }
        if (createdBy.equals("All")) {
            createdBy = "%";
        }
        if (practice.equals("All")) {
            practice = "%";
        }
        if ("".equals(state) || "".equals(state.trim()) || state.equals("All")) {
            String Stat = "";
            List l = DataSourceDataProvider.getInstance().getOpportunityStateList();
            for (int n = 0; n < l.size(); n++) {
                Stat = Stat + l.get(n) + ",";
            }
            state = Stat.substring(0, Stat.length() - 1);

        }
        if (SVINum != null && !"".equals(SVINum)) {
        } else {
            SVINum = "%";
        }

        if (SVIStage != null && !"".equals(SVIStage)) {
        } else {
            SVIStage = "%";
        }

        /* if(curWorkCountry==null || curWorkCountry=="")
        curWorkCountry ="%";
        boolean checkDefUser = checkDefaultPeople(loginId);
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            //callableStatement = connection.prepareCall("{call spGetOppDashboard(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
            callableStatement = connection.prepareCall("{call spGetOppDashboard(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
            callableStatement.setString(1, type);
            callableStatement.setString(2, stage);
            if (dueStartDate.equals("") || dueStartDate.equals(" ") || dueStartDate == null) {
                newDueSDate = DateUtility.getInstance().convertStringToMySQLDate("01/01/1990");
                callableStatement.setString(3, newDueSDate);
            } else {
                dueStartDate = DateUtility.getInstance().convertStringToMySQLDate(dueStartDate);
                //  System.out.println("dueStartDate-->"+dueStartDate);
                callableStatement.setString(3, dueStartDate);
            }
            if (dueEndDate.equals("") || dueEndDate.equals(" ") || dueEndDate == null) {
                newDueEDate = DateUtility.getInstance().convertStringToMySQLDate("01/01/2050");
                callableStatement.setString(4, newDueEDate);
            } else {
                dueEndDate = DateUtility.getInstance().convertStringToMySQLDate(dueEndDate);
                // System.out.println("dueEndDate-->"+dueEndDate);
                callableStatement.setString(4, dueEndDate);
            }
            callableStatement.setString(5, createdBy);

            callableStatement.setInt(6, empId);
            callableStatement.setString(7, title);
            callableStatement.setString(8, state);


            if (dueDate == null || "".equals(dueDate) || "".equals(dueDate.trim())) {
                newDueDate = DateUtility.getInstance().convertStringToMySQLDate("01/01/2050");
                callableStatement.setString(9, newDueDate);
            } else {
                dueDate = DateUtility.getInstance().convertStringToMySQLDate(dueDate);
                //  System.out.println("dueDate-->"+dueDate);
                callableStatement.setString(9, dueDate);
            }
//System.out.println("checkDefUser-->"+checkDefUser);
            callableStatement.setBoolean(10, checkDefUser);

            callableStatement.setString(11, practice);
            callableStatement.setString(12, SVINum);
            callableStatement.setString(13, SVIStage);

            callableStatement.registerOutParameter(14, Types.VARCHAR);
            callableStatement.registerOutParameter(15, Types.VARCHAR);
            callableStatement.registerOutParameter(16, Types.VARCHAR);
            callableStatement.executeUpdate();
            //oppDashboardList = ;
            //int count = ;

            stringBuffer.delete(0, stringBuffer.length());
            stringBuffer.append(callableStatement.getString(14));
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getInt(15));
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getInt(16));
            callableStatement.executeUpdate();
            //oppDashboardList = ;
            //int count = ;

//            stringBuffer.delete(0, stringBuffer.length());
//            stringBuffer.append(callableStatement.getString(12));
//            stringBuffer.append("addto");
//            stringBuffer.append(callableStatement.getInt(13));
//            stringBuffer.append("addto");
//            stringBuffer.append(callableStatement.getInt(14));
            /*consultantList = callableStatement.getString(5);
            stringBuffer.append(callableStatement.getString(5));
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getString(6));

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }

        return stringBuffer.toString();
    }*/
 public String getOppDashBoard(String type, String stage, String dueStartDate, String dueEndDate, String createdBy, String state, String dueDate, String practice, String SVINum, String SVIStage,HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        String oppDashboardList = "";
        CallableStatement callableStatement = null;
        String title = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE).toString();
        String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
        String newDueSDate = "";
        String newDueEDate = "";
        String newDueDate = "";
//        System.out.println("type is-------->"+type);
//        System.out.println("stage is-------->"+stage);
//        System.out.println("dueStartDate is-------->"+dueStartDate);
//        System.out.println("dueEndDate is-------->"+dueEndDate);
//        System.out.println("createdBy is-------->"+createdBy);
//        System.out.println("state is-------->"+state);
//        System.out.println("dueDate is-------->"+dueDate);
//        System.out.println("practice is-------->"+practice);
//        System.out.println("SVINum is-------->"+SVINum);
//        System.out.println("SVIStage is-------->"+SVIStage);
        int empId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_ID).toString());
        //Map myTeamMembersMap = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
        //String myTeamMembers = getKeys(myTeamMembersMap,",");
        if (type.equals("All")) {
            type = "%";
        }
        if (stage.equals("All")) {
            stage = "%";
        }
        if (createdBy.equals("All")) {
            createdBy = "%";
        }
        if (practice.equals("All")) {
            practice = "%";
        }
        if ("".equals(state) || "".equals(state.trim()) || state.equals("All")) {
            String Stat = "";
            List l = DataSourceDataProvider.getInstance().getOpportunityStateList();
            for (int n = 0; n < l.size(); n++) {
                Stat = Stat + l.get(n) + ",";
            }
            state = Stat.substring(0, Stat.length() - 1);

        }
        System.out.println("state---->"+state);
        if (SVINum != null && !"".equals(SVINum)) {
        } else {
            SVINum = "%";
        }

        if (SVIStage != null && !"".equals(SVIStage)) {
        } else {
            SVIStage = "%";
        }

        
//          System.out.println("type is-------->"+type);
//        System.out.println("stage is-------->"+stage);
//        System.out.println("dueStartDate is-------->"+dueStartDate);
//        System.out.println("dueEndDate is-------->"+dueEndDate);
//        System.out.println("createdBy is-------->"+createdBy);
//        System.out.println("state is-------->"+state);
//        System.out.println("dueDate is-------->"+dueDate);
//        System.out.println("practice is-------->"+practice);
//        System.out.println("SVINum is-------->"+SVINum);
//        System.out.println("SVIStage is-------->"+SVIStage);
//        System.out.println("includeAllAccounts is-------->"+includeAllAccounts);
        
        
        /* if(curWorkCountry==null || curWorkCountry=="")
        curWorkCountry ="%";*/
        boolean checkDefUser = checkDefaultPeople(loginId);
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            //callableStatement = connection.prepareCall("{call spGetOppDashboard(?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
            callableStatement = connection.prepareCall("{call spGetOppDashboard(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}");
            callableStatement.setString(1, type);
            callableStatement.setString(2, stage);
           //  System.out.println("type-->"+type);
          //    System.out.println("stage-->"+stage);
            if (dueStartDate.equals("") || dueStartDate.equals(" ") || dueStartDate == null) {
                newDueSDate = DateUtility.getInstance().convertStringToMySQLDate("01/01/1990");
            //    System.out.println("newDueSDate-->"+newDueSDate);
                callableStatement.setString(3, newDueSDate);
            } else {
                dueStartDate = DateUtility.getInstance().convertStringToMySQLDate(dueStartDate);
               //   System.out.println("dueStartDate-->"+dueStartDate);
                callableStatement.setString(3, dueStartDate);
            }
            if (dueEndDate.equals("") || dueEndDate.equals(" ") || dueEndDate == null) {
                newDueEDate = DateUtility.getInstance().convertStringToMySQLDate("01/01/2050");
               // System.out.println("newDueEDate-->"+newDueEDate);
                callableStatement.setString(4, newDueEDate);
            } else {
                dueEndDate = DateUtility.getInstance().convertStringToMySQLDate(dueEndDate);
              //   System.out.println("dueEndDate-->"+dueEndDate);
                callableStatement.setString(4, dueEndDate);
            }
            callableStatement.setString(5, createdBy);

            callableStatement.setInt(6, empId);
            callableStatement.setString(7, title);
            callableStatement.setString(8, state);
          //  System.out.println("empId--->"+empId);
         //   System.out.println("empId--->"+title);
         //   System.out.println("empId--->"+state);

            if (dueDate == null || "".equals(dueDate) || "".equals(dueDate.trim())) {
                newDueDate = DateUtility.getInstance().convertStringToMySQLDate("01/01/2050");
                callableStatement.setString(9, newDueDate);
              //   System.out.println("newDueDate-->"+newDueDate);
            } else {
                dueDate = DateUtility.getInstance().convertStringToMySQLDate(dueDate);
              //    System.out.println("dueDate-->"+dueDate);
                callableStatement.setString(9, dueDate);
            }
//System.out.println("checkDefUser before is-->"+checkDefUser);
            callableStatement.setBoolean(10, checkDefUser);
           //// System.out.println("checkDefUser after is---->"+checkDefUser);
//System.out.println("practice-->"+practice);
//System.out.println("SVINum-->"+SVINum);
//System.out.println("SVIStage-->"+SVIStage);

            callableStatement.setString(11, practice);
            callableStatement.setString(12, SVINum);
            callableStatement.setString(13, SVIStage);
            callableStatement.setString(14, loginId);
          

            callableStatement.registerOutParameter(15, Types.VARCHAR);
            callableStatement.registerOutParameter(16, Types.VARCHAR);
            callableStatement.registerOutParameter(17, Types.VARCHAR);
            callableStatement.executeUpdate();
            //oppDashboardList = ;
            //int count = ;

            stringBuffer.delete(0, stringBuffer.length());
            stringBuffer.append(callableStatement.getString(15));
           // System.out.println("stringBuffer.toString() for result vales---->"+stringBuffer.toString());
           
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getInt(16));
            // System.out.println("stringBuffer.toString() for second row count vales---->"+stringBuffer.toString());
            stringBuffer.append("^addto");
            stringBuffer.append(callableStatement.getInt(17));
          //   System.out.println("stringBuffer.toString() for 3rd  total count vales---->"+stringBuffer.toString());
            callableStatement.executeUpdate();
         //   System.out.println("stringBuffer.toString();---->"+stringBuffer.toString());
            //oppDashboardList = ;
            //int count = ;

//            stringBuffer.delete(0, stringBuffer.length());
//            stringBuffer.append(callableStatement.getString(12));
//            stringBuffer.append("addto");
//            stringBuffer.append(callableStatement.getInt(13));
//            stringBuffer.append("addto");
//            stringBuffer.append(callableStatement.getInt(14));
            /*consultantList = callableStatement.getString(5);
            stringBuffer.append(callableStatement.getString(5));
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getString(6));*/

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }

        return stringBuffer.toString();
    }

    /**
     *
     * This method is used to check the default people from Property File
     * @param loginId
     * @return True or False
     */
    public boolean checkDefaultPeople(String loginId) {
        boolean isDefUser = false;
        try {
            String users = Properties.getProperty("DefaultPeople").toString();
            String[] userArr = users.split(",");
            for (int index = 0; index < userArr.length; index++) {
                //System.err.println("---"+userArr[index]);
                if ((userArr[index]).equals(loginId)) {

                    isDefUser = true;
                }
            }
            //System.err.println("---"+isDefUser);
        } catch (Exception slex) {
        }
        return isDefUser;
    }

    /**
     *
     * This method is used to get the Greensheet List
     * @param poType
     * @param poStatus
     * @param createdBy
     * @param startDate
     * @param endDate
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
   /* public String greensheetListSearch(String poType, String poStatus, String createdBy, String startDate, String endDate, String country, String title, String titleType)
            throws ServiceLocatorException {

        //   System.out.println("nnnnnnnnnnnnnnn");
        String out = getGreensheetListSearch(poType, poStatus, createdBy, startDate, endDate, country, title, titleType);

        //System.out.println("out  "+out);

        return out;
    }*/
public String greensheetListSearch(String poType, String poStatus, String createdBy, String startDate, String endDate, String country, String title, String titleType,HttpServletRequest httpServletRequest)
            throws ServiceLocatorException {

        //   System.out.println("nnnnnnnnnnnnnnn");
        String out = getGreensheetListSearch(poType, poStatus, createdBy, startDate, endDate, country, title, titleType,httpServletRequest);

        //System.out.println("out  "+out);

        return out;
    }

    /**
     *
     * This method is used to Search the List of Greensheets
     * @param poType
     * @param poStatus
     * @param createdBy
     * @param startDate
     * @param endDate
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
   /* public String getGreensheetListSearch(String poType, String poStatus, String createdBy, String startDate, String endDate, String country, String title, String titleType)
            throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
//            if(title.equals("Vice President") || title.equals("BDM")){
//                 callableStatement = connection.prepareCall("{call spGetOppDashboardForBDMandVicePresident(?,?,?,?,?,?,?,?,?)}");
//            }
//            else{
//                 callableStatement = connection.prepareCall("{call spGetGreensheetDashBoard(?,?,?,?,?,?,?,?,?)}");
//            }


            if (titleType == null || "".equalsIgnoreCase(titleType.trim())) {
                titleType = "%";
            }
            callableStatement = connection.prepareCall("{call spGetGreensheetDashBoard(?,?,?,?,?,?,?,?,?,?)}");

            callableStatement.setString(1, poType);
            callableStatement.setString(2, startDate);
            callableStatement.setString(3, endDate);
            callableStatement.setString(4, poStatus);
            callableStatement.setString(5, createdBy);
            callableStatement.setString(6, country);
            callableStatement.setString(7, titleType);
            callableStatement.registerOutParameter(8, Types.VARCHAR);
            callableStatement.registerOutParameter(9, Types.VARCHAR);
            callableStatement.registerOutParameter(10, Types.DOUBLE);

            callableStatement.executeUpdate();
            //consultantList = callableStatement.getString(5);
            stringBuffer.append(callableStatement.getString(8));
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getString(9));
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getInt(10));

            // System.out.println("callableStatement.getString(7)"+callableStatement.getString(7));
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }

        return stringBuffer.toString();
    }*/
public String getGreensheetListSearch(String poType, String poStatus, String createdBy, String startDate, String endDate, String country, String title, String titleType,HttpServletRequest httpServletRequest)
            throws ServiceLocatorException {
      
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
//            if(title.equals("Vice President") || title.equals("BDM")){
//                 callableStatement = connection.prepareCall("{call spGetOppDashboardForBDMandVicePresident(?,?,?,?,?,?,?,?,?)}");
//            }
//            else{
//                 callableStatement = connection.prepareCall("{call spGetGreensheetDashBoard(?,?,?,?,?,?,?,?,?)}");
//            }
          //  System.out.println("createdBy is----->"+createdBy);
  
 String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
         //   System.out.println("loginId is---->"+loginId);
            if (titleType == null || "".equalsIgnoreCase(titleType.trim())) {
                titleType = "%";
            }
            callableStatement = connection.prepareCall("{call spGetGreensheetDashBoard(?,?,?,?,?,?,?,?,?,?,?)}");
         //   System.out.println("poType---->"+poType);
            callableStatement.setString(1, poType);
          //  System.out.println("startDate---->"+startDate);
            callableStatement.setString(2, startDate);
          //  System.out.println("endDate---->"+endDate);
            callableStatement.setString(3, endDate);
          //  System.out.println("poStatus---->"+poStatus);
            callableStatement.setString(4, poStatus);
          //  System.out.println("createdBy---->"+createdBy);
            callableStatement.setString(5, createdBy);
          //  System.out.println("country---->"+country);
            callableStatement.setString(6, country);
          //  System.out.println("titleType---->"+titleType);
            callableStatement.setString(7, titleType);
           // System.out.println("loginId---->"+loginId);
            callableStatement.setString(8, loginId);
           
            callableStatement.registerOutParameter(9, Types.VARCHAR);
            callableStatement.registerOutParameter(10, Types.VARCHAR);
            callableStatement.registerOutParameter(11, Types.DOUBLE);

            callableStatement.executeUpdate();
            //consultantList = callableStatement.getString(5);
            stringBuffer.append(callableStatement.getString(9));
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getString(10));
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getInt(11));
            //System.out.println("callableStatement.getString(9)---->"+callableStatement.getString(9));
           // System.out.println("callableStatement.getString(10)===>"+callableStatement.getString(10));
            //System.out.println("callableStatement.getString(11)----->"+callableStatement.getString(11));
            // System.out.println("callableStatement.getString(7)"+callableStatement.getString(7));
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }

        return stringBuffer.toString();
    }

    /**
     *
     * This method is used to get the Activities in Dashboard
     * @param startDate
     * @param endDate
     * @param team
     * @return String
     */
    public String getActivityDashBoard(Date startDate, Date endDate, String team, String curWorkCountry) {
        if (team == null || team == "") {
            team = "'%'";
        }
        if (curWorkCountry == null || curWorkCountry == "") {
            curWorkCountry = "'%'";
        }
        String out = getActivityList(startDate, endDate, team, curWorkCountry);
        return out;
    }

    /**
     *
     * This method is used to get the List of Activities
     * @param startDate
     * @param endDate
     * @param team
     * @return String
     */
    public String getActivityList(Date startDate, Date endDate, String team, String curWorkCountry) {
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String createdBy = "";
        String contactId;
        String totalStream = "";
        int count;
        int i = 0;
        int totalActivities = 0;
        GregorianCalendar calender = new GregorianCalendar();
        calender.setGregorianChange(startDate);
        long diff = endDate.getTime() - startDate.getTime();
        float days = diff / (1000 * 60 * 60 * 24);
        int factor = (int) (days / 7) * 2;
        int remainder = (int) (days % 7);
        float denominator = days - (factor);
        float avgCount = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            /*     queryString="SELECT CreatedById, ContactId, count(distinct tblCrmActivity.Id) as  total from tblCrmActivity join tblCrmAddress on tblCrmActivity.AccountId=tblCrmAddress.ObjectId" +
            " WHERE CreatedById in" +"("+team+")"+ "and " +
            "Country like '"+curWorkCountry+"'"+
            "and date(CreatedDate) >='"+startDate+"'"+" and date(CreatedDate) <='"+endDate+"'"+
            "GROUP BY CreatedById ORDER BY CreatedById, total";*/

            queryString = "SELECT CreatedById, workphoneno as ContactId , COUNT(DISTINCT tblCrmActivity.Id) AS  total "
                    + "FROM tblCrmActivity JOIN tblCrmAddress ON (tblCrmActivity.AccountId=tblCrmAddress.ObjectId) "
                    + "JOIN tblEmployee ON (tblCrmActivity.CreatedById=tblEmployee.loginId)  LEFT JOIN tblCrmAccountTeam ON(tblCrmActivity.AccountId=tblCrmAccountTeam.AccountId) WHERE curstatus='Active'"
                    + " AND departmentId='Sales' AND tblCrmAddress.Country LIKE '" + curWorkCountry + "%'"
                    + "and date(tblCrmActivity.CreatedDate) >='" + startDate + "'" + " and date(tblCrmActivity.CreatedDate) <='" + endDate + "'"
                    + " AND tblCrmAccountTeam.TeamMemberId IN (" + team + ") "
                    + " GROUP BY CreatedById ORDER BY total desc";


            String queryString1 = " SELECT CreatedById,COUNT(tblCrmActivity.Id) AS  total FROM tblCrmActivity WHERE CreatedById IN (" + team + ") "
                    + "AND DATE(tblCrmActivity.CreatedDate) >='" + startDate + "'" + " and date(tblCrmActivity.CreatedDate) <='" + endDate + "'  GROUP BY CreatedById ORDER BY total desc";

//            System.out.println("curWorkCountry---"+curWorkCountry);
//            System.out.println("startDate---"+startDate);
//            System.out.println("endDate---"+endDate);
//            System.out.println("team---"+team);
//            System.out.println("...!Query"+queryString1);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString1);
            while (resultSet.next()) {
                i++;
                //   System.out.println("count---");
                createdBy = resultSet.getString("CreatedById");
                //  contactId = resultSet.getString("ContactId");
                count = resultSet.getInt("total");
                if (denominator <= 5) {
                    avgCount = count / 5;
                    //  System.out.println("denominator"+denominator);
                } else {
                    avgCount = count / denominator;
                    // System.out.println("denominator"+denominator);
                }
                // totalStream = totalStream + i + "|" + createdBy + "|" + count + "|" + avgCount + "|" + contactId + "|" + "^";
                totalStream = totalStream + i + "|" + createdBy + "|" + count + "|" + avgCount + "|" + "^";
                totalActivities = totalActivities + count;

            }
            //  System.out.println("totalActivities---"+totalActivities);
            stringBuffer.append(totalStream);
            stringBuffer.append("addto");
            stringBuffer.append(totalActivities);
            stringBuffer.append("addto");
            stringBuffer.append(i);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.err.println("string is"+stringBuffer.toString());
        return stringBuffer.toString();
    }

    public String popupSkills(int consultantId) throws ServiceLocatorException {
        String skillsDesc = null;

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement("SELECT SkillSet FROM tblRecConsultant WHERE Id=" + consultantId);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                skillsDesc = resultSet.getString("SkillSet");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return skillsDesc;
    }

    public String popupReqSkills(int requirementId) throws ServiceLocatorException {
        String skillsDesc = null;

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            // preparedStatement = connection.prepareStatement("SELECT CONCAT(skills,'^',functions) AS SkillSetAndDescription FROM  tblRecRequirement WHERE Id="+requirementId);
            preparedStatement = connection.prepareStatement("SELECT skills,functions,CreatedBy FROM  tblRecRequirement WHERE Id=" + requirementId);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                skillsDesc = resultSet.getString("skills");
                skillsDesc = skillsDesc + "^" + resultSet.getString("functions");
                skillsDesc = skillsDesc + "^" + resultSet.getString("CreatedBy");
                //  skillsDesc = resultSet.getString("SkillSetAndDescription");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return skillsDesc;
    }

    public String popupReqPersonDetails(String personId) throws ServiceLocatorException {
        String empName = null;
        String phoneNo = null;
        String emailaddr = null;
        String empDetails = null;

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();

            //New 
            String firstName = "";
            String lastName = "";
            String midileName = "";
            //String[] result = "nagireddy.seerapu".split("\\s");
            String[] result = personId.split("\\.");
            //for (int x=0; x<result.length; x++)
            // System.out.println("input---"+personId);
            //  System.out.println(result[0]);
            //  System.out.println(result[1]);
            lastName = result[1];

            //System.out.println("index---"+result[0].indexOf(" "));
            result[0] = result[0].trim();
            if (result[0].indexOf(" ") > 1) {
                String[] result1 = result[0].split("\\s");
                firstName = result1[0];
                midileName = result1[1];
            } else {
                firstName = result[0];
            }
            //System.out.println("fname-------------"+firstName);
            //System.out.println("lname-----------"+lastName);
            //System.out.println("mname------------"+midileName);


            String QUERY_STRING = "SELECT CONCAT(fname,'.',lname) AS EmpName,workphoneno,email1 FROM tblEmployee WHERE curstatus='Active' AND ";
            QUERY_STRING = QUERY_STRING + "lname = '" + lastName + "' AND fname Like '" + firstName + "%'";
            /* if(midileName.equals(" ")){
            QUERY_STRING = QUERY_STRING +"AND mname = '"+midileName+"'";
            }*/

            // System.err.println("query----"+QUERY_STRING);
            preparedStatement = connection.prepareStatement(QUERY_STRING);
            //loginId='"+personId+"'");
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                empName = resultSet.getString("EmpName");
                phoneNo = resultSet.getString("workphoneno");
                emailaddr = resultSet.getString("email1");

            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        empDetails = empName + "^" + phoneNo + "^" + emailaddr;
        return empDetails;
    }

    /**
     * New service for displaying the Leave details of the employee in popup window
     */
    public String popupLeaveDetails(int leaveId) throws ServiceLocatorException {
        String leavDetails = null;

        String StartDate = null;
        String endDate = null;
        String reason = null;
        String leaveType = null;
        String reportsTo = null;
        String status = null;

        DateUtility dateUtil;
        dateUtil = DateUtility.getInstance();

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement("SELECT * FROM tblEmpLeaves WHERE Id=" + leaveId);
            resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                StartDate = dateUtil.sqlTimeStampTousTimeStamp(resultSet.getString("StartDate"));
                endDate = dateUtil.sqlTimeStampTousTimeStamp(resultSet.getString("EndDate"));
                reportsTo = resultSet.getString("reportsTo");
                leaveType = resultSet.getString("leaveType");
                status = resultSet.getString("Status");
                reason = resultSet.getString("Reason");
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        leavDetails = StartDate + "^" + endDate + "^" + reportsTo + "^" + leaveType + "^" + reason + "^" + status;
        //leavDetails=reportsTo+"^"+leaveType+"^"+reason+"^"+status;
        return leavDetails;
    }

    public String getContactSearch(String name, String conatctTitle, int accId) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String createdBy = "";
        String totalStream = "";
        int i = 0;

        try {
            /* queryString="SELECT AccountId,Id,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title FROM tblCrmContact" +
            " WHERE AccountId ="+accId+" and ( FirstName like '"+name+"%' OR LastName like '"+name+"%' )"+
            " ORDER BY FirstName";*/

            /*   queryString = "SELECT AccountId,Id,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title,iFlag,Designation FROM tblCrmContact"
            + " WHERE AccountId =" + accId + " and ( FirstName like '" + name + "%' OR LastName like '" + name + "%' )"
            + "GROUP BY AccountId,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title"
            + " ORDER BY ContactStatus='',ContactStatus like 'Deleted',ContactStatus like 'Terminated',ContactStatus like 'Inactive',ContactStatus like 'Active' ,trim(FirstName)";
             */
//            queryString = "SELECT AccountId,Id,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title,iFlag,Designation,ContactStatus FROM tblCrmContact"
//                    + " WHERE AccountId =" + accId + " and ( FirstName like '" + name + "%' OR LastName like '" + name + "%' )"
//                    + "GROUP BY AccountId,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title"
//                    + " ORDER BY ContactStatus like 'Unsubscribe',ContactStatus='',ContactStatus like 'Deleted',ContactStatus like 'Terminated',ContactStatus like 'Inactive',ContactStatus like 'Active' ,trim(FirstName)";

            queryString = "SELECT AccountId,Id,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title,iFlag,Designation,ContactStatus FROM tblCrmContact"
                    + " WHERE AccountId =" + accId;
            if (conatctTitle != null && !"".equals(conatctTitle)) {
                queryString = queryString + " AND Title LIKE '%" + conatctTitle + "%' ";
            }
            queryString = queryString + " and ( FirstName like '%" + name + "%' OR LastName like '%" + name + "%' )"
                    + "GROUP BY AccountId,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title"
                    + " ORDER BY ContactStatus like 'Unsubscribe',ContactStatus='',ContactStatus like 'Deleted',ContactStatus like 'Terminated',ContactStatus like 'Inactive',ContactStatus like 'Active' ,trim(FirstName)";
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            // System.err.println("--"+queryString);
            while (resultSet.next()) {
                String sal = resultSet.getString("Salutation");
                String FName = resultSet.getString("FirstName");
                String LName = resultSet.getString("LastName");
                String aliasName = resultSet.getString("AliasName");
                String title = resultSet.getString("Title");
                String offPhone = resultSet.getString("OfficePhone");
                String email = resultSet.getString("Email1");
                if (resultSet.getString("ContactStatus") != null && !"".equals(resultSet.getString("ContactStatus")) && "Unsubscribe".equals(resultSet.getString("ContactStatus"))) {
                    email = "-";
                }
                String contactId = resultSet.getString("Id");
                String accountId = resultSet.getString("AccountId");
                int iFlag = resultSet.getInt("iFlag");
                String designation = resultSet.getString("Designation");
                i++;
                /*createdBy=resultSet.getString("CreatedById");
                count =resultSet.getInt("total");*/
                //totalStream=totalStream+i+"|"+sal+"|"+FName+"|"+LName+"|"+aliasName+"|"+title+"|"+offPhone+"|"+email+"|"+contactId+"|"+accountId+"|"+"^";
                //    totalStream = totalStream + i + "|" + sal + "|" + FName + "|" + LName + "|" + aliasName + "|" + title + "|" + offPhone + "|" + email + "|" + contactId + "|" + accountId + "|" + iFlag + "|" + designation + "^";
                totalStream = totalStream + i + "#^$" + sal + "#^$" + FName + "#^$" + LName + "#^$" + aliasName + "#^$" + title + "#^$" + offPhone + "#^$" + email + "#^$" + contactId + "#^$" + accountId + "#^$" + iFlag + "#^$" + designation + "*@!";
                //  totalActivities=totalActivities+count;
            }
            stringBuffer.append(totalStream);
            stringBuffer.append("addto");

            stringBuffer.append(i);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.err.println("response string is"+stringBuffer.toString());
        return stringBuffer.toString();
    }

    /**
     *NEW Method for getting data for contact details page
     */
    public String getContactList(int accId) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String createdBy = "";
        String totalStream = "";
        int i = 0;

        try {
            /* queryString="SELECT AccountId,Id,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title FROM tblCrmContact" +
            " WHERE AccountId ="+accId+" and ( FirstName like '"+name+"%' OR LastName like '"+name+"%' )"+
            " ORDER BY FirstName";*/

            /*     queryString = "SELECT AccountId,Id,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title,Designation,iFlag FROM tblCrmContact"
            + " WHERE AccountId =" + accId
            + "  GROUP BY AccountId,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title"
            + " ORDER BY ContactStatus='',ContactStatus like 'Deleted',ContactStatus like 'Terminated',ContactStatus like 'Inactive',ContactStatus like 'Active' ,trim(FirstName)";
             */
            queryString = "SELECT AccountId,Id,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title,Designation,iFlag,ContactStatus FROM tblCrmContact"
                    + " WHERE AccountId =" + accId
                    + "  GROUP BY AccountId,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title"
                    + " ORDER BY ContactStatus like 'Unsubscribe',ContactStatus='',ContactStatus like 'Deleted',ContactStatus like 'Terminated',ContactStatus like 'Inactive',ContactStatus like 'Active' ,trim(FirstName)";
            // System.err.print("qs::"+queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            // System.err.println("--"+queryString);
            while (resultSet.next()) {
                String sal = resultSet.getString("Salutation");
                String FName = resultSet.getString("FirstName");
                String LName = resultSet.getString("LastName");
                String aliasName = resultSet.getString("AliasName");
                String title = resultSet.getString("Title");
                String offPhone = resultSet.getString("OfficePhone");
                String email = resultSet.getString("Email1");
                if (resultSet.getString("ContactStatus") != null && !"".equals(resultSet.getString("ContactStatus")) && "Unsubscribe".equals(resultSet.getString("ContactStatus"))) {
                    email = "-";
                }
                String contactId = resultSet.getString("Id");
                String accountId = resultSet.getString("AccountId");
                int iFlag = resultSet.getInt("iFlag");
                String designation = resultSet.getString("Designation");
                i++;
                /*createdBy=resultSet.getString("CreatedById");
                count =resultSet.getInt("total");*/
                //totalStream=totalStream+i+"|"+sal+"|"+FName+"|"+LName+"|"+aliasName+"|"+title+"|"+offPhone+"|"+email+"|"+contactId+"|"+accountId+"|"+"^";
                //    totalStream = totalStream + i + "|" + sal + "|" + FName + "|" + LName + "|" + aliasName + "|" + title + "|" + offPhone + "|" + email + "|" + contactId + "|" + accountId + "|" + iFlag + "|" + designation + "^";
                totalStream = totalStream + i + "#^$" + sal + "#^$" + FName + "#^$" + LName + "#^$" + aliasName + "#^$" + title + "#^$" + offPhone + "#^$" + email + "#^$" + contactId + "#^$" + accountId + "#^$" + iFlag + "#^$" + designation + "*@!";
                //  totalActivities=totalActivities+count;
            }
            stringBuffer.append(totalStream);
            stringBuffer.append("addto");

            stringBuffer.append(i);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.err.println("response string is"+stringBuffer.toString());
        return stringBuffer.toString();
    }

    public String getTotalLeaves(String employeeId, String year) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String createdBy = "";
        String totalStream = "";
        int i = 0;
        String responseString = "";
        boolean isDataAvailable = false;
        try {
            queryString = "select empLeave.EmpId as empId,Concat(emp.FName,' ',emp.MName,'.',emp.LName,'@',empLeave.Status,'@',empLeave.leaveType) as EmpName,emp.reportsTo as reportsTo,DATE(empLeave.StartDate) as StartDate,DATE(empLeave.EndDate) as EndDate from tblEmpLeaves empLeave,tblEmployee emp where empLeave.EmpId=emp.Id and "
                    + "emp.LoginId='" + employeeId + "' and empLeave.StartDate like '" + year + "-%'";
            // System.err.println("queryString..."+queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            while (resultSet.next()) {
                responseString = responseString + resultSet.getString("EmpId") + "|";
                responseString = responseString + resultSet.getString("EmpName") + "|";
                responseString = responseString + resultSet.getString("reportsTo") + "|";
                responseString = responseString + resultSet.getString("StartDate") + "|";
                responseString = responseString + resultSet.getString("EndDate") + "!";
                isDataAvailable = true;
            }
            // System.err.println("response String---"+responseString);
            if (!isDataAvailable) {
                responseString = "no data";
            }
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public String getEmpTotalLeaves(String month, String year, String userWorkCountry) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String createdBy = "";
        String totalStream = "";
        int i = 0;
        String responseString = "";
        boolean isDataAvailable = false;
        try {
            //  queryString="select empLeave.Id as id, empLeave.EmpId as empId,Concat(emp.FName,' ',emp.MName,'.',emp.LName) as EmpName,emp.reportsTo as reportsTo,empLeave.StartDate,empLeave.EndDate,empLeave.Status from tblEmpLeaves empLeave,tblEmployee emp where empLeave.EmpId=emp.Id and " +
            //        " emp.Country like '"+userWorkCountry+"' and empLeave.StartDate like '"+year+"-"+month+"%' order by EmpName ";
            queryString = "select empLeave.Id as id, empLeave.EmpId as empId,Concat(emp.FName,' ',emp.MName,'.',emp.LName) as EmpName,emp.reportsTo as reportsTo,empLeave.leaveType,empLeave.Status,empLeave.Reason,empLeave.StartDate,empLeave.EndDate from tblEmpLeaves empLeave,tblEmployee emp where empLeave.EmpId=emp.Id and "
                    + " emp.Country like '" + userWorkCountry + "' and empLeave.StartDate like '" + year + "-" + month + "%' order by EmpName,StartDate ";
            //System.out.println("query--"+queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            /* while (resultSet.next()) {
            responseString = responseString + resultSet.getString("EmpId") + "|";
            responseString = responseString + resultSet.getString("EmpName") + "|";
            responseString = responseString + resultSet.getString("reportsTo") + "|";
            responseString = responseString + resultSet.getString("leaveType") + "|";
            responseString = responseString + resultSet.getString("Status") + "|";
            responseString = responseString + resultSet.getString("Reason") + "|";
            responseString = responseString + resultSet.getString("StartDate") + "|";
            responseString = responseString + resultSet.getString("EndDate") + "|";
            responseString = responseString + resultSet.getString("id") + "!";
            isDataAvailable = true;
            }*/
            while (resultSet.next()) {
                responseString = responseString + resultSet.getString("EmpId") + "#^$";
                responseString = responseString + resultSet.getString("EmpName") + "#^$";
                responseString = responseString + resultSet.getString("reportsTo") + "#^$";
                responseString = responseString + resultSet.getString("leaveType") + "#^$";
                responseString = responseString + resultSet.getString("Status") + "#^$";
                responseString = responseString + resultSet.getString("Reason") + "#^$";
                responseString = responseString + resultSet.getString("StartDate") + "#^$";
                responseString = responseString + resultSet.getString("EndDate") + "#^$";
                responseString = responseString + resultSet.getString("id") + "*@!";
                isDataAvailable = true;
            }


            //  System.err.println("response String---"+responseString);
            if (!isDataAvailable) {
                responseString = "no data";
            }
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public String getEmpTotalLeavesByDate(String fname, String lname, String country, String startdate, String enddate, String opsContactId) throws ServiceLocatorException {
        DateUtility dateutility = new DateUtility();
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String createdBy = "";
        String totalStream = "";
        int i = 0;
        String responseString = "";
        boolean isDataAvailable = false;

        String startDate = dateutility.convertStringToMySQLDate(startdate);
        String endDate = dateutility.convertStringToMySQLDate(enddate);

        try {

            // System.out.println("fname1111111:"+fname+"lname111111:"+lname);
            queryString = " select empLeave.Id as id, empLeave.EmpId as empId,Concat(emp.FName,' ',emp.MName,'.',emp.LName) as EmpName,emp.reportsTo as reportsTo,empLeave.leaveType,empLeave.Status,empLeave.Reason,empLeave.StartDate,empLeave.EndDate from tblEmpLeaves empLeave,tblEmployee emp where empLeave.EmpId=emp.Id and emp.Country like '" + country + "' and ((empLeave.StartDate >= '" + startDate + "') or (empLeave.EndDate >= '" + startDate + "')) and ((empLeave.StartDate <= '" + endDate + "') or (empLeave.EndDate <= '" + endDate + "') )";

            if (Integer.parseInt(opsContactId) != 1) {
                //   if(country.equalsIgnoreCase("India")){

                queryString = queryString + " and emp.OpsContactId=" + opsContactId;
            }
            //  }

            if (!fname.equals("")) {
                queryString = queryString + " and emp.FNAME like '%" + fname + "%' ";
            }
            if (!lname.equals("")) {
                queryString = queryString + " and emp.LNAME like '" + lname + "%' ";
            }
            queryString = queryString + " order by EmpName,StartDate LIMIT 150";

            // System.out.println("query--"+queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);


            while (resultSet.next()) {
                responseString = responseString + resultSet.getString("EmpId") + "#^$";
                responseString = responseString + resultSet.getString("EmpName") + "#^$";
                responseString = responseString + resultSet.getString("reportsTo") + "#^$";
                responseString = responseString + resultSet.getString("leaveType") + "#^$";
                responseString = responseString + resultSet.getString("Status") + "#^$";
                responseString = responseString + resultSet.getString("Reason") + "#^$";
                responseString = responseString + resultSet.getString("StartDate") + "#^$";
                responseString = responseString + resultSet.getString("EndDate") + "#^$";
                responseString = responseString + resultSet.getString("id") + "*@!";
                isDataAvailable = true;
            }



            if (!isDataAvailable) {
                responseString = "no data";
            }

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }

        return responseString;
    }

    public String getNameOfAccount(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {
        boolean isGetting = false;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        StringBuffer sb = new StringBuffer();
        String accountName = null;
        if (ajaxHandlerAction.getAccountName() != null) {
            accountName = ajaxHandlerAction.getAccountName();
        } else if (ajaxHandlerAction.getAccountName2() != null) {
            accountName = ajaxHandlerAction.getAccountName2();
        }
        try {
            String queryString = "SELECT NAME FROM tblCrmAccount WHERE NAME like '" + accountName + "%'";
            // System.err.println(queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            int count = 0;
            sb.append("<xml version=\"1.0\">");
            sb.append("<ACCOUNTS>");
            while (resultSet.next()) {
                sb.append("<NAME>" + resultSet.getString(1) + "</NAME>");
                isGetting = true;
                count++;
            }
            if (!isGetting) {
                isGetting = false;
                //sb.append("<ACCOUNT><VALID>false</VALID></ACCOUNT>");
            }
            sb.append("<COUNT>" + count + "</COUNT>");
            sb.append("</ACCOUNTS>");
            sb.append("</xml>");
            //  System.err.println(sb.toString());
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        return sb.toString();
    }

    /** 
     * New Method by nagireddy
     */
    public String getNameOfAccountbyLoginId(AjaxHandlerAction ajaxHandlerAction, String loginId, Map teamMap) throws ServiceLocatorException {
        boolean isGetting = false;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        StringBuffer sb = new StringBuffer();
        String accountName = null;
        String queryString = null;
        if (ajaxHandlerAction.getAccountName() != null) {
            accountName = ajaxHandlerAction.getAccountName();
        } else if (ajaxHandlerAction.getAccountName2() != null) {
            accountName = ajaxHandlerAction.getAccountName2();
        }
        try {

            if (teamMap.size() > 0) {
                queryString = "SELECT DISTINCT tblCrmAccount.Name AS AccountName FROM ((tblCrmAccount LEFT JOIN tblCrmAccountTeam ON (tblCrmAccountTeam.AccountId = tblCrmAccount.Id)) LEFT JOIN tblCrmAddress ON (tblCrmAddress.Id = tblCrmAccount.PrimaryAddressId)) WHERE tblCrmAccountTeam.TeamMemberId IN ('" + loginId + "'," + getKeys(teamMap, ",") + ") AND tblCrmAddress.Country LIKE 'USA'AND tblCrmAccount.Name  LIKE '" + accountName + "%'";
            } else {
                queryString = "SELECT DISTINCT tblCrmAccount.Name AS AccountName FROM ((tblCrmAccount LEFT JOIN tblCrmAccountTeam ON (tblCrmAccountTeam.AccountId = tblCrmAccount.Id)) LEFT JOIN tblCrmAddress ON (tblCrmAddress.Id = tblCrmAccount.PrimaryAddressId)) WHERE tblCrmAccountTeam.TeamMemberId IN ('" + loginId + "') AND tblCrmAddress.Country LIKE 'USA'AND tblCrmAccount.Name  LIKE '" + accountName + "%'";

            }
            // String queryString = "SELECT NAME FROM tblCrmAccount WHERE NAME like '"+accountName+"%'";

            /* queryStringBuffer.append("(");
            queryStringBuffer.append(getKeys(getMyTeamMembers() , ","));
            queryStringBuffer.append(")");*/

            //System.err.println("query---"+queryString);
            // System.err.println(queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            int count = 0;
            sb.append("<xml version=\"1.0\">");
            sb.append("<ACCOUNTS>");
            while (resultSet.next()) {
                sb.append("<NAME>" + resultSet.getString(1) + "</NAME>");
                isGetting = true;
                count++;
            }
            if (!isGetting) {
                isGetting = false;
                //sb.append("<ACCOUNT><VALID>false</VALID></ACCOUNT>");
            }
            sb.append("<COUNT>" + count + "</COUNT>");
            sb.append("</ACCOUNTS>");
            sb.append("</xml>");
            //  System.err.println(sb.toString());
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        return sb.toString();
    }

    //=====================================================================================
//  This method is used to loop through all the keys present in a Map Data Structure
//  and formulate them into a String of Keys seperated by a delimiter and return that
//  string of delimited values back to the caller
//=====================================================================================
    private String getKeys(Map map, String delimiter) {
        Iterator tempIterator = map.entrySet().iterator();
        String keys = "";
        String key = "";
        int cnt = 0;

        while (tempIterator.hasNext()) {
            Map.Entry entry = (Map.Entry) tempIterator.next();
            key = entry.getKey().toString();
            entry = null;

            //  Add the Delimiter to the Keys Field for the Second Key onwards
            if (cnt > 0) {
                keys = keys + delimiter;
            }

            keys = keys + "'" + key + "'";
            cnt++;
        }
        tempIterator = null;
        return (keys);
    }

    //   public String getAccountsByRep(String StartDate, String EndDate, HttpServletRequest httpServletRequest, String practiceName) throws ServiceLocatorException {
   /* public String getAccountsByRep(String StartDate, String EndDate, HttpServletRequest httpServletRequest, String practiceName, String teamMemberId) throws ServiceLocatorException {
        //String qsTitle = "";
        Map myTeamMembersMap = new TreeMap();
        stringBuffer = new StringBuffer();
        String oppDashboardList = "";
        String newDueSDate = "";
        String newDueEDate = "";
        CallableStatement callableStatement = null;
        String title = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE).toString();;
        String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
        if (!"".equals(StartDate) && StartDate != null) {
            newDueSDate = DateUtility.getInstance().strToTimeStampObj(StartDate).toString();
        }
        if (!"".equals(StartDate) && StartDate != null) {
            newDueEDate = DateUtility.getInstance().strToTimeStampObj(EndDate).toString();
        }
        //  System.out.println("newDueSDate-->"+newDueSDate);
        // System.out.println("newDueEDate-->"+newDueEDate);
        int empId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_ID).toString());
        accountService = ServiceLocator.getAccountService();
        //   if (loginId.equals("plokam")) {
        //      myTeamMembersMap = (accountService.getAllSalesTeamExceptAccountTeam(new TreeMap()));
        //  } else {
        myTeamMembersMap = ((Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP));
        // }

        String dbUserName = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_NAME);

        String spParameter = null;
        String teamList = "";




        //------------------
        if ("-1".equalsIgnoreCase(teamMemberId)) {
            // myTeamMembersMap = ((Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP));
            if (myTeamMembersMap.size() == 0 || myTeamMembersMap.size() <= 0) {
                // spParameter = "{" + loginId + "=" + dbUserName + "}";
                teamList = loginId;

            } else {
                // spParameter = myTeamMembersMap.toString();
                myTeamMembersMap.put(loginId, dbUserName);
                // spParameter=DataSourceDataProvider.sortByValue(myTeamMembersMap).toString();
                teamList = DataSourceDataProvider.getInstance().getMapKeys(DataSourceDataProvider.sortByValue(myTeamMembersMap), ",");

            }

        } else {

            myTeamMembersMap = DataSourceDataProvider.getInstance().getMyTeamMembers(teamMemberId, DataSourceDataProvider.getInstance().getDepartmentName(teamMemberId));

            if (myTeamMembersMap.size() == 0 || myTeamMembersMap.size() <= 0) {
                teamList = teamMemberId;
            } else {
                String teamMemberName = DataSourceDataProvider.getInstance().getFname_Lname(teamMemberId);
                myTeamMembersMap.put(teamMemberId, teamMemberName);
                teamList = DataSourceDataProvider.getInstance().getMapKeys(DataSourceDataProvider.sortByValue(myTeamMembersMap), ",");
            }

        }


        //------------------
        boolean checkDefUser = checkDefaultPeople(loginId);
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spSalesDashBoardList(?,?,?,?,?)}");
            // callableStatement.setString(1, spParameter);
            callableStatement.setString(1, teamList);
            callableStatement.setString(2, newDueSDate.split("\\ ")[0]);
            callableStatement.setString(3, newDueEDate.split("\\ ")[0]);
            if (practiceName.equals("All")) {
                practiceName = "%";
            }
//            callableStatement.setString(2, newDueSDate);
//            callableStatement.setString(3, newDueEDate);
            callableStatement.setString(4, practiceName);
            callableStatement.registerOutParameter(5, Types.VARCHAR);

            callableStatement.executeUpdate();


            //System.out.println("callableStatement.getString(2)"+callableStatement.getString(2));

            stringBuffer.append(callableStatement.getString(5));


            StringBuffer newString = new StringBuffer();
            if (!stringBuffer.toString().equals("Input String Length is Zero")) {
                // stringBuffer= stringBuffer.reverse();

                String data[] = stringBuffer.toString().split("\\^");
                if (data.length >= 1) {
                    for (int i = data.length - 1; i >= 0; i--) {
                        newString.append(data[i] + "^");
                    }
                    String newadata[] = newString.toString().split("\\^");
                    String newInfo[];
                    List reportsList = new ArrayList();
                    for (int i = 0; i < newadata.length; i++) {
                        // newInfo = newadata[i].split("\\|");
                        // reportsList.add(newadata[i].substring(newadata[i].indexOf('|')+1));
                        reportsList.add(newadata[i]);
                        //reportsMap.put(newInfo[1], newInfo[0]+"");
                    }
                    Collections.sort(reportsList);
                    StringBuffer finalData = new StringBuffer();
                    for (int i = 0; i < reportsList.size(); i++) {
                        finalData.append((i + 1) + "|" + reportsList.get(i).toString() + "^");

                    }


                    stringBuffer = finalData;
                    // System.out.println("newString-->"+stringBuffer);
                } else {
                    stringBuffer = new StringBuffer(1 + "|" + stringBuffer.toString());
                }

            }

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }

        //System.out.println("stringBuffer.toString()"+stringBuffer.toString());

        return stringBuffer.toString();
    }*/
public String getAccountsByRep(String StartDate, String EndDate, HttpServletRequest httpServletRequest, String practiceName, String teamMemberId) throws ServiceLocatorException {
        //String qsTitle = "";
        Map myTeamMembersMap = new TreeMap();
        stringBuffer = new StringBuffer();
        String oppDashboardList = "";
        String newDueSDate = "";
        String newDueEDate = "";
        CallableStatement callableStatement = null;
        String title = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE).toString();;
        String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
        if (!"".equals(StartDate) && StartDate != null) {
            newDueSDate = DateUtility.getInstance().strToTimeStampObj(StartDate).toString();
        }
        if (!"".equals(StartDate) && StartDate != null) {
            newDueEDate = DateUtility.getInstance().strToTimeStampObj(EndDate).toString();
        }
        //  System.out.println("newDueSDate-->"+newDueSDate);
        // System.out.println("newDueEDate-->"+newDueEDate);
        int empId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_ID).toString());
        accountService = ServiceLocator.getAccountService();
        //   if (loginId.equals("plokam")) {
        //      myTeamMembersMap = (accountService.getAllSalesTeamExceptAccountTeam(new TreeMap()));
        //  } else {
        
        
String titleType = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE);
                      System.out.println("titleType is---->"+titleType);
      
       
        // }

        String dbUserName = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_NAME);

        String spParameter = null;
        String teamList = "";

      //  System.out.println("myTeamMembersMap---->"+myTeamMembersMap);
      //  System.out.println("teamMemberId skhshfdh---->"+teamMemberId);
        //------------------
        if ("-1".equalsIgnoreCase(teamMemberId)) {
         if(titleType.equals("BDM")){
           myTeamMembersMap=DataSourceDataProvider.getInstance().getBdmAssociateList(Integer.toString(empId));
       }
        else{
             myTeamMembersMap = ((Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP));
        }
            if (myTeamMembersMap.size() == 0 || myTeamMembersMap.size() <= 0) {
                teamList = loginId;
            } else {
                myTeamMembersMap.put(loginId, dbUserName);
                teamList = DataSourceDataProvider.getInstance().getMapKeys(DataSourceDataProvider.sortByValue(myTeamMembersMap), ",");
            }

        } else {
          if(!title.equals("BDM")){
                          myTeamMembersMap = DataSourceDataProvider.getInstance().getMyTeamMembers(teamMemberId, DataSourceDataProvider.getInstance().getDepartmentName(teamMemberId));
                        }
          else{
                myTeamMembersMap.put(teamMemberId, teamMemberId);
          }
            if (myTeamMembersMap.size() == 0 || myTeamMembersMap.size() <= 0) {
                teamList = teamMemberId;
                
            } else {
              
                String teamMemberName = DataSourceDataProvider.getInstance().getFname_Lname(teamMemberId);
                
                myTeamMembersMap.put(teamMemberId, teamMemberName);
                
                teamList = DataSourceDataProvider.getInstance().getMapKeys(DataSourceDataProvider.sortByValue(myTeamMembersMap), ",");
              
            }

        }


        //------------------
        boolean checkDefUser = checkDefaultPeople(loginId);
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spSalesDashBoardList(?,?,?,?,?,?,?)}");
            // callableStatement.setString(1, spParameter);
         //   System.out.println("teamList---->"+teamList);
            callableStatement.setString(1, teamList);
         //   System.out.println("newDueSDate.split(\"\\\\ \")[0]---->"+newDueSDate.split("\\ ")[0]);
            callableStatement.setString(2, newDueSDate.split("\\ ")[0]);
          //  System.out.println("newDueEDate.split(\"\\\\ \")[0]---->"+newDueEDate.split("\\ ")[0]);
            callableStatement.setString(3, newDueEDate.split("\\ ")[0]);
          //   System.out.println("practiceName---->"+practiceName);
            if (practiceName.equals("All")) {
                practiceName = "%";
            }
           // System.out.println("practiceName---->"+practiceName);
           //    System.out.println("title is---->"+title);
            //   System.out.println("loginId is---->"+loginId);
//            callableStatement.setString(2, newDueSDate);
//            callableStatement.setString(3, newDueEDate);
            callableStatement.setString(4, practiceName);
            callableStatement.setString(5, title);
            callableStatement.setString(6, loginId);
           
            callableStatement.registerOutParameter(7, Types.VARCHAR);

            callableStatement.executeUpdate();


            //System.out.println("callableStatement.getString(2)"+callableStatement.getString(2));

            stringBuffer.append(callableStatement.getString(7));
          //  System.out.println("stringBuffer.toString()---->"+stringBuffer.toString());

            StringBuffer newString = new StringBuffer();
            if (!stringBuffer.toString().equals("Input String Length is Zero")) {
                // stringBuffer= stringBuffer.reverse();

                String data[] = stringBuffer.toString().split("\\^");
                if (data.length >= 1) {
                    for (int i = data.length - 1; i >= 0; i--) {
                        newString.append(data[i] + "^");
                    }
                    String newadata[] = newString.toString().split("\\^");
                    String newInfo[];
                    List reportsList = new ArrayList();
                    for (int i = 0; i < newadata.length; i++) {
                        // newInfo = newadata[i].split("\\|");
                        // reportsList.add(newadata[i].substring(newadata[i].indexOf('|')+1));
                        reportsList.add(newadata[i]);
                        //reportsMap.put(newInfo[1], newInfo[0]+"");
                    }
                    Collections.sort(reportsList);
                    StringBuffer finalData = new StringBuffer();
                    for (int i = 0; i < reportsList.size(); i++) {
                        finalData.append((i + 1) + "|" + reportsList.get(i).toString() + "^");

                    }


                    stringBuffer = finalData;
                    // System.out.println("newString-->"+stringBuffer);
                } else {
                    stringBuffer = new StringBuffer(1 + "|" + stringBuffer.toString());
                }

            }

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }

      //  System.out.println("stringBuffer.toString()"+stringBuffer.toString());

        return stringBuffer.toString();
    }
    //new Impl for activities in contact details page
    public String getActivityLists(int contactId, int actAccId) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        Statement statement1 = null;
        ResultSet resultSet = null;
        ResultSet resultSet1 = null;
        String createdBy = "";
        String totalStream = "";
        List contactList = new ArrayList();
        int i = 0;
        //   List contactList= new ArrayList();
        try {

            List contactsList = DataSourceDataProvider.getInstance().getContactIdListAgainstAccount(actAccId, contactId);
            /*queryString ="SELECT Id,ActivityType,Status,Description,DateDue,CreatedDate,AssignedToId,Comments FROM tblCrmActivity";
            queryString = queryString + " WHERE AccountId ="+accId+" AND ContactId =0 GROUP BY ActivityType,STATUS,Description,AssignedToId ORDER BY CreatedDate DESC";*/

            queryString = "SELECT Id,ActivityType,Status,Description,DateDue,CreatedDate,AssignedToId,Comments,CreatedById FROM tblCrmActivity";
            queryString = queryString + " WHERE Id =?  ORDER BY CreatedDate DESC";
            //System.out.println("queryString1123----->"+queryString);

            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            for (int k = 0; k < contactsList.size(); k++) {

                int contactIdForAccId = (Integer) contactsList.get(k);
                preparedStatement.setInt(1, contactIdForAccId);
                // System.out.println("contactIdForAccId---"+contactIdForAccId);
                resultSet = preparedStatement.executeQuery();
                //System.err.println("In the getActivityLists:::"+queryString);
                while (resultSet.next()) {

                    String id = resultSet.getString("Id");
                    String actType = resultSet.getString("ActivityType");
                    String status = resultSet.getString("Status");
                    String description = resultSet.getString("Description");
                    String datedue = resultSet.getString("DateDue");
                    String createdDate = resultSet.getString("CreatedDate");
                    String assignedToId = resultSet.getString("AssignedToId");
                    String comments = resultSet.getString("Comments");
                    String createdById = resultSet.getString("CreatedById");



                    i++;
                    /*createdBy=resultSet.getString("CreatedById");
                    count =resultSet.getInt("total");*/
                    //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+status+"|"+datedue+"|"+contactId+"|"+accountId+"|"+"^";
                    //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+status+"|"+datedue+"|"+"^";
                    // totalStream = totalStream + i + "#^$" + createdDate + "#^$" + actType + "#^$" + description + "#^$" + comments + "#^$" + assignedToId + "#^$" + status + "#^$" + datedue + "#^$" + id + "#^$" + "*@!";
                    totalStream = totalStream + i + "#^$" + createdDate + "#^$" + actType + "#^$" + description + "#^$" + status + "#^$" + createdById + "#^$" + id + "#^$" + "*@!";
                    //  totalActivities=totalActivities+count;

                }
            }
            stringBuffer.append(totalStream);
            stringBuffer.append("addto");

            stringBuffer.append(i);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.err.println("response string is"+stringBuffer.toString());
        return stringBuffer.toString();
    }

    //new impl for account activities
    public String getactivitySearch(int accId) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;

        String totalStream = "";
        int i = 0;

        try {
            queryString = "SELECT Id,ActivityType,Status,Description,DateDue,CreatedDate,AssignedToId,Comments,CreatedById,OpportunityId,ContactId FROM tblCrmActivity";
            queryString = queryString + " WHERE AccountId =" + accId + "  ORDER BY CreatedDate DESC";

            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            //System.err.println("Account Activities:"+queryString);
            while (resultSet.next()) {

                String id = resultSet.getString("Id");
                String actType = resultSet.getString("ActivityType");
                String status = resultSet.getString("Status");
                String description = resultSet.getString("Description");
                String createdDate = resultSet.getString("CreatedDate");
                String comments = resultSet.getString("Comments");
                String createdBy = resultSet.getString("CreatedById");
                String contactNames = "";
                if (resultSet.getString("ContactId") == null || "".equals(resultSet.getString("ContactId").trim())) {
                    contactNames = "-";
                } else {
                    contactNames = DataSourceDataProvider.getInstance().getContactsNames(resultSet.getString("ContactId"));
                }
                String opportunity = "";
                if (resultSet.getInt("OpportunityId") == 0 || resultSet.getInt("OpportunityId") == -1 || resultSet.getInt("OpportunityId") == -2) {
                    opportunity = "No Opportunity";
                } else {
                    opportunity = DataSourceDataProvider.getInstance().getOpportunityTitle(resultSet.getInt("OpportunityId"));
                }


                i++;
                // totalStream = totalStream + i + "|" + createdDate + "|" + actType + "|" + description + "|" + comments + "|"  + status + "|"  + id  + "^";
                // totalStream = totalStream + i + "|" + createdDate + "|" + actType + "|" + description + "|" + comments + "|" + status + "|" + createdBy + "|" + opportunity + "|" + id + "^";
                totalStream = totalStream + i + "#^$" + createdDate + "#^$" + actType + "#^$" + comments + "#^$" + status + "#^$" + createdBy + "#^$" + opportunity + "#^$" + id + "#^$" + contactNames + "*@!";


            }
            stringBuffer.append(totalStream);
            stringBuffer.append("addto");
            //System.out.println("totalStream"+totalStream);
            stringBuffer.append(i);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }

        return stringBuffer.toString();
    }

//new Impl for all activities
    public String getAllActivitySearch(String name, int accId) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String createdBy = "";
        String totalStream = "";
        int i = 0;

        try {



            /*queryString ="SELECT Id,ActivityType,Status,Description,DateDue,CreatedDate,AssignedToId,Comments FROM tblCrmActivity";
            queryString = queryString + " WHERE AccountId ="+accId+" AND ContactId =0 GROUP BY ActivityType,STATUS,Description,AssignedToId ORDER BY CreatedDate DESC";*/

            /* queryString = "SELECT ActivityId,ActivityType,concat(ContactFName,'   ',ContactLName) as ContactName,ContactTitle,Description,DateDue,"
            +"CreatedDate,AssignedToId,Comments"
            +" FROM vwActivityList WHERE AccountId="+accId+" GROUP BY ActivityType,ContactTitle,Description,AssignedToId ORDER BY CreatedDate DESC";*/
            queryString = "SELECT ActivityId,ActivityType,concat(ContactFName,'   ',ContactLName) as ContactName,ContactTitle,Description,DateDue,"
                    + "CreatedDate,AssignedToId,Comments"
                    + " FROM vwActivityList WHERE AccountId=" + accId + " AND ( ContactFName like '" + name + "%' OR ContactLName like '" + name + "%' )  "
                    // + "GROUP BY ActivityType,ContactTitle,Description,AssignedToId,DateDue,Comments ORDER BY CreatedDate DESC";
                    + " ORDER BY CreatedDate DESC";



            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            while (resultSet.next()) {

                String actid = resultSet.getString("ActivityId");
                String actType = resultSet.getString("ActivityType");
                String contactName = resultSet.getString("ContactName");
                String contactTitle = resultSet.getString("ContactTitle");
                String description = resultSet.getString("Description");
                String datedue = resultSet.getString("DateDue");
                String createdDate = resultSet.getString("CreatedDate");
                String assignedToId = resultSet.getString("AssignedToId");
                String comments = resultSet.getString("Comments");

                i++;
                /*createdBy=resultSet.getString("CreatedById");
                count =resultSet.getInt("total");*/
                //     totalStream = totalStream + i + "|" + createdDate + "|" + actType + "|" + description + "|" + comments + "|" + assignedToId + "|" + contactName + "|" + contactTitle + "|" + datedue + "|" + actid + "|" + "^";
                totalStream = totalStream + i + "#^$" + createdDate + "#^$" + actType + "#^$" + description + "#^$" + comments + "#^$" + assignedToId + "#^$" + contactName + "#^$" + contactTitle + "#^$" + datedue + "#^$" + actid + "#^$" + "*@!";

                //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+contactName+"|"+datedue+"|"+actid+"|"+"^";
                //  totalActivities=totalActivities+count;
            }
            stringBuffer.append(totalStream);
            stringBuffer.append("addto");

            stringBuffer.append(i);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return stringBuffer.toString();
    }

//New
    public String getAddSubActivityList(int curcontactId, int actAccId) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String createdBy = "";
        String totalStream = "";
        int i = 0;

        try {


            queryString = "SELECT Id,ActivityType,Status,Description,DateDue,CreatedDate,AssignedToId,CreatedById,OpportunityId FROM tblCrmActivity";
            queryString = queryString + " WHERE AccountId =" + actAccId + "  ORDER BY CreatedDate DESC";
            //  queryString = "SELECT Id,ActivityType,Status,Description,CreatedDate,CreatedById FROM tblCrmActivity";


            //System.err.print("contactid=0 in add subactivities-->"+queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);


            while (resultSet.next()) {
                String actid = resultSet.getString("Id");
                String actType = resultSet.getString("ActivityType");
                String assignedToId = resultSet.getString("AssignedToId");
                String description = resultSet.getString("Description");
                String datedue = resultSet.getString("DateDue");
                String createdDate = resultSet.getString("CreatedDate");
                String status = resultSet.getString("Status");
                String createdById = resultSet.getString("CreatedById");
                String opportunity = "";
                if (resultSet.getInt("OpportunityId") == 0 || resultSet.getInt("OpportunityId") == -1 || resultSet.getInt("OpportunityId") == -2) {
                    opportunity = "No Opportunity";
                } else {
                    opportunity = DataSourceDataProvider.getInstance().getOpportunityTitle(resultSet.getInt("OpportunityId"));
                }
                i++;

                // totalStream = totalStream + i + "|" + actid + "|" + actType + "|" + assignedToId + "|" + datedue + "|" + createdDate + "|" + description + "|" + status + "|" + "^";
                //totalStream = totalStream + i + "|" + actid + "|" + actType + "|" + createdDate + "|" + description + "|" + status + "|" + createdById + "|" + "^";
                totalStream = totalStream + i + "#^$" + actid + "#^$" + actType + "#^$" + createdDate + "#^$" + description + "#^$" + status + "#^$" + createdById + "#^$" + opportunity + "#^$" + "*@!";


            }



            stringBuffer.append(totalStream);
            stringBuffer.append("addto");

            stringBuffer.append(i);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return stringBuffer.toString();
    }

    //new impl for requirement list
    /**
     * search Action 
     *
     */
    /*  public String getsearchRequirementAjaxList(HttpServletRequest httpServletRequest, AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {
    
    stringBuffer = new StringBuffer();
    CallableStatement callableStatement = null;
    PreparedStatement preparedStatement = null;
    Statement statement = null;
    ResultSet resultSet = null;
    String createdBy = "";
    String totalStream = "";
    String queryString = "";
    int i = 0;
    
    String userWorkCountry = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.WORKING_COUNTRY).toString();
    
    int userRoleId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_ROLE_ID).toString());
    //resultType = "accessFailed";
    
    DateUtility dateUtility = new DateUtility();
    
    // System.out.println(" impl  --- createdBy----------"+ajaxHandlerAction.getCreatedBy()+"--assignedTo-------------"+ajaxHandlerAction.getAssignedTo()+"--title-------------"+ajaxHandlerAction.getTitle()+"--postedDate1-------"+ajaxHandlerAction.getPostedDate1()+"---postedDate2----"+ajaxHandlerAction.getPostedDate2()+"---status----"+ajaxHandlerAction.getStatus());
    
    
    try {
    
    queryStringBuffer = new StringBuffer();
    
    queryStringBuffer.append(" SELECT COUNT(tblRecRequirement.Id) AS resumecount,TRIM(tblRecRequirement .Id) AS RequirementId,TRIM(tblRecConsultant.Id) AS ConsultantId,TRIM(JobTitle) AS JobTitle, ");
    queryStringBuffer.append("CONCAT(tblRecConsultant.FName,'.',tblRecConsultant.LName) AS ConsultantNAME ,");
    queryStringBuffer.append("CONCAT(`tblRecRequirement`.`State`,',',`tblRecRequirement`.`Country`) AS Location,");
    queryStringBuffer.append("tblRecRequirement .STATUS AS status,tblRec.CreatedDate as SubmittedDate,");
    queryStringBuffer.append("tblRecRequirement.AssignedDate as AssignedDate,tblRecRequirement.NoResumes AS noofresumes,");
    queryStringBuffer.append("AssignedTo AS Recruiter,SecondaryRecruiter AS SecondaryRecruiter,AssignToTechLead AS PreSales,");
    queryStringBuffer.append("Skills FROM tblRecRequirement LEFT JOIN(tblRecConsultant, tblRec)");
    queryStringBuffer.append("ON (tblRecRequirement.Id=tblRec.RequirementId AND tblRecConsultant.Id=tblRec.ConsultantId) ");
    
    if (null == ajaxHandlerAction.getCreatedBy()) {
    ajaxHandlerAction.setCreatedBy("");
    }
    if ("All".equalsIgnoreCase(ajaxHandlerAction.getCreatedBy())) {
    ajaxHandlerAction.setCreatedBy("");
    }
    if (null == ajaxHandlerAction.getAssignedTo()) {
    ajaxHandlerAction.setAssignedTo("");
    }
    if ("All".equalsIgnoreCase(ajaxHandlerAction.getAssignedTo())) {
    ajaxHandlerAction.setAssignedTo("");
    }
    if (null == ajaxHandlerAction.getStatus()) {
    ajaxHandlerAction.setStatus("");
    }
    if ("All".equalsIgnoreCase(ajaxHandlerAction.getStatus())) {
    ajaxHandlerAction.setStatus("");
    }
    if (null == ajaxHandlerAction.getTitle()) {
    ajaxHandlerAction.setTitle("");
    }
    if (null == ajaxHandlerAction.getPostedDate1()) {
    ajaxHandlerAction.setPostedDate1("");
    }
    if (null == ajaxHandlerAction.getPostedDate2()) {
    ajaxHandlerAction.setPostedDate2("");
    }
    //commented by prasad
    if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1())) {
    ajaxHandlerAction.setPostedDate1(DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getPostedDate1()));
    }
    
    if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2())) {
    ajaxHandlerAction.setPostedDate2(DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getPostedDate2()));
    }
    
    if ((!"".equalsIgnoreCase(ajaxHandlerAction.getCreatedBy())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getAssignedTo())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getStatus())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getTitle())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()))) {
    queryStringBuffer.append(" WHERE ");
    }
    
    int columnCounter = 0;
    
    if (!"".equalsIgnoreCase(ajaxHandlerAction.getCreatedBy()) && columnCounter == 0) {
    if ((ajaxHandlerAction.getCreatedBy().indexOf("*") == -1) && (ajaxHandlerAction.getCreatedBy().indexOf("%") == -1)) {
    ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy() + "*");
    }
    ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy().replace("*", "%"));
    queryStringBuffer.append("`tblRecRequirement`.`CreatedBy` LIKE '" + ajaxHandlerAction.getCreatedBy() + "'");
    columnCounter++;
    
    ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy().replace("%", ""));
    } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getCreatedBy()) && columnCounter != 0) {
    if ((ajaxHandlerAction.getCreatedBy().indexOf("*") == -1) && (ajaxHandlerAction.getCreatedBy().indexOf("%") == -1)) {
    ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy() + "*");
    }
    ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy().replace("*", "%"));
    queryStringBuffer.append("AND `tblRecRequirement`.`CreatedBy` LIKE '" + ajaxHandlerAction.getCreatedBy() + "'");
    columnCounter++;
    
    ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy().replace("%", ""));
    }
    
    if (!"".equalsIgnoreCase(ajaxHandlerAction.getAssignedTo()) && columnCounter == 0) {
    if ((ajaxHandlerAction.getAssignedTo().indexOf("*") == -1) && (ajaxHandlerAction.getAssignedTo().indexOf("%") == -1)) {
    ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo() + "*");
    }
    ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo().replace("*", "%"));
    queryStringBuffer.append("`tblRecRequirement`.`AssignedTo` LIKE '" + ajaxHandlerAction.getAssignedTo() + "'");
    columnCounter++;
    
    ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo().replace("%", ""));
    } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getAssignedTo()) && columnCounter != 0) {
    if ((ajaxHandlerAction.getAssignedTo().indexOf("*") == -1) && (ajaxHandlerAction.getAssignedTo().indexOf("%") == -1)) {
    ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo() + "*");
    }
    ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo().replace("*", "%"));
    queryStringBuffer.append("AND `tblRecRequirement`.`AssignedTo` LIKE '" + ajaxHandlerAction.getAssignedTo() + "'");
    columnCounter++;
    
    ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo().replace("%", ""));
    }
    
    if (!"".equalsIgnoreCase(ajaxHandlerAction.getStatus()) && columnCounter == 0) {
    if ((ajaxHandlerAction.getStatus().indexOf("*") == -1) && (ajaxHandlerAction.getStatus().indexOf("%") == -1)) {
    ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus() + "*");
    }
    ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus().replace("*", "%"));
    queryStringBuffer.append("`tblRecRequirement`.`Status` LIKE '" + ajaxHandlerAction.getStatus() + "'");
    columnCounter++;
    
    ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus().replace("%", ""));
    } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getStatus()) && columnCounter != 0) {
    if ((ajaxHandlerAction.getStatus().indexOf("*") == -1) && (ajaxHandlerAction.getStatus().indexOf("%") == -1)) {
    ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus() + "*");
    }
    ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus().replace("*", "%"));
    queryStringBuffer.append("AND `tblRecRequirement`.`Status` LIKE '" + ajaxHandlerAction.getStatus() + "'");
    columnCounter++;
    
    ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus().replace("%", ""));
    }
    
    if (!"".equalsIgnoreCase(ajaxHandlerAction.getTitle()) && columnCounter == 0) {
    if ((ajaxHandlerAction.getTitle().indexOf("*") == -1) && (ajaxHandlerAction.getTitle().indexOf("%") == -1)) {
    ajaxHandlerAction.setTitle(ajaxHandlerAction.getTitle() + "*");
    }
    ajaxHandlerAction.setTitle(ajaxHandlerAction.getTitle().replace("*", "%"));
    queryStringBuffer.append("`tblRecRequirement`.`JobTitle` LIKE '" + ajaxHandlerAction.getTitle() + "'");
    columnCounter++;
    
    
    } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getTitle()) && columnCounter != 0) {
    if ((ajaxHandlerAction.getTitle().indexOf("*") == -1) && (ajaxHandlerAction.getTitle().indexOf("%") == -1)) {
    ajaxHandlerAction.setTitle(ajaxHandlerAction.getTitle() + "*");
    }
    ajaxHandlerAction.setTitle(ajaxHandlerAction.getTitle().replace("*", "%"));
    queryStringBuffer.append("AND `tblRecRequirement`.`JobTitle` LIKE '" + ajaxHandlerAction.getTitle() + "'");
    columnCounter++;
    }
    
    if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && "".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && columnCounter == 0) {
    if ((ajaxHandlerAction.getPostedDate1().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate1().indexOf("%") == -1)) {
    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1() + "*");
    }
    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1().replace("*", "%"));
    queryStringBuffer.append("date(`tblRecRequirement`.`DatePosted`) LIKE '" + ajaxHandlerAction.getPostedDate1() + "'");
    columnCounter++;
    
    ajaxHandlerAction.setPostedDate1(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate1().replace("%", "")));
    } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && "".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && columnCounter != 0) {
    if ((ajaxHandlerAction.getPostedDate1().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate1().indexOf("%") == -1)) {
    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1() + "*");
    }
    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1().replace("*", "%"));
    queryStringBuffer.append("AND date(`tblRecRequirement`.`DatePosted`) LIKE '" + ajaxHandlerAction.getPostedDate1() + "'");
    columnCounter++;
    
    ajaxHandlerAction.setPostedDate1(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate1().replace("%", "")));
    }
    
    if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && "".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && columnCounter == 0) {
    if ((ajaxHandlerAction.getPostedDate2().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate2().indexOf("%") == -1)) {
    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2() + "*");
    }
    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2().replace("*", "%"));
    queryStringBuffer.append("date(`tblRecRequirement`.`DatePosted`) LIKE '" + ajaxHandlerAction.getPostedDate2() + "'");
    columnCounter++;
    
    ajaxHandlerAction.setPostedDate2(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate2().replace("%", "")));
    } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && "".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && columnCounter != 0) {
    if ((ajaxHandlerAction.getPostedDate2().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate2().indexOf("%") == -1)) {
    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2() + "*");
    }
    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2().replace("*", "%"));
    queryStringBuffer.append("AND date(`tblRecRequirement`.`DatePosted`) LIKE '" + ajaxHandlerAction.getPostedDate2() + "'");
    columnCounter++;
    
    ajaxHandlerAction.setPostedDate2(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate2().replace("%", "")));
    }
    
    if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && !"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && columnCounter == 0) {
    if ((ajaxHandlerAction.getPostedDate1().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate1().indexOf("%") == -1)) {
    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1() + "*");
    }
    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1().replace("*", "%"));
    
    if ((ajaxHandlerAction.getPostedDate2().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate2().indexOf("%") == -1)) {
    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2() + "*");
    }
    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2().replace("*", "%"));
    
    queryStringBuffer.append("date(`tblRecRequirement`.`DatePosted`) BETWEEN '" + ajaxHandlerAction.getPostedDate1() + "' AND '" + ajaxHandlerAction.getPostedDate2() + "'");
    columnCounter++;
    
    ajaxHandlerAction.setPostedDate1(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate1().replace("%", "")));
    ajaxHandlerAction.setPostedDate2(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate2().replace("%", "")));
    
    } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && !"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && columnCounter != 0) {
    if ((ajaxHandlerAction.getPostedDate1().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate1().indexOf("%") == -1)) {
    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1() + "*");
    }
    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1().replace("*", "%"));
    
    if ((ajaxHandlerAction.getPostedDate2().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate2().indexOf("%") == -1)) {
    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2() + "*");
    }
    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2().replace("*", "%"));
    
    queryStringBuffer.append("AND date(`tblRecRequirement`.`DatePosted`) BETWEEN '" + ajaxHandlerAction.getPostedDate1() + "' AND '" + ajaxHandlerAction.getPostedDate2() + "'");
    columnCounter++;
    
    ajaxHandlerAction.setPostedDate1(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate1().replace("%", "")));
    ajaxHandlerAction.setPostedDate2(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate2().replace("%", "")));
    }
    if (columnCounter == 0) {//queryStringBuffer.append(" Where `tblRecRequirement`.`Country` like '"+userWorkCountry+"' ORDER BY date(`tblRecRequirement`.`DatePosted`),Country DESC"); ,tblRecRequirement.Country
    queryStringBuffer.append(" Where `tblRecRequirement`.`Country` like '" + userWorkCountry + "' GROUP BY tblRecRequirement.Id ORDER BY date(`tblRecRequirement`.`DatePosted`) DESC Limit 100");
    } else {
    //queryStringBuffer.append(" AND `tblRecRequirement`.`Country` like '"+userWorkCountry+"' ORDER BY date(`tblRecRequirement`.`DatePosted`),Country DESC");,tblRecRequirement.Country
    queryStringBuffer.append(" AND `tblRecRequirement`.`Country` like '" + userWorkCountry + "' GROUP BY tblRecRequirement.Id ORDER BY date(`tblRecRequirement`.`DatePosted`) DESC Limit 100");
    // httpServletRequest.getSession(false).setAttribute(ApplicationConstants.QUERY_STRING,queryStringBuffer.toString());
    }
    
    httpServletRequest.getSession(false).setAttribute("REQ_SEARCH_QUERY", queryStringBuffer.toString());
    //System.out.println("REQ_SEARCH_QUERY --->"+REQ_SEARCH_QUERY);
    
    
    //  System.out.println("query String for List ---"+queryStringBuffer.toString());
    
    connection = ConnectionProvider.getInstance().getConnection();
    statement = connection.createStatement();
    resultSet = statement.executeQuery(queryStringBuffer.toString());
    
    //System.err.println("Account Activities:"+queryString);
    while (resultSet.next()) {
    
    int resumeCount = resultSet.getInt("resumecount");
    int RequirementId = resultSet.getInt("RequirementId");
    
    int ConsultantId = resultSet.getInt("ConsultantId");
    String JobTitle = resultSet.getString("JobTitle");
    
    String ConsultantNAME = resultSet.getString("ConsultantNAME");
    
    String Location = resultSet.getString("Location");
    
    String status = resultSet.getString("status");
    
    String SubmittedDate = resultSet.getString("SubmittedDate");
    String AssignedDate = resultSet.getString("AssignedDate");
    
    
    int noofresumes = resultSet.getInt("noofresumes");
    
    String Recruiter = "-";
    if (resultSet.getString("Recruiter") != null || resultSet.getString("Recruiter") != "") {
    Recruiter = resultSet.getString("Recruiter");
    }
    
    
    String SecondaryRecruiter = "-";
    if (resultSet.getString("SecondaryRecruiter") != null || resultSet.getString("SecondaryRecruiter") != "") {
    SecondaryRecruiter = resultSet.getString("SecondaryRecruiter");
    }
    
    String PreSales = "-";
    if (resultSet.getString("PreSales") != null || resultSet.getString("PreSales") != "") {
    PreSales = resultSet.getString("PreSales");
    }
    
    
    String Skills = resultSet.getString("Skills");
    
    
    
    i++;
    
    //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+status+"|"+datedue+"|"+contactId+"|"+accountId+"|"+"^";
    //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+status+"|"+datedue+"|"+"^";
    totalStream = totalStream + i + "|" + resumeCount + "|" + RequirementId + "|" + ConsultantId + "|" + JobTitle + "|" + ConsultantNAME + "|" + Location + "|" + status + "|" + SubmittedDate + "|" + AssignedDate + "|" + noofresumes + "|" + Recruiter + "|" + SecondaryRecruiter + "|" + PreSales + "|" + PreSales + "|" + Skills + "^";
    //  totalActivities=totalActivities+count;
    }
    stringBuffer.append(totalStream);
    stringBuffer.append("addto");
    
    stringBuffer.append(i);
    
    } catch (Exception sqe) {
    sqe.printStackTrace();
    } finally {
    try {
    if (resultSet != null) {
    resultSet.close();
    resultSet = null;
    }
    if (statement != null) {
    statement.close();
    statement = null;
    }
    if (connection != null) {
    connection.close();
    connection = null;
    }
    } catch (SQLException sqle) {
    }
    }
    // System.err.println("response string is"+stringBuffer.toString());
    return stringBuffer.toString();
    }*/

    /*
     *
     *New Action for territory and states List/
     */
    public String getTeritoryAndStatesList(String empId, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        DataSourceDataProvider dataSourceDataProvider = null;
        String resultString = null;
        StringBuffer sb = new StringBuffer();
        try {
            List teritory = dataSourceDataProvider.getInstance().getTeritoryList(empId, httpServletRequest);
            List statesList = dataSourceDataProvider.getInstance().getStatesListByLoginId(empId, httpServletRequest);
            //System.out.println("teritory--->"+teritory.toString());
            //System.out.println("states--->"+statesList.toString());
            ListIterator litrForTert = teritory.listIterator();
            ListIterator litrForStates = statesList.listIterator();
            int count = 0;
            sb.append("<xml version=\"1.0\">");
            sb.append("<TERITORY>");

            while (litrForTert.hasNext()) {
                Object element = litrForTert.next();
                sb.append("<TERITORYNAME>" + element + "</TERITORYNAME>");
                //litr.set(element + "+");
                count++;
            }
            sb.append("<TERITORYCOUNT>" + count + "</TERITORYCOUNT>");
            sb.append("</TERITORY>");


            count = 0;

            sb.append("<STATES>");

            while (litrForStates.hasNext()) {
                Object element = litrForStates.next();
                sb.append("<STATENAME>" + element + "</STATENAME>");
                //litr.set(element + "+");
                count++;
            }
            sb.append("<STATECOUNT>" + count + "</STATECOUNT>");
            sb.append("</STATES>");


            sb.append("</xml>");

            resultString = " list";

            //System.out.pritnln("teritory --->"+teritory);  
        } catch (Exception e) {

            throw new ServiceLocatorException(e);

        } finally {
            /* try{
            if(callableStatement!=null){
            callableStatement.close();
            callableStatement = null;
            }
            if(connection!= null){
            connection.close();
            connection = null;
            }
            }catch (SQLException ex) {
            throw new ServiceLocatorException(ex);
            } */
        }
        //System.out.println("String --->"+sb.toString());
        return sb.toString();


    }

    //new on 10162012 for assign Accounts for BDM
    /**
     * Author : Nagireddy seerapu
     * Description : returns the list of account for BDM.
     * 
     */
    public String getAccounts(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest, String bdmLoginId) throws ServiceLocatorException {
        String queryString = null;
        String resultString = "";
        String resultString1 = "";
        String state = "";
        String salesRepTerritory = "";
        //  CallableStatement callableStatement = null;
        //  DataSourceDataProvider dataSourceDataProvider = null;
        CallableStatement callableStatement = null;
        try {
            connection = ConnectionProvider.getInstance().getConnection();

            String accountName = ajaxHandlerAction.getAccountName();
            accountName = accountName.trim();

            if (!ajaxHandlerAction.getState1().equals(" ")) {
                state = "'" + ajaxHandlerAction.getState1() + "'";
            }

            if (!ajaxHandlerAction.getState2().equals(" ")) {
                state = state + ",'" + ajaxHandlerAction.getState2() + "'";
            }

            if (!ajaxHandlerAction.getState3().equals(" ")) {
                state = state + ",'" + ajaxHandlerAction.getState3() + "'";
            }

            if (!ajaxHandlerAction.getState4().equals(" ")) {
                state = state + ",'" + ajaxHandlerAction.getState4() + "'";
            }

            if (!ajaxHandlerAction.getState5().equals(" ")) {
                state = state + ",'" + ajaxHandlerAction.getState5() + "'";
            }


            // territory Based query ..
           /*queryString = "SELECT DISTINCT tblCrmAccountTeam.AccountId AS Id, tblCrmAccount.NAME AS " +
            "AccountName FROM tblCrmAccount, tblCrmAccountTeam, tblCrmAddress " +
            "WHERE tblCrmAccount.Id = tblCrmAccountTeam.AccountId AND tblCrmAccount.PrimaryAddressId = tblCrmAddress.Id " +
            "AND tblCrmAccount.Teritory LIKE '"+ajaxHandlerAction.getTerritory()+"' AND tblCrmAddress.state IN ("+state+")  " +
            "AND tblCrmAccountTeam.AccountId NOT IN (SELECT DISTINCT AccountId FROM tblCrmAccountTeam WHERE tblCrmAccountTeam.TeamMemberId = '"+bdmLoginId+"') " +
            "AND tblCrmAccount.NAME LIKE '"+accountName+"%'AND tblCrmAddress.objectType LIKE 'Account' ORDER BY tblCrmAccountTeam.accountId limit 18";*/

            // region based query .....

            queryString = "SELECT DISTINCT tblCrmAccountTeam.AccountId AS Id, tblCrmAccount.NAME AS "
                    + "AccountName FROM tblCrmAccount, tblCrmAccountTeam, tblCrmAddress "
                    + "WHERE tblCrmAccount.Id = tblCrmAccountTeam.AccountId AND tblCrmAccount.PrimaryAddressId = tblCrmAddress.Id "
                    + "AND tblCrmAccount.Region LIKE '" + ajaxHandlerAction.getRegion() + "' AND tblCrmAddress.state IN (" + state + ")  "
                    + "AND tblCrmAccountTeam.AccountId NOT IN (SELECT DISTINCT AccountId FROM tblCrmAccountTeam WHERE tblCrmAccountTeam.TeamMemberId = '" + bdmLoginId + "') "
                    + "AND tblCrmAccount.NAME LIKE '" + accountName + "%'AND tblCrmAddress.objectType LIKE 'Account' ORDER BY tblCrmAccountTeam.accountId limit 50";


            //System.out.println("queryString-->"+queryString);

            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            String strId = "";
            String strAccountName = "";
            while (resultSet.next()) {
                strId = strId + resultSet.getInt("Id") + "!";
                strAccountName = strAccountName + resultSet.getString("accountName").replace("&amp;", " ") + "!";
                /* resultString = resultString + resultSet.getInt("Id")+"!";
                resultString = resultString + resultSet.getString("accountName")+"!";
                resultString = resultString +"@";*/
            }
            resultString1 = strId + "@" + strAccountName;

        } catch (Exception e) {

            throw new ServiceLocatorException(e);

        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                throw new ServiceLocatorException(ex);
            }
        }

        // return resultString;
        return resultString1;
    }

    //new on 10162012 for assign Accounts for BDM
    /**
     * Author : Nagireddy seerapu
     * Des:  To set BDM as secondry sales person using login Id (BDM).
     */
    public String accountSearchUpdatebdm(String accIds, String loginId) throws ServiceLocatorException {
        // public String accountSearchUpdatebdm(String accIds, String loginId, String accountNames, String reportsTo)throws ServiceLocatorException {
        String queryString = null;
        int count = 0;
        int updatedRows = 0;
        String returnStmt = "FAILURE";
        CallableStatement callableStatement = null;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            // System.out.println("in service impl --accountIds-->"+accIds+"-------loginId---->"+loginId);
            int countOfOccurrence = CountOfOccurrence(accIds, "!");
            //System.out.println("count --->"+countOfOccurrence);
            //  String tempAccNames[] =  accountNames.split("@");
            callableStatement = connection.prepareCall("{call spTransferTeritoryAccounts(?,?,?,?)}");
            callableStatement.setString(1, accIds);
            callableStatement.setString(2, loginId);
            callableStatement.setInt(3, countOfOccurrence);
            callableStatement.registerOutParameter(4, Types.VARCHAR);

            resultSet = callableStatement.executeQuery();
            queryString = callableStatement.getString(4);
            // MailManager.sendAssignedAccountDetails(loginId,tempAccNames,countOfOccurrence, reportsTo);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }

        return queryString;
    }

    public String getEmpTerritory(String practiceName) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        practiceId = practiceName;

        //System.out.println("practiceName  "+  practiceName);

        try {
            if (practiceName.equals("All")) {
                queryString = "select description from tblLKSubPractice";
            } else {
                queryString = "select description from tblLKSubPractice where PracticeId in "
                        + " (select id from tblLKPractice where Description=" + "'" + practiceName + "')";
            }
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            //stringBuffer.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
            stringBuffer.append("<xml version=\"1.0\">");
            stringBuffer.append("<PRACTICE Description=\"" + practiceName + "\">");
            stringBuffer.append("<SUBPRACTICE>--Please Select--</SUBPRACTICE>");
            if (!practiceName.equalsIgnoreCase("East") && !practiceName.equalsIgnoreCase("West") && !practiceName.equalsIgnoreCase("Central")) {
                stringBuffer.append("<SUBPRACTICE>All</SUBPRACTICE>");
            }
            while (resultSet.next()) {
                //System.out.println("description  "+ resultSet.getString("description"));
                stringBuffer.append("<SUBPRACTICE att=\"\">" + resultSet.getString("description") + "</SUBPRACTICE>");
            }
            stringBuffer.append("</PRACTICE>");
            stringBuffer.append("</xml>");

        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }

        }
        return stringBuffer.toString();
    }

    /*
     * Author:
     * Desc: Returns the List of States.
     *
     */
    public String getStatesByTerritory(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {
        String queryString = null;
        int count = 0;
        int updatedRows = 0;
        String states = null;


        try {
            connection = ConnectionProvider.getInstance().getConnection();
            queryString = "SELECT state1,state2,state3,state4,state5 FROM tblLKTerritory WHERE  Description = '" + ajaxHandlerAction.getTerritory() + "'";
            //System.out.println("territory-->"+ajaxHandlerAction.getTerritory());
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();


            if (resultSet.next()) {

                //  System.out.println(resultSet.getString("state1")+"!"+resultSet.getString("state2")+"!"+resultSet.getString("state3")+"!"+resultSet.getString("state4")+"!"+resultSet.getString("state5"));
                states = resultSet.getString("state1") + "!" + resultSet.getString("state2") + "!" + resultSet.getString("state3") + "!" + resultSet.getString("state4") + "!" + resultSet.getString("state5");

            } else {
                states = "No States";
            }


        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    connection = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    connection = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }

        return states;


    }

    /**
     * To get the count of Occurrence of delimiter in given string. 
     *
     */
    public int CountOfOccurrence(String str, String delimiter) {
        //  public static void main(String args[]){
        int count = 0;
        String searchFor = delimiter;
        String base = str;
        int start = base.indexOf(searchFor);
        int len = searchFor.length();
        if (len > 0) {
            while (start != -1) {
                count++;
                start = base.indexOf(searchFor, start + len);
            }
        }

        // System.out.println(count);

        return count;
    }

    /**
     *
     * This method is used to get the ProjectNamesList of a Account/Customer
     * @param accId
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getProjectNamesList(String accId, String projectName) throws ServiceLocatorException {
        StringBuffer reportsToBuffer = new StringBuffer();
        String projectId = null;
        boolean isGetting = false;
        String topManagementPeople[] = null;
        boolean isTopManager = false;
//        queryString = "SELECT LoginId,FName,MName,LName FROM tblEmployee WHERE DepartmentId='"+deptName+"' AND (IsManager=1 OR IsTeamLead=1) AND CurStatus='Active' ORDER BY FName";
        queryString = "Select  Id,ProjectName FROM tblProjects";
        queryString = queryString + " WHERE CustomerId=" + accId + " AND ProjectName LIKE '" + projectName + "%' ORDER BY ProjectName DESC";

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();


            int count = 0;
            reportsToBuffer.append("<xml version=\"1.0\">");
            reportsToBuffer.append("<EMPLOYEES>");
            while (resultSet.next()) {
                reportsToBuffer.append("<EMPLOYEE><VALID>true</VALID>");

                if (resultSet.getString(2) == null || resultSet.getString(2).equals("")) {
                    reportsToBuffer.append("<NAME>NoRecord</NAME>");
                } else {
                    String title = resultSet.getString(2);
                    if (title.contains("&")) {
                        title = title.replace("&", "&amp;");
                    }
                    reportsToBuffer.append("<NAME>" + title + "</NAME>");
                }
                //sb.append("<NAME>" +resultSet.getString(1) + "</NAME>");
                reportsToBuffer.append("<EMPID>" + resultSet.getString(1) + "</EMPID>");
                reportsToBuffer.append("</EMPLOYEE>");
                isGetting = true;
                count++;
            }

            if (!isGetting) {
                //sb.append("<EMPLOYEES>" + sb.toString() + "</EMPLOYEES>");
                //} else {
                isGetting = false;
                //nothing to show
                //  response.setStatus(HttpServletResponse.SC_NO_CONTENT);
                reportsToBuffer.append("<PROJECT><VALID>false</VALID></PROJECT>");
            }
            reportsToBuffer.append("</EMPLOYEES>");
            reportsToBuffer.append("</xml>");

            // System.out.println("XML-->"+reportsToBuffer);
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        //System.out.println("Team List: "+reportsToBuffer.toString());
        return reportsToBuffer.toString();
    }

    //newly added on 06072013
    /**
     *
     * This method is used to get the EmployeeDetails
     * @param query
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String getEmployeeDetails(String query) throws ServiceLocatorException {
        boolean isGetting = false;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        StringBuffer sb = new StringBuffer();
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();
            // System.out.println("query-->"+query);
            int count = 0;

            sb.append("<xml version=\"1.0\">");
            sb.append("<EMPLOYEES>");
            while (resultSet.next()) {
                sb.append("<EMPLOYEE><VALID>true</VALID>");

                if (resultSet.getString(1) == null || resultSet.getString(1).equals("")) {
                    sb.append("<NAME>NoRecord</NAME>");
                } else {
                    String title = resultSet.getString(1);
                    if (title.contains("&")) {
                        title = title.replace("&", "&amp;");
                    }
                    sb.append("<NAME>" + title + "</NAME>");
                }
                //sb.append("<NAME>" +resultSet.getString(1) + "</NAME>");
                sb.append("<EMPID>" + resultSet.getString(2) + "</EMPID>");
                sb.append("</EMPLOYEE>");
                isGetting = true;
                count++;
            }

            if (!isGetting) {
                //sb.append("<EMPLOYEES>" + sb.toString() + "</EMPLOYEES>");
                //} else {
                isGetting = false;
                //nothing to show
                //  response.setStatus(HttpServletResponse.SC_NO_CONTENT);
                sb.append("<EMPLOYEE><VALID>false</VALID></EMPLOYEE>");
            }
            sb.append("</EMPLOYEES>");
            sb.append("</xml>");
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        return sb.toString();
    }

    /**
     *
     * This method is used to populat the Issue Comments
     * @param accId
     * @return String
     * @throws com.mss.mirage.util.ServiceLocatorException
     */
    public String popupIssueComments(int issueId) throws ServiceLocatorException {
        String activityDesc = null;

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            //SELECT Comments FROM tblEmpIssues WHERE Id=810
            preparedStatement = connection.prepareStatement("SELECT Comments FROM tblEmpIssues WHERE Id=" + issueId);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                activityDesc = resultSet.getString("Comments");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return activityDesc;
    }

    public String popupTaskDesc(int issueId) throws ServiceLocatorException {
        String activityDesc = null;

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            //SELECT Comments FROM tblEmpIssues WHERE Id=810
            preparedStatement = connection.prepareStatement("SELECT Description FROM tblEmpTasks WHERE Id=" + issueId);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                activityDesc = resultSet.getString("Description");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return activityDesc;
    }
    /*
     *Ecertification method
     *Date : 07/18/2013
     */

    public String getTopicNamesBasedOnDomain(int domainId) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        boolean isGetting = false;
        queryString = "Select ID,TopicName from tblEcertTopics where DomainId = " + domainId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            //stringBuffer.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
            /*** =====================================================================================*/
            int count = 0;
            String topicName = "";
            stringBuffer.append("<xml version=\"1.0\">");
            stringBuffer.append("<TOPICS>");
            stringBuffer.append("<TOPIC TOPICID=\"-1\">");
            stringBuffer.append("--Please select--");
            stringBuffer.append("</TOPIC>");
            while (resultSet.next()) {
                //  stringBuffer.append("<TOPIC><VALID>true</VALID>");

                topicName = resultSet.getString(2);
                if (topicName != null && !"".equals(topicName)) {
                    stringBuffer.append("<TOPIC TOPICID=\"" + resultSet.getString(1) + "\">");

                    if (topicName.contains("&")) {
                        topicName = topicName.replaceAll("&", "&amp;");
                    }
                    stringBuffer.append(topicName);
                    stringBuffer.append("</TOPIC>");
                    isGetting = true;
                    count++;
                }

                // stringBuffer.append("<TOPICID>" +resultSet.getString(1) + "</TOPICID>");
                //  stringBuffer.append("</TOPIC>");

            }

            if (!isGetting) {
                //sb.append("<EMPLOYEES>" + sb.toString() + "</EMPLOYEES>");
                //} else {
                isGetting = false;
                //nothing to show
                //  response.setStatus(HttpServletResponse.SC_NO_CONTENT);
                //stringBuffer.append("<TOPIC TOPICID=\" \"><VALID>false</VALID></TOPIC>");
            }
            stringBuffer.append("</TOPICS>");
            stringBuffer.append("</xml>");

            /** ==========================================================================================*/
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }

        }
        //System.out.println("Practice List: "+stringBuffer.toString());
        return stringBuffer.toString();
    }

    /*
    public String getQuestion(int questionNo ,HttpServletRequest httpServletRequest,int selectedAns, String navigation,int remainingQuestions,int onClickStatus,int subTopicId) throws ServiceLocatorException {
    
    StringBuffer stringBuffer = new StringBuffer();
    QuestionsVTO questionVTO = null,nextQuestionVTO = null,previousQuestionVTO = null,startQuestionVTO = null;
    int empId = 0, examKeyId = 0,answer = 0,attemptedQuestions = 0,questionId = 0;
    
    try {
    empId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_ID).toString());
    examKeyId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.ECERT_CURRENT_EXAM_KEY).toString());
    Map questionVtoMap = (Map)httpServletRequest.getSession(false).getAttribute(ApplicationConstants.ECERT_QUESTIONS_MAP);
    
    if(navigation.equalsIgnoreCase("I")){
    int qId = 0;
    
    startQuestionVTO = (QuestionsVTO)questionVtoMap.get(1);
    int startQId = startQuestionVTO.getId();
    
    int mapsize = questionVtoMap.size();
    remainingQuestions =  mapsize;
    
    
    int startQuestionNo =  1;
    stringBuffer.append("<xml version=\"1.0\">");
    stringBuffer.append("<QUESTIONDETAILS >");
    stringBuffer.append("<QUESTIONSTATUS>true</QUESTIONSTATUS>");
    stringBuffer.append("<QUESTIONID>"+startQId+"</QUESTIONID>");
    stringBuffer.append("<QUESTIONNAME><![CDATA["+startQuestionVTO.getQuestion()+"]]></QUESTIONNAME>");
    stringBuffer.append("<OPTION1><![CDATA["+startQuestionVTO.getOption1()+"]]></OPTION1>");
    stringBuffer.append("<OPTION2><![CDATA["+startQuestionVTO.getOption2()+"]]></OPTION2>");
    stringBuffer.append("<OPTION3><![CDATA["+startQuestionVTO.getOption3()+"]]></OPTION3>");
    stringBuffer.append("<OPTION4><![CDATA["+startQuestionVTO.getOption4()+"]]></OPTION4>");
    
    stringBuffer.append("<MAPQUESTIONID>"+startQuestionNo+"</MAPQUESTIONID>");
    stringBuffer.append("<EMPANSWER>"+answer+"</EMPANSWER>");
    stringBuffer.append("<SUBTOPICID>"+startQuestionVTO.getSubtopicId()+"</SUBTOPICID>");
    stringBuffer.append("<REMAININGQUESTIONS>"+remainingQuestions+"</REMAININGQUESTIONS>");
    if(!"".equals(startQuestionVTO.getSubTopicName())) {
    stringBuffer.append("<SECTION>"+startQuestionVTO.getSubTopicName()+"</SECTION>");
    }
    stringBuffer.append("</QUESTIONDETAILS>");
    stringBuffer.append("</xml>");
    
    
    }
    
    else if(navigation.equalsIgnoreCase("N")){
    int qId = 0;
    nextQuestionVTO = (QuestionsVTO)questionVtoMap.get(questionNo+1);
    int nextQId = nextQuestionVTO.getId();
    
    if(onClickStatus != 0 ){
    questionVTO = (QuestionsVTO)questionVtoMap.get(questionNo);
    qId = questionVTO.getId();
    
    attemptedQuestions = DataSourceDataProvider.getInstance().isQuestionAttempt(examKeyId,qId);
    }
    
    else {
    //if(onClickStatus == 0 ){
    int mapsize = questionVtoMap.size();
    remainingQuestions =  mapsize;
    }
    
    if(selectedAns!=0) {
    if(attemptedQuestions==0){
    insertAnswer(qId,selectedAns,empId,examKeyId,subTopicId);
    remainingQuestions = remainingQuestions - 1;
    }else{
    updateAnswer(qId,selectedAns,empId,examKeyId);
    }
    }
    
    if(questionNo < questionVtoMap.size()){
    answer = DataSourceDataProvider.getInstance().getAnswer(examKeyId,nextQId,empId);
    }
    
    
    int nextQuestionNo = questionNo + 1;
    stringBuffer.append("<xml version=\"1.0\">");
    stringBuffer.append("<QUESTIONDETAILS >");
    stringBuffer.append("<QUESTIONSTATUS>true</QUESTIONSTATUS>");
    stringBuffer.append("<QUESTIONID>"+nextQId+"</QUESTIONID>");
    stringBuffer.append("<QUESTIONNAME><![CDATA["+nextQuestionVTO.getQuestion()+"]]></QUESTIONNAME>");
    stringBuffer.append("<OPTION1><![CDATA["+nextQuestionVTO.getOption1()+"]]></OPTION1>");
    stringBuffer.append("<OPTION2><![CDATA["+nextQuestionVTO.getOption2()+"]]></OPTION2>");
    stringBuffer.append("<OPTION3><![CDATA["+nextQuestionVTO.getOption3()+"]]></OPTION3>");
    stringBuffer.append("<OPTION4><![CDATA["+nextQuestionVTO.getOption4()+"]]></OPTION4>");
    
    stringBuffer.append("<MAPQUESTIONID>"+nextQuestionNo+"</MAPQUESTIONID>");
    stringBuffer.append("<EMPANSWER>"+answer+"</EMPANSWER>");
    stringBuffer.append("<SUBTOPICID>"+nextQuestionVTO.getSubtopicId()+"</SUBTOPICID>");
    stringBuffer.append("<REMAININGQUESTIONS>"+remainingQuestions+"</REMAININGQUESTIONS>");
    if(!"".equals(nextQuestionVTO.getSubTopicName())) {
    stringBuffer.append("<SECTION>"+nextQuestionVTO.getSubTopicName()+"</SECTION>");
    }
    stringBuffer.append("</QUESTIONDETAILS>");
    stringBuffer.append("</xml>");
    
    
    }
    
    
    else if(navigation.equalsIgnoreCase("P")){
    questionVTO = (QuestionsVTO)questionVtoMap.get(questionNo);
    int qId = questionVTO.getId();
    
    attemptedQuestions = DataSourceDataProvider.getInstance().isQuestionAttempt(examKeyId,qId);
    previousQuestionVTO = (QuestionsVTO)questionVtoMap.get(questionNo-1);
    int prevoiusQId = previousQuestionVTO.getId();
    
    if(selectedAns!=0) {
    if(attemptedQuestions==0){
    insertAnswer(qId,selectedAns,empId,examKeyId,subTopicId);
    remainingQuestions = remainingQuestions - 1;
    }else{
    updateAnswer(qId,selectedAns,empId,examKeyId);
    }
    }
    answer = DataSourceDataProvider.getInstance().getAnswer(examKeyId,prevoiusQId,empId);
    
    
    int previousQuestionNo = questionNo - 1; 
    stringBuffer.append("<xml version=\"1.0\">");
    stringBuffer.append("<QUESTIONDETAILS >");
    stringBuffer.append("<QUESTIONSTATUS>true</QUESTIONSTATUS>");
    stringBuffer.append("<QUESTIONID>"+prevoiusQId+"</QUESTIONID>");
    stringBuffer.append("<QUESTIONNAME><![CDATA["+previousQuestionVTO.getQuestion()+"]]></QUESTIONNAME>");
    stringBuffer.append("<OPTION1><![CDATA["+previousQuestionVTO.getOption1()+"]]></OPTION1>");
    stringBuffer.append("<OPTION2><![CDATA["+previousQuestionVTO.getOption2()+"]]></OPTION2>");
    stringBuffer.append("<OPTION3><![CDATA["+previousQuestionVTO.getOption3()+"]]></OPTION3>");
    stringBuffer.append("<OPTION4><![CDATA["+previousQuestionVTO.getOption4()+"]]></OPTION4>");
    
    
    stringBuffer.append("<MAPQUESTIONID>"+previousQuestionNo+"</MAPQUESTIONID>");
    stringBuffer.append("<EMPANSWER>"+answer+"</EMPANSWER>");
    stringBuffer.append("<SUBTOPICID>"+previousQuestionVTO.getSubtopicId()+"</SUBTOPICID>");
    stringBuffer.append("<REMAININGQUESTIONS>"+remainingQuestions+"</REMAININGQUESTIONS>");
    if(!"".equals(previousQuestionVTO.getSubTopicName())) {
    stringBuffer.append("<SECTION>"+previousQuestionVTO.getSubTopicName()+"</SECTION>");
    }
    stringBuffer.append("</QUESTIONDETAILS>");
    stringBuffer.append("</xml>");
    
    
    }
    
    
    else if (navigation.equalsIgnoreCase("S")){
    
    questionVTO = (QuestionsVTO)questionVtoMap.get(questionNo);
    int qId = questionVTO.getId();
    
    attemptedQuestions = DataSourceDataProvider.getInstance().isQuestionAttempt(examKeyId,qId);
    if(onClickStatus == 0 ){
    int mapsize = questionVtoMap.size();
    remainingQuestions =  mapsize;
    }
    
    if(selectedAns!=0) {
    if(attemptedQuestions==0){
    insertAnswer(qId,selectedAns,empId,examKeyId,subTopicId);
    remainingQuestions = remainingQuestions - 1;
    }else{
    updateAnswer(qId,selectedAns,empId,examKeyId);
    }
    }
    stringBuffer.append("<xml version=\"1.0\">");
    stringBuffer.append("<QUESTIONDETAILS >");
    stringBuffer.append("<QUESTIONSTATUS>false</QUESTIONSTATUS>");
    stringBuffer.append("<REMAININGQUESTIONS>"+remainingQuestions+"</REMAININGQUESTIONS>");
    stringBuffer.append("</QUESTIONDETAILS>");
    stringBuffer.append("</xml>");
    }
    
    
    
    } catch (Exception sle){
    sle.printStackTrace();
    }   
    return stringBuffer.toString();
    
    }
     */
    /*
     * 
     * Modified By Santosh Kola
     * Modified Date : 03/06/2014
     */
    public String getQuestion(int questionNo, HttpServletRequest httpServletRequest, int selectedAns, String navigation, int remainingQuestions, int onClickStatus, int subTopicId, int specficQuestionNo) throws ServiceLocatorException {


        StringBuffer stringBuffer = new StringBuffer();
        // QuestionsVTO questionVTO = null,nextQuestionVTO = null,previousQuestionVTO = null,startQuestionVTO = null;
        QuestionsVTO questionVTO = null, nextQuestionVTO = null, previousQuestionVTO = null, specificQuestionVTO = null, startQuestionVTO = null;
        int empId = 0, examKeyId = 0, answer = 0, attemptedQuestions = 0, questionId = 0;

        try {
            empId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_ID).toString());
            examKeyId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.ECERT_CURRENT_EXAM_KEY).toString());
            Map questionVtoMap = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.ECERT_QUESTIONS_MAP);
            /*In start Exam Start*/
            if (navigation.equalsIgnoreCase("I")) {
                int qId = 0;
                /*
                if(onClickStatus != 0 ){
                questionVTO = (QuestionsVTO)questionVtoMap.get(questionNo);
                qId = questionVTO.getId();
                
                attemptedQuestions = DataSourceDataProvider.getInstance().isQuestionAttempt(examKeyId,qId);
                }
                 * */

                /**  Display Question */
                startQuestionVTO = (QuestionsVTO) questionVtoMap.get(1);
                int startQId = startQuestionVTO.getId();

                int mapsize = questionVtoMap.size();
                remainingQuestions = mapsize;

                /** XML start **/
                int startQuestionNo = 1;
                stringBuffer.append("<xml version=\"1.0\">");
                stringBuffer.append("<QUESTIONDETAILS >");
                stringBuffer.append("<QUESTIONSTATUS>true</QUESTIONSTATUS>");
                stringBuffer.append("<QUESTIONID>" + startQId + "</QUESTIONID>");
                stringBuffer.append("<QUESTIONNAME><![CDATA[" + startQuestionVTO.getQuestion() + "]]></QUESTIONNAME>");
                stringBuffer.append("<OPTION1><![CDATA[" + startQuestionVTO.getOption1() + "]]></OPTION1>");
                stringBuffer.append("<OPTION2><![CDATA[" + startQuestionVTO.getOption2() + "]]></OPTION2>");
                stringBuffer.append("<OPTION3><![CDATA[" + startQuestionVTO.getOption3() + "]]></OPTION3>");
                stringBuffer.append("<OPTION4><![CDATA[" + startQuestionVTO.getOption4() + "]]></OPTION4>");

                stringBuffer.append("<MAPQUESTIONID>" + startQuestionNo + "</MAPQUESTIONID>");
                stringBuffer.append("<EMPANSWER>" + answer + "</EMPANSWER>");
                stringBuffer.append("<SUBTOPICID>" + startQuestionVTO.getSubtopicId() + "</SUBTOPICID>");
                stringBuffer.append("<REMAININGQUESTIONS>" + remainingQuestions + "</REMAININGQUESTIONS>");
                if (!"".equals(startQuestionVTO.getSubTopicName())) {
                    stringBuffer.append("<SECTION>" + startQuestionVTO.getSubTopicName() + "</SECTION>");
                }
                stringBuffer.append("</QUESTIONDETAILS>");
                stringBuffer.append("</xml>");


            } /*In start exam end*/ /*
             * Getting Specific Question start
             */ else if (navigation.equalsIgnoreCase("R")) {
                int qId = 0;
                /* Insert Question into db */
                // if(onClickStatus != 0 ){
                questionVTO = (QuestionsVTO) questionVtoMap.get(questionNo);
                qId = questionVTO.getId();
                /** answered by user or not */
                attemptedQuestions = DataSourceDataProvider.getInstance().isQuestionAttempt(examKeyId, qId);
                // }
                /**  Display Question */
                // nextQuestionVTO = (QuestionsVTO)questionVtoMap.get(questionNo+1);
                // System.out.println("specficQuestionNo--->"+specficQuestionNo);
                specificQuestionVTO = (QuestionsVTO) questionVtoMap.get(specficQuestionNo);
                //int nextQId = nextQuestionVTO.getId();
                int specificQId = specificQuestionVTO.getId();
                // System.out.println("specificQId--->"+specificQId);
                //  if(onClickStatus == 0 ){
                //      int mapsize = questionVtoMap.size();
                //        remainingQuestions =  mapsize;
                //  }

                if (selectedAns != 0) {
                    if (attemptedQuestions == 0) {
                        insertAnswer(qId, selectedAns, empId, examKeyId, subTopicId);
                        remainingQuestions = remainingQuestions - 1;
                    } else {

                        updateAnswer(qId, selectedAns, empId, examKeyId);
                    }
                }
                //System.out.println("before getting ANSWER specificQId-->"+specificQId);

                // if(questionNo < questionVtoMap.size()){
                answer = DataSourceDataProvider.getInstance().getAnswer(examKeyId, specificQId, empId);
                //}
                //  System.out.println("Answer-->"+answer);

                /** XML start **/
                //  int specificQuestionNo = questionNo + 1;
                stringBuffer.append("<xml version=\"1.0\">");
                stringBuffer.append("<QUESTIONDETAILS >");
                stringBuffer.append("<QUESTIONSTATUS>true</QUESTIONSTATUS>");
                stringBuffer.append("<QUESTIONID>" + specificQId + "</QUESTIONID>");
                stringBuffer.append("<QUESTIONNAME><![CDATA[" + specificQuestionVTO.getQuestion() + "]]></QUESTIONNAME>");
                stringBuffer.append("<OPTION1><![CDATA[" + specificQuestionVTO.getOption1() + "]]></OPTION1>");
                stringBuffer.append("<OPTION2><![CDATA[" + specificQuestionVTO.getOption2() + "]]></OPTION2>");
                stringBuffer.append("<OPTION3><![CDATA[" + specificQuestionVTO.getOption3() + "]]></OPTION3>");
                stringBuffer.append("<OPTION4><![CDATA[" + specificQuestionVTO.getOption4() + "]]></OPTION4>");

                stringBuffer.append("<MAPQUESTIONID>" + specficQuestionNo + "</MAPQUESTIONID>");
                stringBuffer.append("<EMPANSWER>" + answer + "</EMPANSWER>");
                stringBuffer.append("<SUBTOPICID>" + specificQuestionVTO.getSubtopicId() + "</SUBTOPICID>");
                stringBuffer.append("<REMAININGQUESTIONS>" + remainingQuestions + "</REMAININGQUESTIONS>");
                if (!"".equals(specificQuestionVTO.getSubTopicName())) {
                    stringBuffer.append("<SECTION>" + specificQuestionVTO.getSubTopicName() + "</SECTION>");
                }
                stringBuffer.append("</QUESTIONDETAILS>");
                stringBuffer.append("</xml>");


            } /*
             * 
             * Getting Specific Question end
             */ /** in Next if*/
            else if (navigation.equalsIgnoreCase("N")) {
                int qId = 0;
                nextQuestionVTO = (QuestionsVTO) questionVtoMap.get(questionNo + 1);
                int nextQId = nextQuestionVTO.getId();
                // System.out.println(nextQId);
                 /* Insert Question into db */
                // if(onClickStatus != 0 ){
                questionVTO = (QuestionsVTO) questionVtoMap.get(questionNo);
                qId = questionVTO.getId();
                /** answered by user or not */
                attemptedQuestions = DataSourceDataProvider.getInstance().isQuestionAttempt(examKeyId, qId);
                // }
                /**  Display Question */
                //  else {
                //             int mapsize = questionVtoMap.size();
                //             remainingQuestions =  mapsize;
                //   }
                if (selectedAns != 0) {
                    if (attemptedQuestions == 0) {
                        insertAnswer(qId, selectedAns, empId, examKeyId, subTopicId);
                        remainingQuestions = remainingQuestions - 1;
                    } else {
                        updateAnswer(qId, selectedAns, empId, examKeyId);
                    }
                }

                //   if(questionNo < questionVtoMap.size()){
                answer = DataSourceDataProvider.getInstance().getAnswer(examKeyId, nextQId, empId);
                // }

                /** XML start **/
                int nextQuestionNo = questionNo + 1;
                stringBuffer.append("<xml version=\"1.0\">");
                stringBuffer.append("<QUESTIONDETAILS >");
                stringBuffer.append("<QUESTIONSTATUS>true</QUESTIONSTATUS>");
                stringBuffer.append("<QUESTIONID>" + nextQId + "</QUESTIONID>");
                stringBuffer.append("<QUESTIONNAME><![CDATA[" + nextQuestionVTO.getQuestion() + "]]></QUESTIONNAME>");
                stringBuffer.append("<OPTION1><![CDATA[" + nextQuestionVTO.getOption1() + "]]></OPTION1>");
                stringBuffer.append("<OPTION2><![CDATA[" + nextQuestionVTO.getOption2() + "]]></OPTION2>");
                stringBuffer.append("<OPTION3><![CDATA[" + nextQuestionVTO.getOption3() + "]]></OPTION3>");
                stringBuffer.append("<OPTION4><![CDATA[" + nextQuestionVTO.getOption4() + "]]></OPTION4>");

                stringBuffer.append("<MAPQUESTIONID>" + nextQuestionNo + "</MAPQUESTIONID>");
                stringBuffer.append("<EMPANSWER>" + answer + "</EMPANSWER>");
                stringBuffer.append("<SUBTOPICID>" + nextQuestionVTO.getSubtopicId() + "</SUBTOPICID>");
                stringBuffer.append("<REMAININGQUESTIONS>" + remainingQuestions + "</REMAININGQUESTIONS>");
                if (!"".equals(nextQuestionVTO.getSubTopicName())) {
                    stringBuffer.append("<SECTION>" + nextQuestionVTO.getSubTopicName() + "</SECTION>");
                }
                stringBuffer.append("</QUESTIONDETAILS>");
                stringBuffer.append("</xml>");


            } /** End of next If */
            /* in prevoius if */ else if (navigation.equalsIgnoreCase("P")) {
                questionVTO = (QuestionsVTO) questionVtoMap.get(questionNo);
                int qId = questionVTO.getId();
                /** answered by user or not */
                attemptedQuestions = DataSourceDataProvider.getInstance().isQuestionAttempt(examKeyId, qId);
                previousQuestionVTO = (QuestionsVTO) questionVtoMap.get(questionNo - 1);
                int prevoiusQId = previousQuestionVTO.getId();

                if (selectedAns != 0) {
                    if (attemptedQuestions == 0) {
                        insertAnswer(qId, selectedAns, empId, examKeyId, subTopicId);
                        remainingQuestions = remainingQuestions - 1;
                    } else {
                        updateAnswer(qId, selectedAns, empId, examKeyId);
                    }
                }
                answer = DataSourceDataProvider.getInstance().getAnswer(examKeyId, prevoiusQId, empId);

                /** XML start **/
                int previousQuestionNo = questionNo - 1;
                stringBuffer.append("<xml version=\"1.0\">");
                stringBuffer.append("<QUESTIONDETAILS >");
                stringBuffer.append("<QUESTIONSTATUS>true</QUESTIONSTATUS>");
                stringBuffer.append("<QUESTIONID>" + prevoiusQId + "</QUESTIONID>");
                stringBuffer.append("<QUESTIONNAME><![CDATA[" + previousQuestionVTO.getQuestion() + "]]></QUESTIONNAME>");
                stringBuffer.append("<OPTION1><![CDATA[" + previousQuestionVTO.getOption1() + "]]></OPTION1>");
                stringBuffer.append("<OPTION2><![CDATA[" + previousQuestionVTO.getOption2() + "]]></OPTION2>");
                stringBuffer.append("<OPTION3><![CDATA[" + previousQuestionVTO.getOption3() + "]]></OPTION3>");
                stringBuffer.append("<OPTION4><![CDATA[" + previousQuestionVTO.getOption4() + "]]></OPTION4>");


                stringBuffer.append("<MAPQUESTIONID>" + previousQuestionNo + "</MAPQUESTIONID>");
                stringBuffer.append("<EMPANSWER>" + answer + "</EMPANSWER>");
                stringBuffer.append("<SUBTOPICID>" + previousQuestionVTO.getSubtopicId() + "</SUBTOPICID>");
                stringBuffer.append("<REMAININGQUESTIONS>" + remainingQuestions + "</REMAININGQUESTIONS>");
                if (!"".equals(previousQuestionVTO.getSubTopicName())) {
                    stringBuffer.append("<SECTION>" + previousQuestionVTO.getSubTopicName() + "</SECTION>");
                }
                stringBuffer.append("</QUESTIONDETAILS>");
                stringBuffer.append("</xml>");


            } /* end of Previous if */ /* in submit if */ else if (navigation.equalsIgnoreCase("S")) {
                // System.out.println("in sumbmit cond..");
                questionVTO = (QuestionsVTO) questionVtoMap.get(questionNo);
                int qId = questionVTO.getId();
                /** answered by user or not */
                attemptedQuestions = DataSourceDataProvider.getInstance().isQuestionAttempt(examKeyId, qId);
                /*  if(onClickStatus == 0 ){
                int mapsize = questionVtoMap.size();
                remainingQuestions =  mapsize;
                }*/
                // System.out.println("attemptedQuestions-->"+attemptedQuestions);
                if (selectedAns != 0) {
                    if (attemptedQuestions == 0) {
                        insertAnswer(qId, selectedAns, empId, examKeyId, subTopicId);
                        remainingQuestions = remainingQuestions - 1;
                    } else {
                        updateAnswer(qId, selectedAns, empId, examKeyId);
                    }
                }
                stringBuffer.append("<xml version=\"1.0\">");
                stringBuffer.append("<QUESTIONDETAILS >");
                stringBuffer.append("<QUESTIONSTATUS>false</QUESTIONSTATUS>");
                stringBuffer.append("<REMAININGQUESTIONS>" + remainingQuestions + "</REMAININGQUESTIONS>");
                stringBuffer.append("</QUESTIONDETAILS>");
                stringBuffer.append("</xml>");
            }

            /* end of subbmit if */

        } catch (Exception sle) {
            sle.printStackTrace();
        }
        return stringBuffer.toString();

    }


    /*Getting Questions Count
     *Date : 07/29/2013
     */
    public String getCurrentQuestionsCount(int subTopicId, String userId, int totalQuestions) throws ServiceLocatorException {
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String responseString = "";
        int actualQuestions = 0;
        int requiredQuestions = 0;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            String queryString = "SELECT COUNT(ID) as countQues FROM tblEcertQuestion WHERE SubTopicId =" + subTopicId + " AND CreatedBy='" + userId + "'";

            resultSet = statement.executeQuery(queryString);
            if (resultSet.next()) {
                actualQuestions = resultSet.getInt("countQues");
            }

            requiredQuestions = totalQuestions - actualQuestions;
            if (requiredQuestions == 0) {
                responseString = "Equal";
            } else {
                responseString = subTopicId + "|" + requiredQuestions;
            }
        } catch (Exception exception) {
            exception.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    /*
     *Method to get Questions AjaxList
     *Date : 07/25/2013
     */
    public String getQuestionsAjaxList(int subTopicId, String userId) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();

        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String createdBy = "";
        String totalStream = "";
        String queryString = "";
        int i = 0;

        try {
            /*queryString ="SELECT Id,ActivityType,Status,Description,DateDue,CreatedDate,AssignedToId,Comments FROM tblCrmActivity";
            queryString = queryString + " WHERE AccountId ="+accId+" AND ContactId =0 GROUP BY ActivityType,STATUS,Description,AssignedToId ORDER BY CreatedDate DESC";*/

            queryStringBuffer = new StringBuffer();
            queryStringBuffer.append(" SELECT ID,Question,option1,option2,option3,option4,AnwerOption,CreatedDate FROM tblEcertQuestion WHERE CreatedBy='" + userId + "' AND TopicId=" + subTopicId + "Status='Active'");
            queryStringBuffer.append("order by CreatedDate DESC");

            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryStringBuffer.toString());
            while (resultSet.next()) {
                int questionId = resultSet.getInt("ID");
                String question = resultSet.getString("Question");
                String option1 = resultSet.getString("option1");
                String option2 = resultSet.getString("option2");
                String option3 = resultSet.getString("option3");
                String option4 = resultSet.getString("option4");
                int AnwerOption = resultSet.getInt("AnwerOption");

                i++;
                totalStream = totalStream + i + "|" + questionId + "|" + question + "|" + option1 + "|" + option2 + "|" + option3 + "|" + option4 + "|" + AnwerOption + "^";
                //  totalActivities=totalActivities+count;
            }
            stringBuffer.append(totalStream);
            stringBuffer.append("addto");

            stringBuffer.append(i);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.err.println("response string is"+stringBuffer.toString());
        return stringBuffer.toString();
    }

    public HttpServletRequest getHttpServletRequest() {
        return httpServletRequest;
    }

    public String validateExam(String examValidationKey, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String responseString = "Invalid";
        int actualTopicId = 0;
        String vkey = "";
        int minMarks = 0;
        int duration = 0;
        int noOfQuestions = 0;
        // int requiredQuestions = 0;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            String queryString = "SELECT TopicId,vkey,Duration,MinMarks,NoOfQuestions FROM tblEcertValidatorKeys WHERE vkey='" + examValidationKey + "' AND STATUS = 'Active'";

            resultSet = statement.executeQuery(queryString);
            if (resultSet.next()) {
                actualTopicId = resultSet.getInt("TopicId");
                vkey = resultSet.getString("vkey");
                minMarks = resultSet.getInt("MinMarks");
                duration = resultSet.getInt("Duration");
                noOfQuestions = resultSet.getInt("NoOfQuestions");
            }

            // requiredQuestions = totalQuestions - actualQuestions;
            if (httpServletRequest.getSession(false).getAttribute(ApplicationConstants.ECERT_VALIDATE_KEY) != null) {
                httpServletRequest.getSession(false).removeAttribute(ApplicationConstants.ECERT_VALIDATE_KEY);
            }
            if (actualTopicId != 0) {
                httpServletRequest.getSession(false).setAttribute(ApplicationConstants.ECERT_VALIDATE_KEY, examValidationKey);
                responseString = vkey + "|" + actualTopicId + "|" + minMarks + "|" + duration + "|" + noOfQuestions;
            }

        } catch (Exception exception) {
            exception.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public String getAvailableQuestionsCount(int topicId) throws ServiceLocatorException {
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String responseString = "None";


        // int requiredQuestions = 0;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            String queryString = "SELECT COUNT(ID) as AvailableQuesCount FROM tblEcertQuestion WHERE TopicId=" + topicId + " AND STATUS = 'Active'";
            // System.out.println("queryString-->"+queryString);
            resultSet = statement.executeQuery(queryString);
            if (resultSet.next()) {
                responseString = "" + resultSet.getInt("AvailableQuesCount");
            }

            // requiredQuestions = totalQuestions - actualQuestions;


        } catch (Exception exception) {
            exception.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    /**
     *AjayTummapala
     *For Getting Question as Popup
     */
    public String popupQuestionsWindow(int questionId) throws ServiceLocatorException {
        String activityDesc = null;

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            //SELECT Comments FROM tblEmpIssues WHERE Id=810
            preparedStatement = connection.prepareStatement("SELECT Question,Explanation FROM tblEcertQuestion "
                    + "LEFT OUTER JOIN tblEcertSubTopics "
                    + "ON(tblEcertQuestion.SubtopicId=tblEcertSubTopics.ID) WHERE tblEcertQuestion.Id =" + questionId);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                activityDesc = resultSet.getString("Explanation");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return activityDesc;
    }


    /*
     *Popup for Cre Consultant Comments
     */
    public String popupCreCommentsWindow(String creConsultantId, String level) throws ServiceLocatorException {
        String creComments = null;
        String queryString = "";

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            if (level.equals("Tech Level")) {
                queryString = " SELECT Comments FROM tblCreTchComments WHERE  Id=(SELECT MAX(id) FROM tblCreTchComments WHERE CreId=" + creConsultantId + ")";
            } else if (level.equals("HR Level")) {
                queryString = " SELECT Comments FROM tblCreHrComments WHERE  Id=(SELECT MAX(id) FROM tblCreHrComments WHERE CreId=" + creConsultantId + ")";
            } else {
                queryString = " SELECT Comments FROM tblCreVPComments WHERE  Id=(SELECT MAX(id) FROM tblCreVPComments WHERE CreId=" + creConsultantId + ")";
            }
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                creComments = resultSet.getString("Comments");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return creComments;
    }

    /**
     *   
     *
     *   CRE Impls
     *
     *
     *
     ****/
    /*
     *Getting Cre Records List with Check boxes
     *DAte : 08/29/2013
     *
     *
     */
    /*
    public String getCreRecordsList(String consultantId,String consultantName, String startDate, String toDate, String status, int category,String level,String interviewAt) throws ServiceLocatorException{
    StringBuffer queryString = new StringBuffer();
    String resultString = "";
    String resultString1 = "";
    String state = "";
    String salesRepTerritory = "";
    //  CallableStatement callableStatement = null;
    //  DataSourceDataProvider dataSourceDataProvider = null;
    CallableStatement callableStatement = null;
    try{
    connection = ConnectionProvider.getInstance().getConnection();
    
    
    queryString.append("SELECT Id, ConsultentId, concat(FName,'.',LName) as consultantName, STATUS, CreatedDate,Category FROM tblCreConsultentDetails WHERE STATUS!='Joined' ");
    if(consultantId != null && !"".equals(consultantId)) {
    queryString.append("AND ConsultentId = '"+consultantId+"' ");
    }
    if(status != null && !"".equals(status)) {
    queryString.append("AND STATUS = '"+status+"' ");
    }
    if(category != 0 ) {
    queryString.append("AND Category = "+category+" ");
    }
    if(level != null && !"".equals(level)) {
    queryString.append("AND Level = '"+level+"' ");
    }
    if(interviewAt != null && !"".equals(interviewAt)) {
    queryString.append("AND AttendedAt = "+interviewAt+" ");
    }
    if(consultantName != null && !"".equals(consultantName)) {
    queryString.append("AND (FName LIKE '%"+consultantName+"%' OR  LName LIKE '%"+consultantName+"%' OR MName LIKE '%"+consultantName+"%')");
    }
    if((startDate != null && !"".equals(startDate)) && (toDate != null && !"".equals(toDate)))  {
    queryString.append(" AND datediff(CreatedDate ,'"+DateUtility.getInstance().convertStringToMySQLDate(startDate)+"')>=0 and datediff(CreatedDate ,'"+DateUtility.getInstance().convertStringToMySQLDate(toDate)+"')<=0");
    }
    
    queryString.append( " ORDER BY Id LIMIT 100");
    
    
    preparedStatement = connection.prepareStatement(queryString.toString());
    System.out.println("getRecordsQuery-->"+queryString.toString());
    resultSet = preparedStatement.executeQuery();
    String strConsId = "";
    String strConsName = "";
    String strStatus = "";
    String strCategory = "";
    while(resultSet.next()){
    strConsId = strConsId+resultSet.getString("Id")+"!";
    strConsName =strConsName+resultSet.getString("consultantName")+"!";
    strStatus =strStatus+resultSet.getString("STATUS")+"!";
    
    switch(resultSet.getInt("Category"))
    {
    //'1':'Software Trainee','2':'Sr.Developer','3':'Sales','4':'IT Recruitment','5':'Operations','6':'Networking','7':'Trainer','8':'Civil','9':'MES','10':'Other'
    case 1 :
    strCategory =strCategory+"Software Trainee"+"!";
    break;
    case 2 :
    strCategory =strCategory+"Sr.Developer"+"!";
    break;
    case 3 :
    strCategory =strCategory+"Sales"+"!";
    break;
    case 4 :
    strCategory =strCategory+"IT Recruitment"+"!";
    break;
    case 5 :
    strCategory =strCategory+"Operations"+"!";
    break;
    case 6 :
    strCategory =strCategory+"Networking"+"!";
    break;
    case 7 :
    strCategory =strCategory+"Trainer"+"!";
    break;
    case 8 :
    strCategory =strCategory+"Civil"+"!";
    break;
    case 9 :
    strCategory =strCategory+"MES"+"!";
    break;
    case 10 :
    strCategory =strCategory+"Other"+"!";
    break;
    default:
    strCategory =strCategory+"Not Selected"+"!";
    break;
    }
    
    
    }
    resultString1 = strConsId+"@"+strConsName+"@"+strStatus+"@"+strCategory; 
    System.out.println("resultString1-->"+resultString1);
    
    }catch(Exception e) {
    
    throw new ServiceLocatorException(e);
    
    }finally{
    try{
    if(resultSet!=null){
    resultSet.close();
    resultSet = null;
    }
    if(preparedStatement!=null){
    preparedStatement.close();
    preparedStatement = null;
    }
    if(connection!= null){
    connection.close();
    connection = null;
    }
    }catch (SQLException ex) {
    throw new ServiceLocatorException(ex);
    }
    }
    
    // return resultString;
    return resultString1;
    }
     */
    /*
     *Getting Cre Records List with Check boxes
     *DAte : 08/29/2013
     *Updated DAte : 03/06/2014
     *Updated By : aditya Malla
     * Added Categeory By Santosh Kola
     * Date : 05/09/2014
     */
    public String getCreRecordsList(String consultantId, String startDate, String toDate, String status, String interviewAt, String consultantId1, String collegeName, String course, String stream) throws ServiceLocatorException {
        // System.out.println("hiiii");
        StringBuffer queryString = new StringBuffer();
        String resultString = "";
        String resultString1 = "";
        String state = "";
        String salesRepTerritory = "";
        //  CallableStatement callableStatement = null;
        //  DataSourceDataProvider dataSourceDataProvider = null;
        CallableStatement callableStatement = null;
        try {
            connection = ConnectionProvider.getInstance().getConnection();

            queryString.append("SELECT Id, ConsultentId, concat(FName,'.',LName) as consultantName, STATUS, CreatedDate,Category FROM tblCreConsultentDetails WHERE STATUS!='Joined' ");
            if ((consultantId != null && !"".equals(consultantId)) && (consultantId1 != null && !"".equals(consultantId1))) {
                String id = consultantId.substring(6, consultantId.length());
                String id1 = consultantId1.substring(6, consultantId1.length());

                queryString.append(" AND (Id BETWEEN " + id + " AND " + id1 + ") ");
            }
            if (status != null && !"".equals(status)) {
                queryString.append(" AND STATUS = '" + status + "' ");
            }
            /* if(level != null && !"".equals(level)) {
            queryString.append("AND Level = '"+level+"' ");
            }
             */
            if (interviewAt != null && !"".equals(interviewAt)) {
                queryString.append(" AND AttendedAt = " + interviewAt + " ");
            }
            /*   if(category != 0 ) {
            queryString.append("AND Category = "+category+" ");
            }
            if(consultantName != null && !"".equals(consultantName)) {
            queryString.append("AND (FName LIKE '%"+consultantName+"%' OR  LName LIKE '%"+consultantName+"%' OR MName LIKE '%"+consultantName+"%')");
            }*/
            if ((startDate != null && !"".equals(startDate)) && (toDate != null && !"".equals(toDate))) {
                queryString.append(" AND datediff(CreatedDate ,'" + DateUtility.getInstance().convertStringToMySQLDate(startDate) + "')>=0 and datediff(CreatedDate ,'" + DateUtility.getInstance().convertStringToMySQLDate(toDate) + "')<=0");
            }
            if (collegeName != null && !"".equals(collegeName)) {
                queryString.append(" AND recLocation = '" + collegeName + "' ");
            }

            queryString.append(" ORDER BY Id");


            preparedStatement = connection.prepareStatement(queryString.toString());
            //System.out.println("query in getconsu"+queryString.toString());
            resultSet = preparedStatement.executeQuery();
            String strConsId = "";
            String strConsName = "";
            String strStatus = "";
            String strCategory = "";
            String courseStream = "";
            String qualDetails = "";
            int count = 0;
            while (resultSet.next()) {
                boolean isCourseValid = false;
                boolean isStreamValid = false;
                qualDetails = DataSourceDataProvider.getInstance().getCourseAndStreamByCreId(resultSet.getInt("Id"));
                if (course != null && !"".equals(course) && !"-1".equals(course)) {
                    if (qualDetails.contains(course)) {
                        isCourseValid = true;
                    } else {
                        isCourseValid = false;
                    }
                } else {
                    isCourseValid = true;
                }
                if (stream != null && !"".equals(stream)) {
                    if (qualDetails.contains(stream)) {
                        isStreamValid = true;
                    } else {
                        isStreamValid = false;
                    }
                } else {
                    isStreamValid = true;
                }
                if (isCourseValid && isStreamValid) {
                    count++;
                    strConsId = strConsId + resultSet.getString("Id") + "!";
                    strConsName = strConsName + resultSet.getString("consultantName") + "!";
                    strStatus = strStatus + resultSet.getString("STATUS") + "!";

                    switch (resultSet.getInt("Category")) {
                        //'1':'Software Trainee','2':'Sr.Developer','3':'Sales','4':'IT Recruitment','5':'Operations','6':'Networking','7':'Trainer','8':'Civil','9':'MES','10':'Other'
                        case 1:
                            strCategory = strCategory + "Software Trainee" + "!";
                            break;
                        case 2:
                            strCategory = strCategory + "Sr.Developer" + "!";
                            break;
                        case 3:
                            strCategory = strCategory + "US IT Sales" + "!";
                            break;
                        case 4:
                            strCategory = strCategory + "IT Recruitment" + "!";
                            break;
                        case 5:
                            strCategory = strCategory + "Operations Executive" + "!";
                            break;
                        case 6:
                            strCategory = strCategory + "Network Engineer" + "!";
                            break;
                        case 7:
                            strCategory = strCategory + "Trainer" + "!";
                            break;
                        case 8:
                            strCategory = strCategory + "Civil" + "!";
                            break;
                        case 9:
                            strCategory = strCategory + "MES" + "!";
                            break;
                        case 10:
                            strCategory = strCategory + "Other" + "!";
                            break;
                        case 11:
                            strCategory = strCategory + "HR" + "!";
                            break;
                        case 12:
                            strCategory = strCategory + "Finance Executive" + "!";
                            break;
                        case 13:
                            strCategory = strCategory + "Technical Trainer" + "!";
                            break;
                        case 14:
                            strCategory = strCategory + "Corporate Trainer" + "!";
                            break;
                        default:
                            strCategory = strCategory + "Not Selected" + "!";
                            break;
                    }

                    courseStream = courseStream + qualDetails + "!";
                    if (count >= 100) {
                        break;
                    }
                }
                //resultString1 = strConsId+"@"+strConsName+"@"+strStatus; 
            }


            resultString1 = strConsId + "@" + strConsName + "@" + strStatus + "@" + strCategory + "@" + courseStream;

            // System.out.println("resultString1-->"+resultString1);

        } catch (Exception e) {

            throw new ServiceLocatorException(e);

        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                throw new ServiceLocatorException(ex);
            }
        }

        // return resultString;
        return resultString1;
    }

    /*
    public String creRecordStatusUpdate(String consultantIds, String loginId, String status,String subtopicsList,int totalQues,int totDuration, int minMarks)throws ServiceLocatorException {
    // public String accountSearchUpdatebdm(String accIds, String loginId, String accountNames, String reportsTo)throws ServiceLocatorException {
    String queryString = null;
    int count =0;
    int updatedRows=0;
    String returnStmt = "FAILURE";
    DataSourceDataProvider dataSourceDataProvider = null;
    PreparedStatement preparedStatement = null;
    PreparedStatement preparedStatement2 = null;
    PreparedStatement preparedStatement3 = null;
    String activateRecords = "";
    Connection connection2 = null;
    Connection connection3 = null;
    try{
    connection = ConnectionProvider.getInstance().getConnection();
    connection2 = ConnectionProvider.getInstance().getConnection();
    connection3 = ConnectionProvider.getInstance().getConnection();
    
    String consutantIsArray [] = consultantIds.split("!");
    if(status.equals("Active")) {
    preparedStatement = connection.prepareStatement("UPDATE tblCreConsultentDetails SET STATUS =?, ModifiedBy = '"+loginId+"' , ModifiedDate = '"+DateUtility.getInstance().getCurrentMySqlDateTime()+"' , NoOfQuestions = ?, MinMarks=?,Duration=?  WHERE Id = ?");
    preparedStatement2 = connection2.prepareStatement("INSERT INTO tblCreConsExamTopics(CreId,SubtopicId,Status) VALUES(?,?,?)");
    preparedStatement3 = connection3.prepareStatement("UPDATE tblCreConsExamTopics SET Status = 'InActive' WHERE CreId = ? AND Status = 'Active'");
    for(int i=0;i<consutantIsArray.length;i++) {
    preparedStatement.setString(1,status);
    preparedStatement.setInt(2,totalQues);
    preparedStatement.setInt(3,minMarks);
    preparedStatement.setInt(4,totDuration);
    preparedStatement.setString(5,consutantIsArray[i]);
    preparedStatement.executeUpdate();
    activateRecords = activateRecords+" "+consutantIsArray[i];
    
    
    preparedStatement3.setInt(1,Integer.parseInt(consutantIsArray[i]));
    preparedStatement3.executeUpdate();
    
    String Str = subtopicsList;
    for (String retval: Str.split(",")){
    //System.out.println(retval);
    //  insertCREConsultantSubTopics(Integer.parseInt(consutantIsArray[i]),retval);
    preparedStatement2.setInt(1,Integer.parseInt(consutantIsArray[i]));
    preparedStatement2.setString(2,retval);
    preparedStatement2.setString(3,"Active");
    preparedStatement2.executeUpdate();
    }
    
    
    } 
    }else {
    preparedStatement = connection.prepareStatement("UPDATE tblCreConsultentDetails SET STATUS =?, ModifiedBy = '"+loginId+"' , ModifiedDate = '"+DateUtility.getInstance().getCurrentMySqlDateTime()+"'  WHERE Id = ?");
    preparedStatement2 = connection2.prepareStatement("UPDATE tblCreConsExamTopics SET Status = 'InActive' WHERE CreId = ? AND Status = 'Active'");
    for(int i=0;i<consutantIsArray.length;i++) {
    preparedStatement.setString(1,status);
    
    preparedStatement.setString(2,consutantIsArray[i]);
    preparedStatement.executeUpdate();
    activateRecords = activateRecords+" "+consutantIsArray[i];
    
    
    preparedStatement2.setInt(1,Integer.parseInt(consutantIsArray[i]));
    preparedStatement2.executeUpdate();
    
    } 
    }
    
    
    
    // MailManager.sendAssignedAccountDetails(loginId,tempAccNames,countOfOccurrence, reportsTo);
    }catch (Exception sqe){
    sqe.printStackTrace();
    }finally{
    try{
    if(preparedStatement != null){
    preparedStatement.close();
    preparedStatement = null;
    }
    if(preparedStatement2 != null){
    preparedStatement2.close();
    preparedStatement2 = null;
    }
    if(preparedStatement3 != null){
    preparedStatement3.close();
    preparedStatement3 = null;
    }
    if(connection!=null){
    connection.close();
    connection = null;
    }
    if(connection2!=null){
    connection2.close();
    connection2 = null;
    }
    if(connection3!=null){
    connection3.close();
    connection3 = null;
    }
    }catch(SQLException sqle){
    sqle.printStackTrace();
    }
    }
    
    return activateRecords;
    }
    
     */
    public String creRecordStatusUpdate(String consultantIds, String loginId, String status, String examNameIdList) throws ServiceLocatorException {


        PreparedStatement preparedStatement1 = null;
        PreparedStatement preparedStatement2 = null;

        PreparedStatement preparedStatement3 = null;

        String activateRecords = "";
        String SubTopicIds = "";

        Connection connection1 = null;
        Connection connection2 = null;
        Connection connection3 = null;
        try {
            connection1 = ConnectionProvider.getInstance().getConnection();
            connection2 = ConnectionProvider.getInstance().getConnection();
            preparedStatement1 = connection1.prepareStatement("UPDATE tblCreConsExamTopics SET Status = 'InActive' WHERE CreId = ?");
            preparedStatement2 = connection2.prepareStatement("UPDATE tblCreConsultentDetails SET STATUS =?, ModifiedBy = '" + loginId + "' , ModifiedDate = '" + DateUtility.getInstance().getCurrentMySqlDateTime() + "'  WHERE Id = ?");


            //   String consutantIsArray [] = consultantIds.split("!");
            if (status.equals("Active")) {
                connection3 = ConnectionProvider.getInstance().getConnection();
                // System.out.println("consultantIds-->"+consultantIds);
                String Str = examNameIdList;
                // System.out.println("Str-->"+Str);

                preparedStatement3 = connection3.prepareStatement("INSERT INTO tblCreConsExamTopics(CreId,Status,Examtypeid) VALUES(?,?,?)");
                // for(int i=0;i<consutantIsArray.length;i++) {
                for (String cerID : consultantIds.split("!")) {
                    // System.out.println("cerID-->"+cerID);

                    preparedStatement1.setInt(1, Integer.parseInt(cerID));
                    preparedStatement1.executeUpdate();

                    preparedStatement2.setString(1, "Active");
                    preparedStatement2.setInt(2, Integer.parseInt(cerID));
                    preparedStatement2.executeUpdate();

                    for (String retval : Str.split(",")) {
                        // System.out.println("retval-->"+retval);

                        preparedStatement3.setInt(1, Integer.parseInt(cerID));
                        preparedStatement3.setString(2, "Active");
                        preparedStatement3.setInt(3, Integer.parseInt(retval));
                        preparedStatement3.executeUpdate();
                    }

                    activateRecords = activateRecords + " " + cerID;
                }
            } else {
                // preparedStatement = connection.prepareStatement("UPDATE tblCreConsultentDetails SET STATUS =?, ModifiedBy = '"+loginId+"' , ModifiedDate = '"+DateUtility.getInstance().getCurrentMySqlDateTime()+"'  WHERE Id = ?");
                //preparedStatement2 = connection2.prepareStatement("UPDATE tblCreConsExamTopics SET Status = 'InActive' WHERE CreId = ? ");
                //  for(int i=0;i<consutantIsArray.length;i++) {
                // System.out.println("status-->"+status);
                for (String cerID : consultantIds.split("!")) {

                    preparedStatement1.setInt(1, Integer.parseInt(cerID));
                    preparedStatement1.executeUpdate();

                    preparedStatement2.setString(1, status);
                    preparedStatement2.setInt(2, Integer.parseInt(cerID));
                    preparedStatement2.executeUpdate();

                    activateRecords = activateRecords + " " + cerID;
                }
            }


        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {

                if (preparedStatement3 != null) {
                    preparedStatement3.close();
                    preparedStatement3 = null;
                }
                if (preparedStatement2 != null) {
                    preparedStatement2.close();
                    preparedStatement2 = null;
                }
                if (preparedStatement1 != null) {
                    preparedStatement1.close();
                    preparedStatement1 = null;
                }
                if (connection3 != null) {
                    connection3.close();
                    connection3 = null;
                }
                if (connection2 != null) {
                    connection2.close();
                    connection2 = null;
                }
                if (connection1 != null) {
                    connection1.close();
                    connection1 = null;
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }

        return activateRecords;
    }

    public String popupTechLeadComments(int techReviewId) throws ServiceLocatorException {
        String techLeadComments = null;
        String queryString = "";

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();

            queryString = " SELECT Comments FROM tblCreTchComments WHERE  Id=" + techReviewId;

            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                techLeadComments = resultSet.getString("Comments");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return techLeadComments;
    }

    public String popupHrLeadComments(int hrReviewId) throws ServiceLocatorException {
        String hrComments = null;
        String queryString = "";

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();

            queryString = " SELECT Comments FROM tblCreHrComments WHERE  Id=" + hrReviewId;

            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                hrComments = resultSet.getString("Comments");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return hrComments;
    }

    public String popupVpComments(int vpReviewId) throws ServiceLocatorException {
        String hrComments = null;
        String queryString = "";

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();

            queryString = " SELECT Comments FROM tblCreVPComments WHERE  id=" + vpReviewId;

            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                hrComments = resultSet.getString("Comments");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return hrComments;
    }

    public String checkEmail(String email) throws ServiceLocatorException {
        String isExist = "NotExisted";
        String queryString = "";

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();

            queryString = " SELECT Email1 FROM tblEmployee WHERE  Email1='" + email + "'";

            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                isExist = "Existed";
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return isExist;
    }

    /**
     * New method to insert question and user ans
     *
     */
    /**
     *
     *  Insert and update methods for employee answers in table  :: tblEcertSummary
     *
     */
    public void insertAnswer(int questionNo, int selectedAns, int empId, int examKeyId, int subTopicId) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        int i = 0;
        try {
            connection = ConnectionProvider.getInstance().getConnection();

            preparedStatement = connection.prepareStatement("INSERT INTO tblEcertSummary (EmpId,ExamKeyId,QuestionId,EmpAns,DateSubmitted,SubtopicId) VALUES(?,?,?,?,?,? )");
            preparedStatement.setInt(1, empId);
            preparedStatement.setInt(2, examKeyId);
            preparedStatement.setInt(3, questionNo);
            preparedStatement.setInt(4, selectedAns);
            preparedStatement.setTimestamp(5, DateUtility.getInstance().getCurrentMySqlDateTime());
            preparedStatement.setInt(6, subTopicId);
            i = preparedStatement.executeUpdate();
        } catch (Exception e) {
            System.err.println("Exception is-->" + e.getMessage());
        } finally {
            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (Exception sqle) {
                System.err.println("SQL Exception is-->" + sqle.getMessage());
            }
        }

    }

    /***
     * Update ans
     *
     */
    public void updateAnswer(int questionNo, int selectedAns, int empId, int examKeyId) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        int i = 0;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement("UPDATE tblEcertSummary SET EmpAns=?  WHERE EmpId = ? AND ExamKeyId = ? AND QuestionId = ?");
            preparedStatement.setInt(1, selectedAns);
            preparedStatement.setInt(2, empId);
            preparedStatement.setInt(3, examKeyId);
            preparedStatement.setInt(4, questionNo);

            i = preparedStatement.executeUpdate();
        } catch (Exception e) {
            System.err.println("Exception is-->" + e.getMessage());
        } finally {
            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (Exception sqle) {
                System.err.println("SQL Exception is-->" + sqle.getMessage());
            }
        }

    }

    /**
     * To Insert subtopic for consultant
     *
     */
    /*public void insertCREConsultantSubTopics(int ConsultantId,String SubtopicList) throws ServiceLocatorException {
    Connection connection = null;
    PreparedStatement preparedStatement = null;
    int i=0;
    try {
    connection = ConnectionProvider.getInstance().getConnection();
    preparedStatement = connection.prepareStatement("INSERT INTO tblCreConsExamTopics(CreId,SubtopicId,Status) VALUES(?,?,?)");
    preparedStatement.setInt(1,ConsultantId);
    preparedStatement.setString(2,SubtopicList);
    preparedStatement.setString(3,"Active");
    i = preparedStatement.executeUpdate();
    }catch (Exception e){
    System.err.println("Exception is-->"+e.getMessage());
    }finally {
    try {
    if(preparedStatement!=null){
    preparedStatement.close();
    preparedStatement = null;
    }if(connection!=null){
    connection.close();
    connection = null;
    } 
    }catch(Exception sqle){
    System.err.println("SQL Exception is-->"+sqle.getMessage());
    }
    }
    
    }
     */
    public String addAsEmployee(int consultantId, String officeEmail, String empLoginId) throws ServiceLocatorException {
        String resultMessage = "";
        int isInsert = 0;
        Connection connection = null;
        String sendMailId = null;
        CallableStatement callableStatement = null;
        String fname = null;
        String lname = null;

        // String queryString = "SELECT Id, ConsultentId, LName, FName, MName, DOB, Gender, MaritalStatus, Email1, CellPhoneNo FROM tblCreConsultentDetails WHERE Id="+consultantId;
        try {

            PasswordUtility passwordUtil = new PasswordUtility();

            /**generatedPassword is a method in GeneralService.java class
             * this is used to generate automated password of length 8 chars
             */
            String generatedPassword = ServiceLocator.getGeneralService().generatePassword(8);
            String encryptPassword = passwordUtil.encryptPwd(generatedPassword);
            String loginId = ServiceLocator.getGeneralService().generateUserId(officeEmail);


            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spCreMakeEmployee(?,?,?,?,?,?,?,?)}");
            callableStatement.setInt(1, consultantId);
            callableStatement.setString(2, officeEmail);
            callableStatement.setString(3, loginId);
            callableStatement.setString(4, encryptPassword);
            callableStatement.setString(5, empLoginId);
            callableStatement.registerOutParameter(6, Types.INTEGER);
            callableStatement.registerOutParameter(7, Types.VARCHAR);
            callableStatement.registerOutParameter(8, Types.VARCHAR);
            callableStatement.executeUpdate();
            isInsert = callableStatement.getInt(6);
            fname = callableStatement.getString(7);
            lname = callableStatement.getString(8);

            if (isInsert == 1) {
                resultMessage = "A";
                // ServiceLocator.getCreService().updateCREConsultantStatus(consultantId,"Joined","Employee",loginId);

                /** to send mail for the internal team to activate the consultant status */
                sendMailId = Properties.getProperty("Registered.India");
                if (Properties.getProperty("Mail.Flag").equals("1")) {
                    MailManager sendMail = new MailManager();
                    sendMail.sendRegisteredCandidateDetails(loginId, fname, lname, "India", sendMailId);
                }
            } else {
                resultMessage = "X";
            }
        } catch (SQLException se) {
            throw new ServiceLocatorException(se);
        } finally {
            try {

                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException se) {
                throw new ServiceLocatorException(se);
            }
        }
        return resultMessage;
    }

    public String popupWindowForCreatedDate(int Id) throws ServiceLocatorException {
        String createdDate = null;
        String queryString = "";

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();

            queryString = " SELECT CreatedDate FROM tblRecConsultant WHERE Id =" + Id;

            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                createdDate = resultSet.getString("CreatedDate");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return createdDate;
    }

    @Override
    public String popupWindowForModifiedDate(int Id) throws ServiceLocatorException {
        String createdDate = null;
        String queryString = "";

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();

            queryString = " SELECT ModifiedDate FROM tblRecConsultant WHERE Id =" + Id;

            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                createdDate = resultSet.getString("ModifiedDate");
                //  System.out.println("ModifiedDate------>"+createdDate);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return createdDate;
    }
    /*
    public String getCreAvailCreQuestions(String subTopicsList) throws ServiceLocatorException {
    Connection connection = null;
    Statement statement = null;
    ResultSet resultSet = null;
    String responseString = "None";
    
    
    // int requiredQuestions = 0;
    try {
    connection = ConnectionProvider.getInstance().getConnection();
    statement = connection.createStatement();
    String queryString = "SELECT COUNT(ID) as AvailableQuesCount FROM tblEcertQuestion WHERE SubtopicId IN("+subTopicsList+") AND STATUS = 'Active'";
    // System.out.println("queryString-->"+queryString);
    resultSet = statement.executeQuery(queryString);
    if(resultSet.next()) {
    responseString = ""+resultSet.getInt("AvailableQuesCount");
    }
    
    // requiredQuestions = totalQuestions - actualQuestions;
    
    
    }catch (Exception exception) {
    exception.printStackTrace();
    }finally{
    try{
    if(resultSet!=null){
    resultSet.close();
    resultSet = null;
    }
    if(statement!=null){
    statement.close();
    statement = null;
    }
    if(connection!=null){
    connection.close();
    connection = null;
    }
    }catch(SQLException sqle){
    
    }
    }
    return responseString;
    }
     */
    /*
    Method for subtopicwise question count start
     */

    public String getCreAvailCreQuestions(String subTopicsList) throws ServiceLocatorException {
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        // String responseString = "None";
        String responseString = "";
        PreparedStatement preparedStatement = null;


        // int requiredQuestions = 0;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            //String queryString = "SELECT COUNT(ID) as AvailableQuesCount FROM tblEcertQuestion WHERE SubtopicId IN("+subTopicsList+") AND STATUS = 'Active'";
            String queryString = "SELECT COUNT(ID) as AvailableQuesCount FROM tblEcertQuestion WHERE SubtopicId =? AND STATUS = 'Active'";
            preparedStatement = connection.prepareStatement(queryString);
            String subTopicArr[] = subTopicsList.split(",");

            for (int i = 0; i < subTopicArr.length; i++) {
                preparedStatement.setInt(1, Integer.parseInt(subTopicArr[i]));
                resultSet = preparedStatement.executeQuery();
                resultSet.next();
                if (i < subTopicArr.length - 1) {
                    responseString = responseString + resultSet.getInt("AvailableQuesCount") + ",";
                } else {
                    responseString = responseString + resultSet.getInt("AvailableQuesCount");
                }
                resultSet.close();
                resultSet = null;
            }


        } catch (Exception exception) {
            exception.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }
    /*
    Method for subtopicwise question count end
     */

    public String getCreDetailExamInfo(String examKeyId) throws ServiceLocatorException {

        String subTopicDetailResult = "";
        // Connection connection = null;
        CallableStatement callableStatement = null;
        Connection connection = null;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spEcertResult(?,?,?,?,?,?,?,?)}");
            callableStatement.setInt(1, Integer.parseInt(examKeyId));
            callableStatement.registerOutParameter(2, Types.VARCHAR);
            callableStatement.registerOutParameter(3, Types.VARCHAR);
            callableStatement.registerOutParameter(4, Types.INTEGER);
            callableStatement.registerOutParameter(5, Types.INTEGER);
            callableStatement.registerOutParameter(6, Types.INTEGER);
            callableStatement.registerOutParameter(7, Types.VARCHAR);
            callableStatement.registerOutParameter(8, Types.VARCHAR);
            callableStatement.execute();


            subTopicDetailResult = callableStatement.getString(8);

        } catch (SQLException se) {
            se.printStackTrace();
        } finally {
            try {

                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }
        return subTopicDetailResult;
    }

    public String getExamCandidateName(String empId, String topicName) throws ServiceLocatorException {
        String name = null;
        String queryString = "";

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            if (topicName.equalsIgnoreCase("CRE")) {
                queryString = " SELECT CONCAT(FName,' ',LName) As Name FROM tblCreConsultentDetails WHERE ConsultentId = '" + empId + "'";
            } else {
                queryString = "SELECT CONCAT(FName,' ',LName) As Name FROM tblEmployee WHERE LoginId = '" + empId + "'";
            }

            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                name = resultSet.getString("Name");
                //  System.out.println("ModifiedDate------>"+createdDate);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return name;


    }

    public String popupCommentsWindow(int Id) throws ServiceLocatorException {
        String Comments = null;
        String queryString = "";

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();

            queryString = " SELECT Comments  FROM tblRecConsultantActivity WHERE Id = " + Id;

            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                Comments = resultSet.getString("Comments");
                //  System.out.println("ModifiedDate------>"+createdDate);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return Comments;
    }

    public String popupNewTechCommentsWindow(int Id) throws ServiceLocatorException {
        String TechReviewComments = null;
        String queryString = "";

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();

            queryString = " SELECT TechReviewComments  FROM tblRecConsultantActivity WHERE Id = " + Id;

            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                TechReviewComments = resultSet.getString("TechReviewComments");
                //  System.out.println("ModifiedDate------>"+createdDate);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return TechReviewComments;
    }
    /*Method for statewise account deletion start
     * Date : 12/04/2013
     * Author : Aditya Malla
     */

    public int empStateAccountDelete(String teamMemberId, String state) throws ServiceLocatorException {

        String queryString = "";
        String success = "false";
        int noOfAccountsDeleted = 0;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            queryString = "delete tblCrmAccountTeam from tblCrmAccountTeam LEFT JOIN tblCrmAccount ON (tblCrmAccount.Id=tblCrmAccountTeam.AccountId) LEFT JOIN tblCrmAddress on (tblCrmAddress.Id = tblCrmAccount.PrimaryAddressId) where tblCrmAddress.State='" + state + "' and tblCrmAccountTeam.TeamMemberId='" + teamMemberId + "'";
            preparedStatement = connection.prepareStatement(queryString);
            noOfAccountsDeleted = preparedStatement.executeUpdate();

        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {


                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        return noOfAccountsDeleted;
    }
    /*Method for statewise account deletion end
     * 
     */

    /*Method : sendRepFeedback
     * Author : Santosh Kola
     * Date : 01/02/2014
     * Description : To send feedback mail to sales Representative .
     * 
     */
    public String sendRepFeedback(String empName, String loginId, String reportsTo, int totalAccs, int noOfActivities, int workedAccs, String fromId) throws ServiceLocatorException {
        //String responseText = "Mail sent failed please try again!";
        String responseText = "";
        try {

            responseText = MailManager.sendRepFeedBackDetails(empName, loginId, reportsTo, totalAccs, noOfActivities, workedAccs, fromId);
            //responseText = "Mail sent successfully.";
        } catch (Exception exception) {
            exception.printStackTrace();
        }
        return responseText;
    }

    public String sendPriorityEmail(String loginId, String reportsTo, String fromId, String accountName, String lastActivityDate, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        //String responseText = "Mail sent failed please try again!";
        String responseText = "";

        String currentLoginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
        try {
            if (loginId.equals("-1") && currentLoginId.equalsIgnoreCase(Properties.getProperty("CEO"))) {
                String teamMemberId = DataSourceDataProvider.getInstance().getPrimaryTeamMemberByName(accountName);
                if (teamMemberId != null && teamMemberId != "") {
                    // System.out.println("ceo with team member -1");

                    //  String reportsToOfPrimary = DataSourceDataProvider.getInstance().getReportsTOOneLevel(teamMemberId);
                    // System.out.println("to id-->"+teamMemberId);
                    ////  System.out.println("cc id-->"+reportsToOfPrimary);
                    //  System.out.println("from id-->"+fromId);
                    responseText = "ceo with team member -1";
                    if (Properties.getProperty("Mail.Flag").equals("1")) {
                        responseText = MailManager.sendRepEmailDetails(teamMemberId, reportsTo, fromId, accountName, lastActivityDate);
                    }
                } else {
                    responseText = "'" + accountName + "' Account Does't have primary person.";
                }
            } else if (!loginId.equals("-1")) {
                //  System.out.println("team lead with selected team member");
                responseText = "team lead with selected team member";
                //  System.out.println("to id-->"+loginId);
                //   System.out.println("cc id-->"+reportsTo);
                //  System.out.println("from id-->"+fromId);
                if (Properties.getProperty("Mail.Flag").equals("1")) {
                    responseText = MailManager.sendRepEmailDetails(loginId, reportsTo, fromId, accountName, lastActivityDate);
                }
            } else {
                //  System.out.println("team lead not seleted team member");
                responseText = "Please select Member and click to search accounts!";
            }
            //responseText = "Mail sent successfully.";
        } catch (Exception exception) {
            exception.printStackTrace();
        }
        return responseText;
    }

    public void setHttpServletRequest(HttpServletRequest httpServletRequest) {
        this.httpServletRequest = httpServletRequest;
    }

    /*Modifed for LastActivity DAte
     * Date : 06/12/2014
     * 
     */
    /*public String getAccountsByPriority(String teamMemberId, String teamName, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
    //String qsTitle = "";
    DateUtility dateutility = new DateUtility();
    stringBuffer = new StringBuffer();
    Statement statement = null;
    ResultSet resultSet = null;
    String createdBy = "";
    String totalStream = "";
    int i = 1;
    String responseString = "";
    boolean isDataAvailable = false;
    // String teamName="";
    String departmentId = "";
    Map teamMembers = new TreeMap();
    String myTeamMembers = "";
    
    int isSingle = 0;
    DataSourceDataProvider dataSourceDataProvider = null;
    
    try {
    TreeMap roles = (TreeMap) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_ROLES);
    // System.out.println("teamMemberId----->"+teamMemberId);
    //  System.out.println("teamName----->"+teamName);
    if (roles.containsValue("Admin")) {
    //  System.out.println("in role admin");
    
    // System.out.println("teamMemberId----->"+teamMemberId);
    //System.out.println("teamName----->"+teamName);
    if (teamMemberId.equals("-1") && teamName.length() >= 2) {
    teamMemberId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
    
    
    departmentId = dataSourceDataProvider.getInstance().getDepartmentName(teamMemberId);
    // System.out.println("departmentId----->"+departmentId);
    teamMembers = dataSourceDataProvider.getInstance().getMyTeamMembers(teamMemberId, departmentId);
    if (teamMembers.size() > 0) {
    myTeamMembers = getKeys(teamMembers, ",");
    } else {
    myTeamMembers = "'" + teamMemberId + "'";
    }
    isSingle++;
    // System.out.println("myTeamMembers admin----->"+myTeamMembers);
    // teamName=DataSourceDataProvider.getInstance().getTeamNameByUserId(teamMemberId);
    } else {
    teamName = DataSourceDataProvider.getInstance().getTeamNameByUserId(teamMemberId);
    myTeamMembers = myTeamMembers + teamMemberId;
    }
    } else {
    
    if (teamMemberId.equals("-1")) {
    
    teamMemberId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
    
    
    departmentId = dataSourceDataProvider.getInstance().getDepartmentName(teamMemberId);
    // System.out.println("departmentId----->"+departmentId);
    teamMembers = dataSourceDataProvider.getInstance().getMyTeamMembers(teamMemberId, departmentId);
    myTeamMembers = getKeys(teamMembers, ",");
    //myTeamMembers=myTeamMembers+teamMemberId;
    if (teamMembers.size() > 0) {
    myTeamMembers = myTeamMembers + teamMemberId;
    } else {
    myTeamMembers = "'" + teamMemberId + "'";
    }
    
    isSingle++;
    //System.out.println("myTeamMembers----->"+myTeamMembers);
    teamName = DataSourceDataProvider.getInstance().getTeamNameByUserId(teamMemberId);
    } else {
    
    teamName = DataSourceDataProvider.getInstance().getTeamNameByUserId(teamMemberId);
    myTeamMembers = myTeamMembers + teamMemberId;
    //System.out.println("myTeamMembers2----->"+myTeamMembers);
    }
    //System.out.println("myTeamMembers2----->"+myTeamMembers);
    }
    
    //System.out.println("myTeamMembers2----->"+myTeamMembers);
    //teamId=teamMemberId;
    //System.out.println("teamMemberId-->"+teamMemberId);
    
    
    queryString = "SELECT DISTINCT tblCrmAccount.Id AS AccountId,tblCrmAccount.Name "
    + "AS AccountName,tblCrmAccount.B2BPriority,tblCrmAccount.BPMPriority,"
    + "tblCrmAccount.SAPPriority,tblCrmAccount.ECOMPriority,tblCrmAccount.QAPriority,"
    + "tblCrmAccount.DateLastActivity AS DateLastActivity FROM tblCrmAccount "
    + "LEFT JOIN tblCrmAccountTeam ON (tblCrmAccount.Id = tblCrmAccountTeam.AccountId) "
    + "WHERE ";
    if (myTeamMembers.contains(",") || isSingle > 0) {
    
    // System.out.println("contains-->");  
    
    queryString = queryString + "tblCrmAccountTeam.TeamMemberId IN (" + myTeamMembers + ")";
    
    if (teamName.equalsIgnoreCase("B2B")) {
    queryString = queryString + " AND tblCrmAccount.B2BPriority >0 AND B2BPriority <=50 "
    + "ORDER BY `tblCrmAccount`.`B2BPriority` LIMIT 50";
    }
    
    if (teamName.equalsIgnoreCase("BPM")) {
    queryString = queryString + " AND tblCrmAccount.BPMPriority >0 AND BPMPriority <=50 "
    + "ORDER BY `tblCrmAccount`.`BPMPriority` LIMIT 50";
    }
    
    if (teamName.equalsIgnoreCase("E-Commerce")) {
    queryString = queryString + " AND tblCrmAccount.ECOMPriority >0 AND ECOMPriority <=50 AND "
    + "ORDER BY `tblCrmAccount`.`ECOMPriority` LIMIT 50";
    }
    if (teamName.equalsIgnoreCase("SAP")) {
    queryString = queryString + " AND tblCrmAccount.SAPPriority >0 AND SAPPriority <=50 AND "
    + "ORDER BY `tblCrmAccount`.`SAPPriority` LIMIT 50";
    }
    if (teamName.equalsIgnoreCase("QA")) {
    queryString = queryString + " AND tblCrmAccount.QAPriority >0 AND QAPriority <=50 AND "
    + "ORDER BY `tblCrmAccount`.`QAPriority` LIMIT 50";
    }
    
    } else {
    //System.out.println("not contains-->");  
    queryString = queryString + "tblCrmAccountTeam.TeamMemberId IN ('" + myTeamMembers + "')";
    
    if (teamName.equalsIgnoreCase("B2B")) {
    queryString = queryString + " AND tblCrmAccount.B2BPriority >0 AND B2BPriority <=50 AND tblCrmAccountTeam.TeamMemberId IN ('" + teamMemberId + "') "
    + "ORDER BY `tblCrmAccount`.`B2BPriority` LIMIT 50";
    }
    
    if (teamName.equalsIgnoreCase("BPM")) {
    queryString = queryString + " AND tblCrmAccount.BPMPriority >0 AND BPMPriority <=50 AND tblCrmAccountTeam.TeamMemberId IN ('" + teamMemberId + "') "
    + "ORDER BY `tblCrmAccount`.`BPMPriority` LIMIT 50";
    }
    
    if (teamName.equalsIgnoreCase("E-Commerce")) {
    queryString = queryString + " AND tblCrmAccount.ECOMPriority >0 AND ECOMPriority <=50 AND tblCrmAccountTeam.TeamMemberId IN ('" + teamMemberId + "') "
    + "ORDER BY `tblCrmAccount`.`ECOMPriority` LIMIT 50";
    }
    if (teamName.equalsIgnoreCase("SAP")) {
    queryString = queryString + " AND tblCrmAccount.SAPPriority >0 AND SAPPriority <=50 AND tblCrmAccountTeam.TeamMemberId IN ('" + teamMemberId + "') "
    + "ORDER BY `tblCrmAccount`.`SAPPriority` LIMIT 50";
    }
    if (teamName.equalsIgnoreCase("QA")) {
    queryString = queryString + " AND tblCrmAccount.QAPriority >0 AND QAPriority <=50 AND "
    + "ORDER BY `tblCrmAccount`.`QAPriority` LIMIT 50";
    }
    }
    // System.out.println("query--"+queryString);
    connection = ConnectionProvider.getInstance().getConnection();
    statement = connection.createStatement();
    resultSet = statement.executeQuery(queryString);
    
    while (resultSet.next()) {
    int accountId = resultSet.getInt("AccountId");
    
    responseString = responseString + i + "|";
    responseString = responseString + resultSet.getInt("AccountId") + "|";
    responseString = responseString + resultSet.getString("AccountName") + "|";
    if (teamName.equalsIgnoreCase("B2B")) {
    responseString = responseString + resultSet.getInt("B2BPriority") + "|";
    }
    if (teamName.equalsIgnoreCase("BPM")) {
    responseString = responseString + resultSet.getInt("BPMPriority") + "|";
    }
    if (teamName.equalsIgnoreCase("SAP")) {
    responseString = responseString + resultSet.getInt("SAPPriority") + "|";
    }
    if (teamName.equalsIgnoreCase("E-Commerce")) {
    responseString = responseString + resultSet.getInt("ECOMPriority") + "|";
    }
    if (teamName.equalsIgnoreCase("QA")) {
    responseString = responseString + resultSet.getInt("QAPriority") + "|";
    }
    
    if (teamMemberId.equals(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString())) {
    if (resultSet.getString("DateLastActivity") != null) {
    
    responseString = responseString + resultSet.getString("DateLastActivity").substring(0, 10) + "^";
    //System.out.println("responseString2---->"+responseString);
    } else {
    responseString = responseString + "-" + "^";
    }
    } else {
    
    responseString = responseString + dataSourceDataProvider.getInstance().getdateLastActivityById(teamMemberId, accountId);
    // System.out.println("responseString---->"+responseString);
    
    }
    
    //System.out.println("date---->"+responseString);
    i++;
    isDataAvailable = true;
    }
    
    if (!isDataAvailable) {
    responseString = "no data";
    }
    
    } catch (Exception sqe) {
    sqe.printStackTrace();
    } finally {
    try {
    if (resultSet != null) {
    resultSet.close();
    resultSet = null;
    }
    if (statement != null) {
    statement.close();
    statement = null;
    }
    if (connection != null) {
    connection.close();
    connection = null;
    }
    } catch (SQLException sqle) {
    }
    }
    //System.out.println("responseString-->"+responseString);
    return responseString;
    }*/
    //new impl for getting team name using teammemberid for account search by priority
    public String getTeamName(String teamMemberId, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        // String responseString = "None";
        String responseString = "";
        PreparedStatement preparedStatement = null;
        // String teamName="";
        //String departmentId="";


        DataSourceDataProvider dataSourceDataProvider = null;
        // int requiredQuestions = 0;
        try {
            //System.out.println("teamMemberId----->"+teamMemberId);

            if (teamMemberId.equals("-1")) {
                //  System.out.println("teamMemberId----->"+teamMemberId);
                teamMemberId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();

                //departmentId = dataSourceDataProvider.getInstance().getDepartmentName(teamMemberId);
                //System.out.println("teamMemberId----->"+teamMemberId);



            }
            // System.out.println("teamMemberId after if----->"+teamMemberId);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            //String queryString = "SELECT COUNT(ID) as AvailableQuesCount FROM tblEcertQuestion WHERE SubtopicId IN("+subTopicsList+") AND STATUS = 'Active'";
            //String queryString = "SELECT COUNT(ID) as AvailableQuesCount FROM tblEcertQuestion WHERE SubtopicId =? AND STATUS = 'Active'";
            String queryString = "select teamId from tblEmployee where loginId = '" + teamMemberId + "'";


            resultSet = statement.executeQuery(queryString);
            while (resultSet.next()) {

                responseString = responseString + resultSet.getString("teamId");
            }

        } catch (Exception exception) {
            exception.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

//new impl to populate exam name
    public String popupExamName(int examId) throws ServiceLocatorException {
        String activityDesc = null;

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement("SELECT TopicName FROM tblEcertTopics WHERE ID=" + examId);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                activityDesc = resultSet.getString("TopicName");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return activityDesc;
    }
    /*
     * Created By Aditya Malla Satrt
     * Created Date : 03/06/2014
     */

    public String getExamTypeName(String examType) throws ServiceLocatorException {
        // System.out.println("Into Impl----->");
        String queryString = "";
        String examName = "";
        String examName1 = "";

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            queryString = "select ExamType from tblCreSetExam where ExamType='" + examType + "' and Status='Active'";
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                examName1 = "1";
            } else {
                examName1 = "0";
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }

                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }

        return examName1;


    }

    public String getCreDetailExamDetails() throws ServiceLocatorException {
        String Comments = null;
        String queryString = "";
        String examType = "";
        int minMarks = 0;
        int time = 0;
        int noOfQuestions = 0;
        String subTopicIds = "";
        String result = "";
        CallableStatement callableStatement = null;
        int updatedRows = 0;
        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();

            //  queryString = "SELECT *  FROM tblCreSetExam";

            callableStatement = connection.prepareCall("{call spGetCreExamDetails(?)}");

            updatedRows = callableStatement.executeUpdate();
            callableStatement.registerOutParameter(1, Types.VARCHAR);
            result = callableStatement.getString(1);
            //updatedRows = callableStatement.executeUpdate();
            // int getaccIdProcedure = callableStatement.getInt(11);
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return result;
    }

    public String getEmployeeDetailsForProject(String customerName, String empType, String projectId, int accountId) throws ServiceLocatorException {
        boolean isGetting = false;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        StringBuffer sb = new StringBuffer();
        String query = null;
        try {
            if (empType.equalsIgnoreCase("e")) {
                query = "SELECT CONCAT(TRIM(FName),' ',TRIM(MName),'.',TRIM(LName)) AS FullName,Id FROM tblEmployee "
                        + "WHERE (LName LIKE '" + customerName + "%' OR MName LIKE '" + customerName + "%' OR FName LIKE '" + customerName + "%') "
                        + "AND CurStatus='Active' AND DepartmentId IN('GDC','SSG','Marketing')  LIMIT 60";
            } else if (empType.equalsIgnoreCase("v") || empType.equalsIgnoreCase("c")) {
                query = "SELECT CONCAT(TRIM(FirstName),'.',TRIM(LastName)) AS FullName,Id FROM tblCrmContact "
                        + "WHERE (LastName LIKE '" + customerName + "%' OR FirstName LIKE '" + customerName + "%') "
                        + "AND ContactStatus='Active' AND AccountId =" + accountId + " AND Id NOT IN (SELECT ObjectId FROM tblProjectContacts WHERE ProjectId=" + projectId + ") LIMIT 60";
            } else {
                query = "SELECT CONCAT(TRIM(FName),'.',TRIM(LName)) AS FullName,Id FROM tblRecConsultant "
                        + "WHERE (LName LIKE '" + customerName + "%' OR FName LIKE '" + customerName + "%') "
                        + " AND Id NOT IN (SELECT ObjectId FROM tblProjectContacts WHERE ProjectId=" + projectId + ") LIMIT 60";
            }
            // System.out.println("query-->"+query);
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();

            int count = 0;
            sb.append("<xml version=\"1.0\">");
            sb.append("<EMPLOYEES>");
            while (resultSet.next()) {
                sb.append("<EMPLOYEE><VALID>true</VALID>");

                if (resultSet.getString(1) == null || resultSet.getString(1).equals("")) {
                    sb.append("<NAME>NoRecord</NAME>");
                } else {
                    String title = resultSet.getString(1);
                    if (title.contains("&")) {
                        title = title.replace("&", "&amp;");
                    }
                    sb.append("<NAME>" + title + "</NAME>");
                }
                //sb.append("<NAME>" +resultSet.getString(1) + "</NAME>");
                sb.append("<EMPID>" + resultSet.getInt(2) + "</EMPID>");
                sb.append("</EMPLOYEE>");
                isGetting = true;
                count++;
            }

            if (!isGetting) {
                //sb.append("<EMPLOYEES>" + sb.toString() + "</EMPLOYEES>");
                //} else {
                isGetting = false;
                //nothing to show
                //  response.setStatus(HttpServletResponse.SC_NO_CONTENT);
                sb.append("<EMPLOYEE><VALID>false</VALID></EMPLOYEE>");
            }
            sb.append("</EMPLOYEES>");
            sb.append("</xml>");

            //  System.out.println(sb.toString());
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        return sb.toString();
    }

     public String getProjectTeamDetails(String projectId, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        // String responseString = "None";
        String responseString = "";
        PreparedStatement preparedStatement = null;
        DataSourceDataProvider dataSourceDataProvider = null;
        // int requiredQuestions = 0;
        try {
            //System.out.println("teamMemberId----->"+teamMemberId);

            if (projectId.equals("-1")) {
                //  System.out.println("teamMemberId----->"+teamMemberId);
                projectId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();

            }
            // System.out.println("teamMemberId after if----->"+teamMemberId);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
          String queryString = "SELECT tblProjectContacts.ObjectId,tblProjectContacts.ResourceName,tblEmployee.Country,Date(tblProjectContacts.StartDate) AS StartDate,tblProjectContacts.Email,tblProjectContacts.ResourceTitle,tblProjectContacts.ResourceType,tblProjectContacts.WorkPhone,tblProjectContacts.MobilePhone,Billable,EmpProjStatus FROM tblProjectContacts LEFT JOIN tblEmployee ON (tblProjectContacts.ObjectId=tblEmployee.Id)WHERE tblProjectContacts.ProjectId ='" + Integer.parseInt(projectId) + "'   AND tblProjectContacts.STATUS='Active' AND tblEmployee.CurStatus='Active'";
            resultSet = statement.executeQuery(queryString);
            int i = 1;
            while (resultSet.next()) {

   responseString = responseString + i + "|" + resultSet.getInt("ObjectId") + "|" + resultSet.getString("StartDate") + "|"
                        + resultSet.getString("ResourceName") + "|" + resultSet.getString("Country") + "|" + resultSet.getString("Email") + "|" + resultSet.getString("ResourceTitle") + "|" + resultSet.getInt("Billable") + "|" + resultSet.getString("WorkPhone") + "|" + resultSet.getString("MobilePhone") + "|" + resultSet.getString("EmpProjStatus")+ "^";
                i++;
            }

        } catch (Exception exception) {
            exception.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        //  System.out.println("getProjectTeamDetails responseString -->"+responseString);
        return responseString;
    }

// for customer tasks

    /*public String getProjectsForAccountId(int accountId) throws ServiceLocatorException {
    StringBuffer projects  = new StringBuffer();
    String projectName = null;
    int projectId=0;
    
    
    queryString = "SELECT distinct tblProjectContacts.ProjectId AS projectId,ProjectName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE AccountId="+accountId;
    try {
    connection = ConnectionProvider.getInstance().getConnection();
    preparedStatement = connection.prepareStatement(queryString);
    resultSet = preparedStatement.executeQuery();
    projects.append("<xml version=\"1.0\">");
    projects.append("<PROJECTS>");
    projects.append("<USER projectId=\"-1\">--Please Select--</USER>");
    while(resultSet.next()){
    projectId=resultSet.getInt("projectId");
    projectName = resultSet.getString("ProjectName");
    
    // projects.append(projectName);
    
    projects.append("<USER projectId=\""+projectId+"\">");
    projects.append(projectName);
    projects.append("</USER>");
    
    }
    projects.append("</PROJECTS>");
    projects.append("</xml>");
    } catch (SQLException ex) {
    ex.printStackTrace();
    }catch (ServiceLocatorException sle){
    sle.printStackTrace();
    }finally{
    try{
    if(resultSet!=null){
    resultSet.close();
    resultSet = null;
    }
    if(preparedStatement!=null){
    preparedStatement.close();
    preparedStatement = null;
    }
    if(connection!= null){
    connection.close();
    connection = null;
    }
    }catch (SQLException ex) {
    ex.printStackTrace();
    }
    }
    //     System.out.println("Team List: "+projects.toString());
    return projects.toString();
    }
     */

    /*public String getProjectsForAccountId(int accountId,String resourceType) throws ServiceLocatorException {
    StringBuffer projects  = new StringBuffer();
    String projectName = null;
    int projectId=0;
    
    if(resourceType.equalsIgnoreCase("c")||resourceType.equalsIgnoreCase("v"))
    queryString = "SELECT distinct tblProjectContacts.ProjectId AS projectId,ProjectName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE AccountId="+accountId;
    else
    queryString = "SELECT Id AS projectId,ProjectName FROM tblProjects where CustomerId = "+accountId; 
    
    try {
    connection = ConnectionProvider.getInstance().getConnection();
    preparedStatement = connection.prepareStatement(queryString);
    resultSet = preparedStatement.executeQuery();
    projects.append("<xml version=\"1.0\">");
    projects.append("<PROJECTS>");
    projects.append("<USER projectId=\"-1\">--Please Select--</USER>");
    while(resultSet.next()){
    projectId=resultSet.getInt("projectId");
    projectName = resultSet.getString("ProjectName");
    
    // projects.append(projectName);
    
    projects.append("<USER projectId=\""+projectId+"\">");
    if(projectName.contains("&")) {
    projectName = projectName.replace("&", "&amp;");
    }
    projects.append(projectName);
    projects.append("</USER>");
    
    }
    projects.append("</PROJECTS>");
    projects.append("</xml>");
    } catch (SQLException ex) {
    ex.printStackTrace();
    }catch (ServiceLocatorException sle){
    sle.printStackTrace();
    }finally{
    try{
    if(resultSet!=null){
    resultSet.close();
    resultSet = null;
    }
    if(preparedStatement!=null){
    preparedStatement.close();
    preparedStatement = null;
    }
    if(connection!= null){
    connection.close();
    connection = null;
    }
    }catch (SQLException ex) {
    ex.printStackTrace();
    }
    }
    //     System.out.println("Team List: "+projects.toString());
    return projects.toString();
    }
     */
    public String getProjectsForAccountId(int accountId, String resourceType, String empId) throws ServiceLocatorException {
        StringBuffer projects = new StringBuffer();
        String projectName = null;
        int projectId = 0;


        //queryString = "SELECT distinct tblProjectContacts.ProjectId AS projectId,ProjectName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE AccountId="+accountId;
        queryString = "SELECT distinct tblProjectContacts.ProjectId AS projectId,ProjectName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE AccountId=" + accountId + " and ObjectId=" + empId + " and tblProjects.Status='Active'";

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            projects.append("<xml version=\"1.0\">");
            projects.append("<PROJECTS>");
            projects.append("<USER projectId=\"-1\">--Please Select--</USER>");
            while (resultSet.next()) {
                projectId = resultSet.getInt("projectId");
                projectName = resultSet.getString("ProjectName");

                // projects.append(projectName);

                projects.append("<USER projectId=\"" + projectId + "\">");
                if (projectName.contains("&")) {
                    projectName = projectName.replace("&", "&amp;");
                }
                projects.append(projectName);
                projects.append("</USER>");

            }
            projects.append("</PROJECTS>");
            projects.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        //     System.out.println("Team List: "+projects.toString());
        return projects.toString();
    }

    public String getEmployeePhoneNumber(String customerName, String empType, String projectId, int accountId) throws ServiceLocatorException {
        boolean isGetting = false;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        StringBuffer sb = new StringBuffer();
        String query = null;
        try {
            if (empType.equalsIgnoreCase("e")) {
                query = "select WorkPhoneNo,CellPhoneNo,Email1 from tblEmployee where Id=" + customerName;
            } else if (empType.equalsIgnoreCase("v") || empType.equalsIgnoreCase("c")) {
                query = "select OfficePhone as WorkPhoneNo,CellPhone,Email1 from tblCrmContact where Id=" + customerName;
            }
            // System.out.println("query-->"+query);
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();
            String workPhone = "";
            String cellPhone = "";
            int count = 0;
            sb.append("<xml version=\"1.0\">");
            sb.append("<EMPLOYEES>");
            while (resultSet.next()) {
                sb.append("<EMPLOYEE><VALID>true</VALID>");


                //sb.append("<NAME>" +resultSet.getString(1) + "</NAME>");
                if (resultSet.getString(1).equals("") || resultSet.getString(1) == null) {
                    sb.append("<EMPWORKPHONE num=\"work\"> </EMPWORKPHONE>");
                } else {
                    sb.append("<EMPWORKPHONE num=\"work\">" + resultSet.getString(1) + "</EMPWORKPHONE>");
                }
                if (resultSet.getString(2).equals("") || resultSet.getString(2) == null) {
                    sb.append("<EMPCELLPHONE num=\"cell\"> </EMPCELLPHONE>");
                } else {
                    sb.append("<EMPCELLPHONE num=\"cell\">" + resultSet.getString(2) + "</EMPCELLPHONE>");
                }
                if (resultSet.getString(3).equals("") || resultSet.getString(3) == null) {
                    sb.append("<EMPEMAIL num=\"work\"> </EMPEMAIL>");
                } else {
                    sb.append("<EMPEMAIL num=\"work\">" + resultSet.getString(3) + "</EMPEMAIL>");
                }
                int utl = DataSourceDataProvider.getInstance().getAvailableUtilization(customerName);
                // System.out.println("utilization"+utl);

                sb.append("<UTILIZATION num=\"utl\">" + utl + "</UTILIZATION>");

                sb.append("</EMPLOYEE>");
                isGetting = true;
                count++;
            }

            if (!isGetting) {
                //sb.append("<EMPLOYEES>" + sb.toString() + "</EMPLOYEES>");
                //} else {
                isGetting = false;
                //nothing to show
                //  response.setStatus(HttpServletResponse.SC_NO_CONTENT);
                sb.append("<EMPLOYEE><VALID>false</VALID></EMPLOYEE>");
            }
            sb.append("</EMPLOYEES>");
            sb.append("</xml>");

            // System.out.println(sb.toString());
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        return sb.toString();
    }


    /*Methods For Project Based timesheet search changes 
     * Date : 07/31/2014
     * 
     */
    public String getProjectsByAccountId(int accountId) throws ServiceLocatorException {
        StringBuffer projects = new StringBuffer();
        String projectName = null;
        int projectId = 0;


        //queryString = "SELECT distinct tblProjectContacts.ProjectId AS projectId,ProjectName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE AccountId="+accountId;
        queryString = "select Id,ProjectName from tblProjects where CustomerId = " + accountId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            projects.append("<xml version=\"1.0\">");
            projects.append("<PROJECTS>");
            //   projects.append("<USER projectId=\"-1\">--Please Select--</USER>");
            projects.append("<USER projectId=\"-1\">All</USER>");
            while (resultSet.next()) {
                projectId = resultSet.getInt("Id");
                projectName = resultSet.getString("ProjectName");

                // projects.append(projectName);

                projects.append("<USER projectId=\"" + projectId + "\">");
                if (projectName.contains("&")) {
                    projectName = projectName.replace("&", "&amp;");
                }
                projects.append(projectName);
                projects.append("</USER>");

            }
            projects.append("</PROJECTS>");
            projects.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        //     System.out.println("Team List: "+projects.toString());
        return projects.toString();
    }

    //public String getEmployeesByProjectId(String projectId, String workingCountry) throws ServiceLocatorException {
    public String getEmployeesByProjectId(String projectId, String livingCountry) throws ServiceLocatorException {
        // StringBuffer projects  = new StringBuffer();
        StringBuffer employees = new StringBuffer();
        //  String projectName = null;
        String empName = null;
        // int projectId=0;
        int empId = 0;


        //queryString = "SELECT distinct tblProjectContacts.ProjectId AS projectId,ProjectName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE AccountId="+accountId;
        if (Integer.parseInt(projectId) == -1 || Integer.parseInt(projectId) == 0) {
            //queryString = "SELECT tblProjectContacts.ObjectId as EmpId,tblProjectContacts.ResourceName as EmpName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE  ProjectId="+projectId+" and tblProjects.Status='Active' and ObjectType = 'E'";


            queryString = "SELECT Id as EmpId,CONCAT(TRIM(FName),'.',TRIM(LName)) AS EmpName FROM"
                    + " tblEmployee WHERE CurStatus='Active' AND DeletedFlag != 1 AND Country LIKE '" + livingCountry + "'  ORDER BY EmpName";
        } else {
            // queryString = "SELECT tblProjectContacts.ObjectId as EmpId,tblProjectContacts.ResourceName as EmpName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE  ProjectId="+projectId+" and tblProjects.Status='Active' and ObjectType = 'E' ORDER BY EmpName";
            queryString = "SELECT ObjectId as EmpId,Resourcename as EmpName FROM tblProjectContacts WHERE ProjectId=" + projectId + " and Status='Active'  ORDER BY EmpName";
        }

        // System.out.println("queryString-->"+queryString);
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            employees.append("<xml version=\"1.0\">");
            //   projects.append("<PROJECTS>");
            employees.append("<EMPLOYEES>");
            //projects.append("<USER projectId=\"-1\">--Please Select--</USER>");
            //  employees.append("<USER empId=\"-1\">--Please Select--</USER>");
            employees.append("<USER empId=\"-1\">All</USER>");
            while (resultSet.next()) {
                // projectId=resultSet.getInt("Id");
                empId = resultSet.getInt("EmpId");
                empName = resultSet.getString("EmpName");

                // projects.append(projectName);

                //projects.append("<USER projectId=\""+projectId+"\">");
                employees.append("<USER empId=\"" + empId + "\">");
                if (empName.contains("&")) {
                    empName = empName.replace("&", "&amp;");
                }
                employees.append(empName);
                employees.append("</USER>");

            }
            employees.append("</EMPLOYEES>");
            employees.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        //     System.out.println("Team List: "+projects.toString());
        return employees.toString();
    }

    public String getEmployeesByAccountId(int accountId, String workingCountry) throws ServiceLocatorException {
        // StringBuffer projects  = new StringBuffer();
        StringBuffer employees = new StringBuffer();
        //  String projectName = null;
        String empName = null;
        // int projectId=0;
        int empId = 0;


        //queryString = "SELECT distinct tblProjectContacts.ProjectId AS projectId,ProjectName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE AccountId="+accountId;
        if (accountId == 0) {
            //queryString = "SELECT tblProjectContacts.ObjectId as EmpId,tblProjectContacts.ResourceName as EmpName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE  ProjectId="+projectId+" and tblProjects.Status='Active' and ObjectType = 'E'";


            queryString = "SELECT Id as EmpId,CONCAT(TRIM(FName),'.',TRIM(LName)) AS EmpName FROM"
                    + " tblEmployee WHERE CurStatus='Active' AND DeletedFlag != 1 AND WorkingCountry LIKE '" + workingCountry + "'  ORDER BY EmpName";
        } else {
            queryString = "SELECT tblProjectContacts.ObjectId as EmpId,tblProjectContacts.ResourceName as EmpName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE  AccountId=" + accountId + " and tblProjects.Status='Active' ORDER BY EmpName";
        }

        // System.out.println("queryString-->"+queryString);
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            employees.append("<xml version=\"1.0\">");
            //   projects.append("<PROJECTS>");
            employees.append("<EMPLOYEES>");
            //projects.append("<USER projectId=\"-1\">--Please Select--</USER>");
//               employees.append("<USER empId=\"-1\">--Please Select--</USER>");
            employees.append("<USER empId=\"-1\">All</USER>");
            while (resultSet.next()) {
                // projectId=resultSet.getInt("Id");
                empId = resultSet.getInt("EmpId");
                empName = resultSet.getString("EmpName");

                // projects.append(projectName);

                //projects.append("<USER projectId=\""+projectId+"\">");
                employees.append("<USER empId=\"" + empId + "\">");
                if (empName.contains("&")) {
                    empName = empName.replace("&", "&amp;");
                }
                employees.append(empName);
                employees.append("</USER>");

            }
            employees.append("</EMPLOYEES>");
            employees.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        //     System.out.println("Team List: "+projects.toString());
        return employees.toString();
    }

    public String getEmployeeDetailsForPMO(String query) throws ServiceLocatorException {
        boolean isGetting = false;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        StringBuffer sb = new StringBuffer();
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();
            // System.out.println("query-->"+query);
            int count = 0;

            sb.append("<xml version=\"1.0\">");
            sb.append("<EMPLOYEES>");
            while (resultSet.next()) {
                sb.append("<EMPLOYEE><VALID>true</VALID>");

                if (resultSet.getString(1) == null || resultSet.getString(1).equals("")) {
                    sb.append("<NAME>NoRecord</NAME>");
                } else {
                    String title = resultSet.getString(1);
                    if (title.contains("&")) {
                        title = title.replace("&", "&amp;");
                    }
                    sb.append("<NAME>" + title + "</NAME>");
                }
                //sb.append("<NAME>" +resultSet.getString(1) + "</NAME>");
                sb.append("<EMPID>" + resultSet.getString(2) + "</EMPID>");
                sb.append("</EMPLOYEE>");
                isGetting = true;
                count++;
            }

            if (!isGetting) {
                //sb.append("<EMPLOYEES>" + sb.toString() + "</EMPLOYEES>");
                //} else {
                isGetting = false;
                //nothing to show
                //  response.setStatus(HttpServletResponse.SC_NO_CONTENT);
                sb.append("<EMPLOYEE><VALID>false</VALID></EMPLOYEE>");
            }
            sb.append("</EMPLOYEES>");
            sb.append("</xml>");
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        return sb.toString();
    }


    /*
     * Populating Onboard Comments
     * Date : 08/15/2014
     * Author : Santosh Kola
     * 
     */
    public String popupOnboardComments(int onboardReviewId) throws ServiceLocatorException {
        String creComments = null;
        String queryString = "";

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();

            queryString = " SELECT Comments FROM tblCreOnBoardComments WHERE  Id=" + onboardReviewId;

            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                creComments = resultSet.getString("Comments");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return creComments;
    }
    /*public String getTechEmployeeDetails(HttpServletRequest httpServletRequest,String techName) throws ServiceLocatorException {
    boolean isGetting=false;
    Connection connection = null;
    PreparedStatement preparedStatement = null;
    ResultSet resultSet = null;
    StringBuffer sb = new StringBuffer();
    String query = "SELECT concat(trim(FName),'.',trim(LName)) AS FullName,Email1 FROM tblEmployee WHERE (LName LIKE '"+techName+"%' OR FName LIKE '"+techName+"%') and CurStatus='Active' LIMIT 30";
    try{
    connection = ConnectionProvider.getInstance().getConnection();
    preparedStatement = connection.prepareStatement(query);
    resultSet = preparedStatement.executeQuery();
    
    int count=0;
    sb.append("<xml version=\"1.0\">");
    sb.append("<TECHIES>");
    if("j2eegroup".toLowerCase().contains(techName.toLowerCase())){
    sb.append("<TECHIE><VALID>true</VALID>");
    sb.append("<EMAIL>j2ee@miraclesoft.com</EMAIL>");
    
    sb.append("<NAME>J2EE Group</NAME>"); 
    sb.append("</TECHIE>");   
    
    }  if("wpsgroup".toLowerCase().contains(techName.toLowerCase())){
    sb.append("<TECHIE><VALID>true</VALID>");
    sb.append("<EMAIL>wps@miraclesoft.com</EMAIL>");
    
    sb.append("<NAME>WPS Group</NAME>"); 
    sb.append("</TECHIE>");   
    
    }  if("wcsgroup".toLowerCase().contains(techName.toLowerCase())){
    sb.append("<TECHIE><VALID>true</VALID>");
    sb.append("<EMAIL>wcs@miraclesoft.com</EMAIL>");
    
    sb.append("<NAME>WCS Group</NAME>"); 
    sb.append("</TECHIE>");   
    
    }  if("b2bgroup".toLowerCase().contains(techName.toLowerCase())){
    sb.append("<TECHIE><VALID>true</VALID>");
    sb.append("<EMAIL>b2b@miraclesoft.com</EMAIL>");
    
    sb.append("<NAME>B2B Group</NAME>"); 
    sb.append("</TECHIE>");   
    
    }
    while(resultSet.next()) {
    
    
    //System.err.print("consultantId------------>"+httpServletRequest.getSession(false).getAttribute("consultantId").toString());
    sb.append("<TECHIE><VALID>true</VALID>");
    sb.append("<EMAIL>" +resultSet.getString(2) + "</EMAIL>");
    
    sb.append("<NAME>"+StringEscapeUtils.escapeHtml(resultSet.getString(1))+"</NAME>"); 
    sb.append("</TECHIE>");
    
    
    isGetting = true;
    count++;
    }
    
    if (!isGetting) {
    //sb.append("<CONSULTANTS>" + sb.toString() + "</CONSULTANTS>");
    //} else {
    isGetting = false;
    //nothing to show
    //  response.setStatus(HttpServletResponse.SC_NO_CONTENT);
    sb.append("<TECHIES><VALID>false</VALID></TECHIES>");
    }
    sb.append("</TECHIES>");
    sb.append("</xml>");
    //System.err.println("Result----"+sb);
    }catch(SQLException sqle){
    throw new ServiceLocatorException(sqle);
    }finally{
    try{
    if(resultSet!=null){
    
    resultSet.close();
    resultSet =null;
    }
    if(preparedStatement!=null){
    preparedStatement.close();
    preparedStatement = null;
    }
    
    if(connection!=null){
    connection.close();
    connection = null;
    }
    }catch(SQLException sql){
    //System.err.print("Error :"+sql);
    }
    
    }
    return sb.toString();
    }*/

    public String getTechEmployeeDetails(HttpServletRequest httpServletRequest, String techName) throws ServiceLocatorException {
        boolean isGetting = false;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        StringBuffer sb = new StringBuffer();
        String query = "SELECT concat(trim(FName),'.',trim(LName)) AS FullName,Email1 FROM tblEmployee WHERE (LName LIKE '" + techName + "%' OR FName LIKE '" + techName + "%') and CurStatus='Active' LIMIT 30";
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();

            int count = 0;
            sb.append("<xml version=\"1.0\">");
            sb.append("<TECHIES>");
            if ("eaigroup".toLowerCase().contains(techName.toLowerCase())) {
                sb.append("<TECHIE><VALID>true</VALID>");
                sb.append("<EMAIL>eai@miraclesoft.com</EMAIL>");

                sb.append("<NAME>EAI Group</NAME>");
                sb.append("</TECHIE>");

            }
            while (resultSet.next()) {


                //System.err.print("consultantId------------>"+httpServletRequest.getSession(false).getAttribute("consultantId").toString());
                sb.append("<TECHIE><VALID>true</VALID>");
                sb.append("<EMAIL>" + resultSet.getString(2) + "</EMAIL>");

                sb.append("<NAME>" + StringEscapeUtils.escapeHtml(resultSet.getString(1)) + "</NAME>");
                sb.append("</TECHIE>");


                isGetting = true;
                count++;
            }

            if (!isGetting) {
                //sb.append("<CONSULTANTS>" + sb.toString() + "</CONSULTANTS>");
                //} else {
                isGetting = false;
                //nothing to show
                //  response.setStatus(HttpServletResponse.SC_NO_CONTENT);
                sb.append("<TECHIES><VALID>false</VALID></TECHIES>");
            }
            sb.append("</TECHIES>");
            sb.append("</xml>");
            //System.err.println("Result----"+sb);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        return sb.toString();
    }

    /*
     * For Team Lead Timesheet Report
     * Date : 09/02/2014
     * Author : Santosh Kola
     */
    public String getTeamByProjectId(String projectId, String reportsToId, String loginId, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        // StringBuffer projects  = new StringBuffer();
        StringBuffer employees = new StringBuffer();
        //  String projectName = null;
        String empName = null;
        // int projectId=0;
        int empId = 0;
        Map empMap = null;

        //queryString = "SELECT distinct tblProjectContacts.ProjectId AS projectId,ProjectName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE AccountId="+accountId;
        if (Integer.parseInt(projectId) == -1 || Integer.parseInt(projectId) == 0) {
            //queryString = "SELECT tblProjectContacts.ObjectId as EmpId,tblProjectContacts.ResourceName as EmpName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE  ProjectId="+projectId+" and tblProjects.Status='Active' and ObjectType = 'E'";
            empMap = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);

            queryString = "SELECT Id as EmpId,CONCAT(TRIM(FName),'.',TRIM(LName)) AS EmpName FROM"
                    + " tblEmployee WHERE CurStatus='Active' AND DeletedFlag != 1 AND ReportsTo = '" + loginId + "'  ORDER BY EmpName";
        } else {
            // queryString = "SELECT tblProjectContacts.ObjectId as EmpId,tblProjectContacts.ResourceName as EmpName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE  ProjectId="+projectId+" and tblProjects.Status='Active' and ObjectType = 'E' ORDER BY EmpName";
            queryString = "SELECT ObjectId as EmpId,Resourcename as EmpName FROM tblProjectContacts WHERE ProjectId=" + projectId + " and Status='Active' and ReportsTo = " + reportsToId + "  ORDER BY EmpName";
        }

        //  System.out.println("queryString-->"+queryString);
        try {


            employees.append("<xml version=\"1.0\">");
            //   projects.append("<PROJECTS>");
            employees.append("<EMPLOYEES>");
            //projects.append("<USER projectId=\"-1\">--Please Select--</USER>");
            //  employees.append("<USER empId=\"-1\">--Please Select--</USER>");
            employees.append("<USER empId=\"-1\">All</USER>");

            if (Integer.parseInt(projectId) == -1 || Integer.parseInt(projectId) == 0) {
                Iterator entries = empMap.entrySet().iterator();
                while (entries.hasNext()) {
                    Entry thisEntry = (Entry) entries.next();
                    Object key = thisEntry.getKey();
                    Object value = thisEntry.getValue();
                    //empId=DataSourceDataProvider.getInstance().getEmpIdByLoginId(key.toString());
                    empName = String.valueOf(value);



                    employees.append("<USER empId=\"" + key.toString() + "\">");
                    if (empName.contains("&")) {
                        empName = empName.replace("&", "&amp;");
                    }
                    employees.append(empName);
                    employees.append("</USER>");



                }
            } else {
                connection = ConnectionProvider.getInstance().getConnection();
                preparedStatement = connection.prepareStatement(queryString);
                resultSet = preparedStatement.executeQuery();

                while (resultSet.next()) {
                    // projectId=resultSet.getInt("Id");
                    empId = resultSet.getInt("EmpId");
                    empName = resultSet.getString("EmpName");

                    // projects.append(projectName);

                    //projects.append("<USER projectId=\""+projectId+"\">");
                    employees.append("<USER empId=\"" + empId + "\">");
                    if (empName.contains("&")) {
                        empName = empName.replace("&", "&amp;");
                    }
                    employees.append(empName);
                    employees.append("</USER>");

                }
            }









            employees.append("</EMPLOYEES>");
            employees.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        // System.out.println("Team List: "+employees.toString());
        return employees.toString();
    }

    //new rec dashboard
    public String consultantActivitiesByRep(String startDate, String endDate, String activityType, String recruiterName) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            /*     queryString="SELECT CreatedById, ContactId, count(distinct tblCrmActivity.Id) as  total from tblCrmActivity join tblCrmAddress on tblCrmActivity.AccountId=tblCrmAddress.ObjectId" +
            " WHERE CreatedById in" +"("+team+")"+ "and " +
            "Country like '"+curWorkCountry+"'"+
            "and date(CreatedDate) >='"+startDate+"'"+" and date(CreatedDate) <='"+endDate+"'"+
            "GROUP BY CreatedById ORDER BY CreatedById, total";*/
            queryString = "SELECT ActivityType,tblRecActivity.CreatedBy,tblRecActivity.CreatedDate,tblRecActivity.Comments,CONCAT(tblRecConsultant.FName,'.',tblRecConsultant.MName,'.',tblRecConsultant.LName) AS ConsultantName FROM tblRecActivity"
                    + " LEFT OUTER JOIN tblRecConsultant ON (tblRecConsultant.Id=tblRecActivity.ConsultantId) where 1=1";
            // if(!StartDate.equals("")&&!EndDate.equals(""))
            if (!"".equals(startDate) && !"".equals(endDate)) {
                queryString = queryString + " and  tblRecActivity.CreatedDate >= '" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)) + "%' and  tblRecActivity.CreatedDate <= '" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)) + "%' ";
            }
            if (!"-1".equalsIgnoreCase(activityType)) {
                queryString = queryString + " and tblRecActivity.ActivityType like '" + activityType + "' ";
            }
            if (!"--Please Select--".equalsIgnoreCase(recruiterName)) {
                queryString = queryString + " and tblRecActivity.CreatedBy like '" + recruiterName + "' ";
            }

            queryString = queryString + " order by tblRecActivity.CreatedDate Desc LIMIT 150";

            //System.out.println("queryString-->"+queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            while (resultSet.next()) {
                i++;
                String date = resultSet.getString("CreatedDate");
                date = date.split(" ")[0];
                // System.out.println("date-->"+date);
                activityDetails = activityDetails + i + "|" + resultSet.getString("ConsultantName") + "|" + resultSet.getString("ActivityType") + "|" + resultSet.getString("CreatedBy") + "|" + date + "|" + resultSet.getString("Comments") + "|^";

            }
            stringBuffer.append(activityDetails);
            stringBuffer.append("addto");
            //stringBuffer.append(totalActivities);
            // stringBuffer.append("addto");
            stringBuffer.append(i);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.err.println("string is"+stringBuffer.toString());
        // System.out.println(stringBuffer.toString());
        return stringBuffer.toString();
    }

    public String getTaskEmpDetailsBasedOnIssueRel(String issueRel) throws ServiceLocatorException {
        // StringBuffer projects  = new StringBuffer();
        StringBuffer employees = new StringBuffer();
        //  String projectName = null;
        String empName = null;
        // int projectId=0;
        String loginId = "";


        //queryString = "SELECT distinct tblProjectContacts.ProjectId AS projectId,ProjectName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE AccountId="+accountId;
        if (issueRel.equals("0")) {
            queryString = "SELECT CONCAT(TRIM(FName),'.',TRIM(LName)) AS EmpName,LoginId FROM"
                    + " tblEmployee WHERE CurStatus='Active' AND IsOperationContactTeam = 1   ORDER BY EmpName";
        } else {
            queryString = "SELECT EmpName,LoginId FROM tblEmpTaskResources WHERE IssueReletedTo_Id=" + issueRel + " AND STATUS = 'Active'";
        }

        //System.out.println("queryString-->"+queryString);
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            employees.append("<xml version=\"1.0\">");
            //   projects.append("<PROJECTS>");
            employees.append("<EMPLOYEES>");
            //projects.append("<USER projectId=\"-1\">--Please Select--</USER>");
            //  employees.append("<USER empId=\"-1\">--Please Select--</USER>");
            //   employees.append("<USER loginId=\"-1\">Please Select</USER>");
            while (resultSet.next()) {
                // projectId=resultSet.getInt("Id");
                loginId = resultSet.getString("LoginId");
                empName = resultSet.getString("EmpName");

                // projects.append(projectName);

                //projects.append("<USER projectId=\""+projectId+"\">");
                employees.append("<USER loginId=\"" + loginId + "\">");
                if (empName.contains("&")) {
                    empName = empName.replace("&", "&amp;");
                }
                employees.append(empName);
                employees.append("</USER>");

            }
            employees.append("</EMPLOYEES>");
            employees.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        //  System.out.println("Team List: "+employees.toString());
        return employees.toString();
    }

    public String getTaskEmpDetailsBasedOnPrjIssue(String projectId) throws ServiceLocatorException {
        // StringBuffer projects  = new StringBuffer();
        StringBuffer employees = new StringBuffer();
        //  String projectName = null;
        String empName = null;
        // int projectId=0;
        String loginId = "";


        //queryString = "SELECT distinct tblProjectContacts.ProjectId AS projectId,ProjectName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE AccountId="+accountId;

        queryString = "SELECT ResourceName AS EmpName,ObjectId FROM"
                + " tblProjectContacts WHERE STATUS='Active' AND ProjectId = " + projectId + "   ORDER BY EmpName";


        // System.out.println("queryString-->"+queryString);
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            employees.append("<xml version=\"1.0\">");
            //   projects.append("<PROJECTS>");
            employees.append("<EMPLOYEES>");
            //projects.append("<USER projectId=\"-1\">--Please Select--</USER>");
            //  employees.append("<USER empId=\"-1\">--Please Select--</USER>");
            //  employees.append("<USER loginId=\"-1\">Please Select</USER>");
            while (resultSet.next()) {
                // projectId=resultSet.getInt("Id");
                loginId = DataSourceDataProvider.getInstance().getLoginIdByObjectId(resultSet.getString("ObjectId")).split("\\^")[0];
                empName = resultSet.getString("EmpName");

                // projects.append(projectName);

                //projects.append("<USER projectId=\""+projectId+"\">");
                employees.append("<USER loginId=\"" + loginId + "\">");
                if (empName.contains("&")) {
                    empName = empName.replace("&", "&amp;");
                }
                employees.append(empName);
                employees.append("</USER>");

            }
            employees.append("</EMPLOYEES>");
            employees.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        // System.out.println("Team List: "+employees.toString());
        return employees.toString();
    }

    public String getTaskEmpDetailsBasedOnHubbleNetworkInfraIssue(String issueRel) throws ServiceLocatorException {
        // StringBuffer projects  = new StringBuffer();
        StringBuffer employees = new StringBuffer();
        //  String projectName = null;
        String empName = null;
        // int projectId=0;
        String loginId = "";
        String loginIds[] = null;

        //queryString = "SELECT distinct tblProjectContacts.ProjectId AS projectId,ProjectName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE AccountId="+accountId;
        if (issueRel.equalsIgnoreCase("hubble")) {
            loginIds = Properties.getProperty("Hubble").split(",");
        } else if (issueRel.equalsIgnoreCase("network")) {
            loginIds = Properties.getProperty("Network").split(",");
        } else if (issueRel.equalsIgnoreCase("infra")) {
            loginIds = Properties.getProperty("Infra").split(",");
        }

        // System.out.println("queryString-->"+queryString);
        try {



            employees.append("<xml version=\"1.0\">");
            //   projects.append("<PROJECTS>");
            employees.append("<EMPLOYEES>");
            //projects.append("<USER projectId=\"-1\">--Please Select--</USER>");
            //  employees.append("<USER empId=\"-1\">--Please Select--</USER>");
            // employees.append("<USER loginId=\"-1\">Please Select</USER>");
            for (int i = 0; i < loginIds.length; i++) {
                employees.append("<USER loginId=\"" + loginIds[i] + "\">");
                empName = DataSourceDataProvider.getInstance().getemployeenamebyloginId(loginIds[i]);

                if (empName.contains("&")) {
                    empName = empName.replace("&", "&amp;");
                }
                employees.append(empName);
                employees.append("</USER>");
            }
            employees.append("</EMPLOYEES>");
            employees.append("</xml>");
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        }

        // System.out.println("Team List: "+employees.toString());
        return employees.toString();
    }

    public String getAllEmpNames(HttpServletRequest httpServletRequest, String techName) throws ServiceLocatorException {
        boolean isGetting = false;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        StringBuffer sb = new StringBuffer();
        String query = "SELECT concat(trim(FName),'.',trim(LName)) AS FullName,Loginid FROM tblEmployee WHERE (LName LIKE '" + techName + "%' OR FName LIKE '" + techName + "%') and CurStatus='Active' LIMIT 30";
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();

            int count = 0;
            sb.append("<xml version=\"1.0\">");
            sb.append("<TECHIES>");

            while (resultSet.next()) {


                //System.err.print("consultantId------------>"+httpServletRequest.getSession(false).getAttribute("consultantId").toString());
                sb.append("<TECHIE><VALID>true</VALID>");
                sb.append("<LoginId>" + resultSet.getString(2) + "</LoginId>");

                sb.append("<NAME>" + StringEscapeUtils.escapeHtml(resultSet.getString(1)) + "</NAME>");
                sb.append("</TECHIE>");


                isGetting = true;
                count++;
            }

            if (!isGetting) {
                //sb.append("<CONSULTANTS>" + sb.toString() + "</CONSULTANTS>");
                //} else {
                isGetting = false;
                //nothing to show
                //  response.setStatus(HttpServletResponse.SC_NO_CONTENT);
                sb.append("<TECHIES><VALID>false</VALID></TECHIES>");
            }
            sb.append("</TECHIES>");
            sb.append("</xml>");
            //System.err.println("Result----"+sb);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        return sb.toString();
    }
    /*new methods for employee associated projects
     * DAte : 09/26/2014
     * Author : Santosh Kola
     */

    public String getEmpAssociatedProjectsList(String empId) throws ServiceLocatorException {
        String projectsList = "";
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        int primaryProjectId = 0;
        try {

            // queryString = "SELECT tblProjectContacts.ProjectId AS projectId,ProjectName,ResourceType FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE objectId="+empId+" AND tblProjects.STATUS='Active' AND tblProjectContacts.STATUS='Active'";
           // queryString = "SELECT tblProjectContacts.ProjectId AS projectId,ProjectName,ResourceType FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE objectId=" + empId + " AND tblProjects.STATUS='Active' AND tblProjectContacts.STATUS='Active' ORDER BY ResourceType DESC";
           queryString = "SELECT tblProjectContacts.ProjectId AS projectId,ProjectName,ResourceType FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE objectId=" + empId + " AND tblProjects.STATUS='Active' AND tblProjectContacts.STATUS='Active' AND tblProjectContacts.EmpProjStatus<>'OverHead' ORDER BY ResourceType DESC";
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            boolean isExisted = false;

            while (resultSet.next()) {
                isExisted = true;
                if (resultSet.getInt("ResourceType") == 1) {
                    primaryProjectId = resultSet.getInt("projectId");
                }
                projectsList = projectsList + resultSet.getInt("projectId") + "||" + resultSet.getString("ProjectName") + "^";
            }
            if (isExisted) {
                projectsList = projectsList.substring(0, projectsList.length() - 1) + "@" + primaryProjectId;
            }
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.out.println("projectsList-->"+projectsList);
        return projectsList;
    }

    public String checkPrimary(String projectId, int contactId) throws ServiceLocatorException {
        String projectsList = "";

        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String response = "None";
        try {

            queryString = "SELECT tblProjects.ProjectName as ProjectName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE objectId=" + contactId + " AND tblProjects.STATUS='Active' AND tblProjectContacts.STATUS='Active' AND ProjectId!=" + projectId + " AND ObjectId = " + contactId + " AND ResourceType=1";
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            //boolean isExisted = false;
            while (resultSet.next()) {
                response = resultSet.getString("ProjectName");
            }

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        //System.out.println("response-->"+response);
        return response;
    }

    public String getReportsToAccess(String empId, String reportsToId, String reportsToLoginId, String resourceType) throws ServiceLocatorException {
        String isReportsTo = "";


        CallableStatement callableStatement = null;


        try {

            // queryString = "SELECT tblProjects.ProjectName as ProjectName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE objectId="+contactId+" AND tblProjects.STATUS='Active' AND tblProjectContacts.STATUS='Active' AND ProjectId!="+projectId+" AND ObjectId = "+contactId+" AND ResourceType=1";
            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spIsReportsTo(?,?,?,?,?)}");
            callableStatement.setInt(1, Integer.parseInt(empId));
            callableStatement.setInt(2, Integer.parseInt(reportsToId));
            callableStatement.setString(3, reportsToLoginId);
            callableStatement.setString(4, resourceType);
            callableStatement.registerOutParameter(5, Types.VARCHAR);
            callableStatement.execute();
            isReportsTo = callableStatement.getString(5);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {

                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        //  System.out.println("isReportsTo-->"+isReportsTo);
        return isReportsTo;
    }

    // Start For New Recruitment Dashbord 
    /* public String getTotalProfilesByPractice(String startDate,String endDate) throws ServiceLocatorException {
    Connection connection = null;
    PreparedStatement preparedStatement = null;
    ResultSet resultSet = null;
    // String responseString = "None";
    String responseString = "";    
    StringBuffer queryStringBuffer = new StringBuffer("");
    
    
    try {
    
    connection = ConnectionProvider.getInstance().getConnection();
    preparedStatement = connection.prepareStatement("select count(ID) as NoOfProfiles from tblRecConsultant where CreatedBy = ? and PracticeId = ? and CreatedDate >= ? AND CreatedDate <= ? ");
    List sourcingList = DataSourceDataProvider.getInstance().getSourcingEmpList();
    
    if(sourcingList.size()>0) {
    for(int i=0;i<sourcingList.size();i++) {
    preparedStatement.setString(1, (String)sourcingList.get(i));
    preparedStatement.setString(2, "B2B");
    preparedStatement.setTimestamp(3,DateUtility.getInstance().strToTimeStampObj(startDate));
    preparedStatement.setTimestamp(4,DateUtility.getInstance().strToTimeStampObj(endDate));
    resultSet = preparedStatement.executeQuery();
    resultSet.next();
    responseString = responseString+(String)sourcingList.get(i)+"|"+resultSet.getInt("NoOfProfiles")+"|";
    resultSet.close();
    resultSet = null;
    preparedStatement.setString(1, (String)sourcingList.get(i));
    preparedStatement.setString(2, "BPM");
    preparedStatement.setTimestamp(3,DateUtility.getInstance().strToTimeStampObj(startDate));
    preparedStatement.setTimestamp(4,DateUtility.getInstance().strToTimeStampObj(endDate));
    resultSet = preparedStatement.executeQuery();
    resultSet.next();
    responseString = responseString+resultSet.getInt("NoOfProfiles")+"|";
    resultSet.close();
    resultSet = null;
    preparedStatement.setString(1, (String)sourcingList.get(i));
    preparedStatement.setString(2, "SAP");
    preparedStatement.setTimestamp(3,DateUtility.getInstance().strToTimeStampObj(startDate));
    preparedStatement.setTimestamp(4,DateUtility.getInstance().strToTimeStampObj(endDate));
    resultSet = preparedStatement.executeQuery();
    resultSet.next();
    responseString = responseString+resultSet.getInt("NoOfProfiles")+"^";
    resultSet.close();
    resultSet = null;
    }
    }
    
    }catch (Exception exception) {
    exception.printStackTrace();
    }finally{
    try{
    if(resultSet!=null){
    resultSet.close();
    resultSet = null;
    }
    if(preparedStatement!=null){
    preparedStatement.close();
    preparedStatement = null;
    }
    if(connection!=null){
    connection.close();
    connection = null;
    }
    }catch(SQLException sqle){
    
    }
    }
    //System.out.println(" responseString -->"+responseString);
    
    // System.out.println("String length-->"+responseString.length());
    return responseString;
    }  
     */
    /*
     * Modified By Santosh Kola
     * Date : 11/19/2014
     */
    public String getTotalProfilesByPractice(String startDate, String endDate) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        Connection connection1 = null;
        PreparedStatement preparedStatement1 = null;
        ResultSet resultSet = null;
        // String responseString = "None";
        String responseString = "";
        StringBuffer queryStringBuffer = new StringBuffer("");


        try {

            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement("select count(ID) as NoOfProfiles from tblRecConsultant where CreatedBy = ? and PracticeId = ? and CreatedDate >= ? AND CreatedDate <= ? ");
            connection1 = ConnectionProvider.getInstance().getConnection();
            preparedStatement1 = connection1.prepareStatement("select count(ID) as NoOfProfiles from tblRecConsultant where CreatedBy = ? and PracticeId NOT IN('B2B','BPM','SAP','J2EE') and CreatedDate >= ? AND CreatedDate <= ? ");
            List sourcingList = DataSourceDataProvider.getInstance().getSourcingEmpList();

            if (sourcingList.size() > 0) {
                for (int i = 0; i < sourcingList.size(); i++) {
                    preparedStatement.setString(1, (String) sourcingList.get(i));
                    preparedStatement.setString(2, "B2B");
                    preparedStatement.setTimestamp(3, DateUtility.getInstance().strToTimeStampObj(startDate));
                    preparedStatement.setTimestamp(4, DateUtility.getInstance().strToTimeStampObj(endDate));
                    resultSet = preparedStatement.executeQuery();
                    resultSet.next();
                    responseString = responseString + (String) sourcingList.get(i) + "|" + resultSet.getInt("NoOfProfiles") + "|";
                    resultSet.close();
                    resultSet = null;
                    preparedStatement.setString(1, (String) sourcingList.get(i));
                    preparedStatement.setString(2, "BPM");
                    preparedStatement.setTimestamp(3, DateUtility.getInstance().strToTimeStampObj(startDate));
                    preparedStatement.setTimestamp(4, DateUtility.getInstance().strToTimeStampObj(endDate));
                    resultSet = preparedStatement.executeQuery();
                    resultSet.next();
                    responseString = responseString + resultSet.getInt("NoOfProfiles") + "|";
                    resultSet.close();
                    resultSet = null;
                    preparedStatement.setString(1, (String) sourcingList.get(i));
                    preparedStatement.setString(2, "SAP");
                    preparedStatement.setTimestamp(3, DateUtility.getInstance().strToTimeStampObj(startDate));
                    preparedStatement.setTimestamp(4, DateUtility.getInstance().strToTimeStampObj(endDate));
                    resultSet = preparedStatement.executeQuery();
                    resultSet.next();
                    responseString = responseString + resultSet.getInt("NoOfProfiles") + "|";
                    resultSet.close();
                    resultSet = null;
                    preparedStatement.setString(1, (String) sourcingList.get(i));
                    preparedStatement.setString(2, "J2EE");
                    preparedStatement.setTimestamp(3, DateUtility.getInstance().strToTimeStampObj(startDate));
                    preparedStatement.setTimestamp(4, DateUtility.getInstance().strToTimeStampObj(endDate));
                    resultSet = preparedStatement.executeQuery();
                    resultSet.next();
                    responseString = responseString + resultSet.getInt("NoOfProfiles") + "|";
                    resultSet.close();
                    resultSet = null;

                    preparedStatement1.setString(1, (String) sourcingList.get(i));
                    preparedStatement1.setTimestamp(2, DateUtility.getInstance().strToTimeStampObj(startDate));
                    preparedStatement1.setTimestamp(3, DateUtility.getInstance().strToTimeStampObj(endDate));
                    resultSet = preparedStatement1.executeQuery();
                    resultSet.next();
                    responseString = responseString + resultSet.getInt("NoOfProfiles") + "^";
                    resultSet.close();
                    resultSet = null;
                }
            }

        } catch (Exception exception) {
            exception.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement1 != null) {
                    preparedStatement1.close();
                    preparedStatement1 = null;
                }
                if (connection1 != null) {
                    connection1.close();
                    connection1 = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        //System.out.println(" responseString -->"+responseString);

        // System.out.println("String length-->"+responseString.length());
        return responseString;
    }

    /*
     * Method for Profiles Submitted Info
     * 
     * 
     */
    public String getReqProfileSubmittedInfo(String practice, String startDate, String endDate) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        // String responseString = "None";
        String responseString = "";
        StringBuffer queryStringBuffer = new StringBuffer("");


        try {

            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement("select ID, JobTitle,DatePosted from tblRecRequirement where Practice = ? AND DatePosted >='" + DateUtility.getInstance().strToTimeStampObj(startDate) + "' AND DatePosted <='" + DateUtility.getInstance().strToTimeStampObj(endDate) + "'ORDER BY DatePosted DESC");
            // List sourcingList = DataSourceDataProvider.getInstance().getSourcingEmpList();


            //  preparedStatement.setString(1, (String)sourcingList.get(i));
            preparedStatement.setString(1, practice);
            resultSet = preparedStatement.executeQuery();


            while (resultSet.next()) {
                responseString = responseString + resultSet.getString("JobTitle") + "|" + resultSet.getString("DatePosted") + "|" + getTotalProfilesSubmitted(resultSet.getInt("ID")) + "^";
            }

        } catch (Exception exception) {
            exception.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.out.println(" responseString -->"+responseString);

        // System.out.println("String length-->"+responseString.length());
        return responseString;
    }

    public int getTotalProfilesSubmitted(int requirementId) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        // String responseString = "None";
        String responseString = "";
        StringBuffer queryStringBuffer = new StringBuffer("");
        int totalSubmitted = 0;

        try {

            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement("select count(ID) as TotalSubmitted from tblRec where RequirementId = ?");
            // List sourcingList = DataSourceDataProvider.getInstance().getSourcingEmpList();


            //  preparedStatement.setString(1, (String)sourcingList.get(i));
            preparedStatement.setInt(1, requirementId);
            resultSet = preparedStatement.executeQuery();
            resultSet.next();
            totalSubmitted = resultSet.getInt("TotalSubmitted");

        } catch (Exception exception) {
            exception.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }


        // System.out.println("String length-->"+responseString.length());
        return totalSubmitted;
    }

    public String getReqClosedInfo(String startDate, String endDate) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        // String responseString = "None";
        String responseString = "";
        StringBuffer queryStringBuffer = new StringBuffer("");


        try {
//       System.out.println(year);
//       System.out.println(month);
            connection = ConnectionProvider.getInstance().getConnection();
            // preparedStatement = connection.prepareStatement("select ID, JobTitle,DatePosted,ClosedDate,TargetRate from tblRecRequirement where STATUS='closed' AND ClosedDate LIKE'"+year+"-"+month+"%'  ORDER BY DatePosted DESC");
            preparedStatement = connection.prepareStatement("select ID, JobTitle,DatePosted,ClosedDate,TargetRate from tblRecRequirement where STATUS='closed' AND ClosedDate >='" + DateUtility.getInstance().strToTimeStampObj(startDate) + "' AND ClosedDate <='" + DateUtility.getInstance().strToTimeStampObj(endDate) + "'ORDER BY DatePosted DESC");
            // List sourcingList = DataSourceDataProvider.getInstance().getSourcingEmpList();


            //  preparedStatement.setString(1, (String)sourcingList.get(i));
            //preparedStatement.setString(1, practice);
            resultSet = preparedStatement.executeQuery();


            while (resultSet.next()) {
                responseString = responseString + resultSet.getString("JobTitle") + "|" + resultSet.getString("DatePosted") + "|" + getTotalProfilesSubmitted(resultSet.getInt("ID")) + "^";
            }
//              System.out.print("responseString --------->"+responseString);
        } catch (Exception exception) {
            exception.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.out.println(" responseString -->"+responseString);

        // System.out.println("String length-->"+responseString.length());
        return responseString;
    }

    public String getReqStatusInfo(String startDate, String endDate) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        // String responseString = "None";
        String responseString = "";
        int i = 0;
        // StringBuffer queryStringBuffer = new StringBuffer("");


        try {
            //System.out.println(startDate);
            // System.out.println(endDate);
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement("SELECT STATUS,COUNT(STATUS) AS COUNT FROM tblRecRequirement  WHERE ClosedDate >='" + DateUtility.getInstance().strToTimeStampObj(startDate) + "' AND ClosedDate <='" + DateUtility.getInstance().strToTimeStampObj(endDate) + "' GROUP BY STATUS");
            // List sourcingList = DataSourceDataProvider.getInstance().getSourcingEmpList();      
            //  preparedStatement.setString(1, (String)sourcingList.get(i));
            //preparedStatement.setString(1, practice);
            resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                i++;
                responseString = responseString + i + "|" + resultSet.getString("STATUS") + "|" + resultSet.getString("COUNT") + "^";
            }
            stringBuffer.append(responseString);
            stringBuffer.append("addto");
            //stringBuffer.append(totalActivities);
            // stringBuffer.append("addto");
            stringBuffer.append(i);
//              System.out.print("responseString --------->"+responseString);
        } catch (Exception exception) {
            exception.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        //System.out.println(" responseString -->"+stringBuffer.toString());

        // return responseString;
        return stringBuffer.toString();
    }

    // End For New Recruitment Dashbord 
    /*
     * New method for displaying Avaialble activeManagerDetails
     * Author : Vikram Bammidi
     * Date : 09/09/2014
     */
    public String activeManagerDetailsByDates(String startDate, String endDate) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        // CallableStatement callableStatement = null;
        // PreparedStatement preparedStatement=null;
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        int i = 0;
        try {
            queryString = "SELECT NAME,tblCrmAccount.ModifiedBy,tblCrmAccount.DateModified FROM tblCrmAccount where DateModified >='" + DateUtility.getInstance().strToTimeStampObj(startDate) + "' AND DateModified <='" + DateUtility.getInstance().strToTimeStampObj(endDate) + "' ";
            queryString = queryString + " order by  tblCrmAccount.DateModified Desc LIMIT 150";
            //System.out.println("queryString-->"+queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            while (resultSet.next()) {
                i++;

                activityDetails = activityDetails + i + "|" + resultSet.getString("NAME") + "|" + resultSet.getString("ModifiedBy") + "|" + resultSet.getString("DateModified") + "|^";

            }
            stringBuffer.append(activityDetails);
            stringBuffer.append("addto");
            //stringBuffer.append(totalActivities);
            // stringBuffer.append("addto");
            stringBuffer.append(i);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.err.println("string is"+stringBuffer.toString());
        //  System.out.println(stringBuffer.toString());
        return stringBuffer.toString();
    }

    public String assignMarketingAcccounts(String state, String loginId, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        String queryString = null;
        //  String loginId1 = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_NAME).toString();
        CallableStatement callableStatement = null;
        DataSourceDataProvider dataSourceDataProvider = null;
        try {
            connection = ConnectionProvider.getInstance().getConnection();


            callableStatement = connection.prepareCall("{call spTransferStateAccounts(?,?,?)}");

            callableStatement.setString(1, loginId);
            callableStatement.setString(2, state);
            callableStatement.registerOutParameter(3, Types.VARCHAR);
            resultSet = callableStatement.executeQuery();
            queryString = callableStatement.getString(3);
            resultSet.close();
            resultSet = null;
            callableStatement.close();
            callableStatement = null;


        } catch (Exception e) {

            throw new ServiceLocatorException(e);

        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                throw new ServiceLocatorException(ex);
            }
        }
        return queryString;
    }

    public String getAllEmpNamesAlongWithTitle(HttpServletRequest httpServletRequest, String techName) throws ServiceLocatorException {
        boolean isGetting = false;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        StringBuffer sb = new StringBuffer();
        String query = "SELECT concat(trim(FName),'.',trim(LName)) AS FullName,Loginid,DepartmentId,TitleTypeId FROM tblEmployee WHERE (LName LIKE '" + techName + "%' OR FName LIKE '" + techName + "%') and CurStatus='Active' LIMIT 30";
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();

            int count = 0;
            sb.append("<xml version=\"1.0\">");
            sb.append("<TECHIES>");

            while (resultSet.next()) {


                //System.err.print("consultantId------------>"+httpServletRequest.getSession(false).getAttribute("consultantId").toString());
                sb.append("<TECHIE><VALID>true</VALID>");
                sb.append("<LoginId>" + resultSet.getString(2) + "</LoginId>");
                if (resultSet.getString(3).equals("") || resultSet.getString(3).equals(null) || resultSet.getString(3).equals("null")) {

                    sb.append("<DeptId> No Department Assigned </DeptId>");
                } else {
                    sb.append("<DeptId>" + resultSet.getString(3) + "</DeptId>");

                }
                if (resultSet.getString(4).equals("") || resultSet.getString(4).equals(null) || resultSet.getString(4).equals("null")) {

                    sb.append("<TitleId> No Title Assigned </TitleId>");
                } else {
                    sb.append("<TitleId>" + resultSet.getString(4) + "</TitleId>");

                }
                sb.append("<NAME>" + StringEscapeUtils.escapeHtml(resultSet.getString(1)) + "</NAME>");
                sb.append("</TECHIE>");


                isGetting = true;
                count++;
            }

            if (!isGetting) {
                //sb.append("<CONSULTANTS>" + sb.toString() + "</CONSULTANTS>");
                //} else {
                isGetting = false;
                //nothing to show
                //  response.setStatus(HttpServletResponse.SC_NO_CONTENT);
                sb.append("<TECHIES><VALID>false</VALID></TECHIES>");
            }
            sb.append("</TECHIES>");
            sb.append("</xml>");
            //System.err.println("Result----"+sb);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        //System.out.println("" + sb.toString());
        return sb.toString();
    }

    public String getMetricsList(String metricName, String status, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        //String qsTitle = "";
        // System.out.println("--------->" + metricName + "---------->" + status);
        Map myTeamMembersMap = new TreeMap();
        stringBuffer = new StringBuffer();
        String oppDashboardList = "";
        String name = "";
        String status1 = "";
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        CallableStatement callableStatement = null;
        if (!"".equals(metricName) && metricName != null) {
            name = metricName;
        }
        if (!"".equals(status) && status != null) {
            status1 = status;
        }
        int empId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_ID).toString());
        String dbUserName = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_NAME);
        String query = "SELECT * FROM tblEmpMetrics WHERE MetricName LIKE '" + name + "%'  and Status='" + status1 + "' LIMIT 30";
        // System.out.println(query);
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();
            int count = 0;

            /*1|Aditya.Malla|nseerapu|1|0|0|1|vmalla2^
            2|Vinod.Siram|nseerapu|0|0|0|0|vsiram^*/
            while (resultSet.next()) {
                count++;
                stringBuffer.append(count);
                stringBuffer.append("|");
                stringBuffer.append(resultSet.getString("MetricName"));
                stringBuffer.append("|");
                stringBuffer.append(resultSet.getInt("MinValue"));
                stringBuffer.append("|");
                stringBuffer.append(resultSet.getInt("MaxValue"));
                stringBuffer.append("|");
                stringBuffer.append(resultSet.getString("Status"));
                stringBuffer.append("|");
                stringBuffer.append(resultSet.getString("CreatedBy"));
                stringBuffer.append("|");
                stringBuffer.append(resultSet.getString("Description"));
                stringBuffer.append("|");
                stringBuffer.append(resultSet.getInt("Id"));
                stringBuffer.append("^");
            }

            //System.out.println("callableStatement.getString(2)"+callableStatement.getString(2));




        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }

        //System.out.println("stringBuffer.toString()" + stringBuffer.toString());

        return stringBuffer.toString();
    }

    public String getAllMetricNames(HttpServletRequest httpServletRequest, String metricName) throws ServiceLocatorException {
        boolean isGetting = false;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        StringBuffer sb = new StringBuffer();
        String query = "SELECT 	`Id`, `MetricName`, `MinValue`, `MaxValue` FROM `tblEmpMetrics` WHERE MetricName LIKE '" + metricName + "%' AND STATUS='Active' LIMIT 30";
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();
            int count = 0;
            sb.append("<xml version=\"1.0\">");
            sb.append("<Metrics>");
            while (resultSet.next()) {
                sb.append("<Metric><VALID>true</VALID>");
                sb.append("<MetricId>" + resultSet.getString(1) + "</MetricId>");
                sb.append("<Min>" + resultSet.getInt(3) + "</Min>");
                sb.append("<Max>" + resultSet.getInt(4) + "</Max>");
                sb.append("<NAME>" + StringEscapeUtils.escapeHtml(resultSet.getString(2)) + "</NAME>");
                sb.append("</Metric>");
                isGetting = true;
                count++;
            }

            if (!isGetting) {
                isGetting = false;
                sb.append("<Metric><VALID>false</VALID></Metric>");
            }
            sb.append("</Metrics>");
            sb.append("</xml>");
            //System.err.println("Result----"+sb);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        //   System.out.println("" + sb.toString());
        return sb.toString();
    }

    public String getTitlesList(String metricId, String status, String deptId, String title, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        //String qsTitle = "";
        // System.out.println("--------->" + metricId + "---------->" + status);
        Map myTeamMembersMap = new TreeMap();
        stringBuffer = new StringBuffer();
        String oppDashboardList = "";

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        CallableStatement callableStatement = null;
        int empId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_ID).toString());
        String dbUserName = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_NAME);
        StringBuffer query = new StringBuffer();

        query.append("SELECT tblTitleMetrics.Id AS Id,tblTitleMetrics.DepartmentId AS DepartmentId,tblTitleMetrics.TitleTypeId AS TitleTypeId,tblEmpMetrics.MetricName AS MetricName,Weightage,tblTitleMetrics.CreatedBy AS CreatedBy,tblTitleMetrics.STATUS AS STATUS,tblTitleMetrics.Description AS Description FROM tblTitleMetrics LEFT OUTER JOIN tblEmpMetrics ON(tblTitleMetrics.MetricId=tblEmpMetrics.Id) WHERE 1=1 AND ");
        if (!"".equals(metricId) && !"null".equals(metricId)) {
            query.append("tblTitleMetrics.MetricId=" + metricId + " and ");
        }
        query.append("tblTitleMetrics.DepartmentId = '" + deptId + "'  and tblTitleMetrics.TitleTypeId='" + title + "' and tblTitleMetrics.Status='" + status + "' LIMIT 30");
        String query1 = query.toString();
        //System.out.println(query.toString());
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query1);
            resultSet = preparedStatement.executeQuery();
            int count = 0;
            while (resultSet.next()) {
                count++;
                stringBuffer.append(count);
                stringBuffer.append("|");
                stringBuffer.append(resultSet.getString("MetricName"));
                stringBuffer.append("|");
                stringBuffer.append(resultSet.getString("DepartmentId"));
                stringBuffer.append("|");
                stringBuffer.append(resultSet.getString("TitleTypeId"));
                stringBuffer.append("|");
                if (resultSet.getInt("Weightage") == 0) {
                    stringBuffer.append("No weightage given");
                } else {
                    stringBuffer.append(resultSet.getInt("Weightage"));
                }
                stringBuffer.append("|");
                stringBuffer.append(resultSet.getString("CreatedBy"));
                stringBuffer.append("|");
                stringBuffer.append(resultSet.getString("Status"));
                stringBuffer.append("|");
                stringBuffer.append(resultSet.getString("Description"));
                stringBuffer.append("|");
                stringBuffer.append(resultSet.getInt("Id"));
                stringBuffer.append("^");
            }

            //System.out.println("callableStatement.getString(2)"+callableStatement.getString(2));




        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }

//        System.out.println("stringBuffer.toString()" + stringBuffer.toString());

        return stringBuffer.toString();

    }

    public String getAllMetricNames1(HttpServletRequest httpServletRequest, String metricName, String deptName, String title) throws ServiceLocatorException {
        boolean isGetting = false;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        StringBuffer sb = new StringBuffer();
        // String query = "SELECT 	`Id`, `MetricName`  FROM `tblEmpMetrics` WHERE MetricName LIKE '" + metricName + "%' AND STATUS='Active' LIMIT 30";
        String query = "SELECT  tblEmpMetrics.`Id`, tblEmpMetrics.`MetricName`  FROM `tblEmpMetrics` left outer join tblTitleMetrics on (tblEmpMetrics.Id=tblTitleMetrics.MetricId) WHERE tblEmpMetrics.MetricName LIKE '" + metricName + "%' AND tblTitleMetrics.DepartmentId = '" + deptName + "' AND tblTitleMetrics.TitleTypeId='" + title + "' and tblEmpMetrics.STATUS='Active' LIMIT 30";
        //    System.out.println(query);
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();
            int count = 0;
            sb.append("<xml version=\"1.0\">");
            sb.append("<Metrics>");
            while (resultSet.next()) {
                sb.append("<Metric><VALID>true</VALID>");
                sb.append("<MetricId>" + resultSet.getString(1) + "</MetricId>");
                sb.append("<NAME>" + StringEscapeUtils.escapeHtml(resultSet.getString(2)) + "</NAME>");
                sb.append("</Metric>");
                isGetting = true;
                count++;
            }

            if (!isGetting) {
                isGetting = false;
                sb.append("<Metric><VALID>false</VALID></Metric>");
            }
            sb.append("</Metrics>");
            sb.append("</xml>");
            //System.err.println("Result----"+sb);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        //System.out.println("" + sb.toString());
        return sb.toString();
    }

    public String setMetricRange(HttpServletRequest httpServletRequest, String deptName, String title) throws ServiceLocatorException {
        boolean isGetting = false;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String resultString1 = "";
        String query = "SELECT tblEmpMetrics.Id as Id,tblEmpMetrics.MetricName as MetricName,tblEmpMetrics.MinValue as MinValue,tblEmpMetrics.MaxValue as maxv,tblTitleMetrics.Weightage as Weightage FROM tblEmpMetrics LEFT OUTER JOIN tblTitleMetrics ON(tblTitleMetrics.MetricId=tblEmpMetrics.Id) WHERE tblTitleMetrics.DepartmentId = '" + deptName + "' AND tblTitleMetrics.TitleTypeId = '" + title + "' AND tblTitleMetrics.`Status`='Active' LIMIT 30";
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();
            int count = 0;
            String metricName = "";
            String minValue = "";
            String max = "";
            String weightage = "";
            String id = "";

            while (resultSet.next()) {
                count++;
                id = id + resultSet.getInt("Id") + "!";
                metricName = metricName + resultSet.getString("MetricName") + "!";
                minValue = minValue + resultSet.getInt("MinValue") + "!";
                max = max + resultSet.getInt("maxv") + "!";
                weightage = weightage + resultSet.getInt("Weightage") + "!";
            }
            resultString1 = count + "@" + id + "@" + metricName + "@" + minValue + "@" + max + "@" + weightage;
            //System.err.println("Result----"+sb);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        // System.out.println("---------->" + resultString1);
        return resultString1;
    }

    public String getAllReviewedPerformances(String loginId, String startDate, String endDate, String title, String dept, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        //String qsTitle = "";
        //   System.out.println("--------->" + loginId + "---------->" + startDate + "-----------" + endDate + "-----------" + title);
        Map myTeamMembersMap = new TreeMap();
        stringBuffer = new StringBuffer();
        String oppDashboardList = "";

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        CallableStatement callableStatement = null;
        int empId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_ID).toString());
        String dbUserName = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_NAME);
        StringBuffer query = new StringBuffer();

        query.append("SELECT 	`tblEmpPerformance`.`Id`, `tblEmpPerformance`.`EmpId`, `tblEmpPerformance`.`DepartmentName`, `tblEmpPerformance`.`Title`, `tblEmpPerformance`.`CreatedDate`,`tblEmpPerformance`.`CreatedBy` FROM  `mirage`.`tblEmpPerformance` WHERE 1=1 AND ");
        if (!"".equals(loginId) && !"null".equals(loginId)) {
            query.append("`tblEmpPerformance`.`EmpId` = '" + loginId + "' and  ");
        }
        if (!"".equals(title) && !"null".equals(title)) {
            query.append("`tblEmpPerformance`.`Title` = '" + title + "' and  ");
        }
        query.append("`tblEmpPerformance`.`DepartmentName`='" + dept + "' and date(StartDate) >= '" + DateUtility.getInstance().convertStringToMySQLDate(startDate) + " '  and date(EndDate) <= '" + DateUtility.getInstance().convertStringToMySQLDate(endDate) + " ' LIMIT 30");
        String query1 = query.toString();
        //  System.out.println(query.toString());
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query1);
            resultSet = preparedStatement.executeQuery();
            int count = 0;
            while (resultSet.next()) {
                count++;
                stringBuffer.append(count);
                stringBuffer.append("|");
                String empName = DataSourceDataProvider.getInstance().getFname_Lname(resultSet.getString("EmpId"));
                stringBuffer.append(empName);
                stringBuffer.append("|");
                stringBuffer.append(resultSet.getString("DepartmentName"));
                stringBuffer.append("|");
                stringBuffer.append(resultSet.getString("Title"));
                stringBuffer.append("|");
                stringBuffer.append(resultSet.getString("CreatedDate").split(" ")[0]);
                stringBuffer.append("|");
                stringBuffer.append(resultSet.getString("CreatedBy"));
                stringBuffer.append("|");
                stringBuffer.append(resultSet.getInt("Id"));
                stringBuffer.append("^");
            }

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }

        //System.out.println("stringBuffer.toString()" + stringBuffer.toString());

        return stringBuffer.toString();


    }

    public String setMetricRange1(HttpServletRequest httpServletRequest, String deptName, String title, String performanceId) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String resultString1 = "";
        String query = "SELECT * FROM tblEmpPerformanceLines WHERE PerformanceId=" + performanceId;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();
            int count = 0;
            String metricName = "";
            String minValue = "";
            String max = "";
            String actualWeightage = "";
            String id = "";
            String ratingGiven = "";
            String weightageObtained = "";
            String perId = "";
            while (resultSet.next()) {
                count++;
                perId = perId + resultSet.getInt("Id") + "!";
                id = id + resultSet.getInt("MetricId") + "!";
                String details = DataSourceDataProvider.getInstance().getMetricDetailsAndWeightageByMetricId(resultSet.getInt("MetricId"), deptName, title);
                metricName = metricName + details.split(",")[0] + "!";
                minValue = minValue + details.split(",")[1] + "!";
                max = max + details.split(",")[2] + "!";
                actualWeightage = actualWeightage + details.split(",")[3] + "!";
                ratingGiven = ratingGiven + resultSet.getString("Value") + "!";
                weightageObtained = weightageObtained + resultSet.getString("Weightage") + "!";
            }
            resultString1 = count + "@" + id + "@" + metricName + "@" + minValue + "@" + max + "@" + actualWeightage + "@" + ratingGiven + "@" + weightageObtained + "@" + perId;
            //System.err.println("Result----"+sb);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        //  System.out.println("---------->" + resultString1);
        return resultString1;


    }

    public String editPerformanceValues(HttpServletRequest httpServletRequest, String performanceId) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String resultString1 = "";
        String query = "SELECT * FROM tblEmpPerformance WHERE Id=" + performanceId;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();
            int count = 0;
            String empName = "";
            String empId = "";
            String deptName = "";
            String title = "";
            String fromDate = "";
            String toDate = "";
            int callOutBound = 0;
            int appointment = 0;
            int conferenceCalls = 0;
            int meeting = 0;
            int oppurtunity = 0;
            int requirement = 0;
            String comments = "";
            while (resultSet.next()) {
                empId = resultSet.getString("EmpId");
                empName = DataSourceDataProvider.getInstance().getFname_Lname(empId);
                deptName = resultSet.getString("DepartmentName");
                title = resultSet.getString("Title");
                fromDate = resultSet.getString("StartDate").split(" ")[0];
                toDate = resultSet.getString("EndDate").split(" ")[0];
                callOutBound = resultSet.getInt("CallOutbound");
                appointment = resultSet.getInt("Appointment");
                conferenceCalls = resultSet.getInt("ConferenceCall");
                meeting = resultSet.getInt("Meeting");
                oppurtunity = resultSet.getInt("Oppurtunity");
                requirement = resultSet.getInt("Requirement");
                comments = resultSet.getString("Comments");
            }
            resultString1 = performanceId + "@" + empName + "@" + deptName + "@" + title + "@" + fromDate + "@" + toDate + "@" + empId + "@" + callOutBound + "@" + appointment + "@" + conferenceCalls + "@" + meeting + "@" + oppurtunity + "@" + requirement + "@" + comments;
            //System.err.println("Result----"+sb);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        //  System.out.println("---------->" + resultString1);
        return resultString1;

    }

    public String updatePerformanceValues(HttpServletRequest httpServletRequest, String rating, String resWeightage, int metricId, int performanceLineId, String comments, int perfId) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        Connection connection1 = null;
        PreparedStatement preparedStatement1 = null;
        // ResultSet resultSet = null;

        int isUpdated = 0;
        int isUpdatedComments = 0;
        String resutMessage = "";
        String queryString = "UPDATE `mirage`.`tblEmpPerformanceLines` SET `MetricId` = ? , `Value` = ? , `Weightage` = ? WHERE `Id` = ? ";

        String queryString1 = "UPDATE `mirage`.`tblEmpPerformance` SET `Comments` = ?  WHERE `Id` = ? ";

        try {
            connection1 = ConnectionProvider.getInstance().getConnection();
            preparedStatement1 = connection1.prepareStatement(queryString1);
            preparedStatement1.setString(1, comments);
            preparedStatement1.setInt(2, perfId);
            isUpdatedComments = preparedStatement1.executeUpdate();
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            preparedStatement.setInt(1, metricId);
            preparedStatement.setString(2, rating);
            preparedStatement.setString(3, resWeightage);
            preparedStatement.setInt(4, performanceLineId);
            isUpdated = preparedStatement.executeUpdate();
            if (isUpdated > 0) {
                resutMessage = "updated";
            }

        } catch (SQLException se) {
            se.printStackTrace();
            throw new ServiceLocatorException(se);
        } finally {
            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException se) {
                se.printStackTrace();
                throw new ServiceLocatorException(se);
            }
        }
        return resutMessage;

    }

    public String getAllEmpNamesAlongWithTitle1(HttpServletRequest httpServletRequest, String techName) throws ServiceLocatorException {
        boolean isGetting = false;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        StringBuffer sb = new StringBuffer();
        String query = "SELECT concat(trim(FName),'.',trim(LName)) AS FullName,Loginid,DepartmentId,TitleTypeId FROM tblEmployee WHERE (LName LIKE '" + techName + "%' OR FName LIKE '" + techName + "%') and CurStatus='Active' AND LoginId NOT IN (SELECT EmpId FROM tblEmpPerformance WHERE MONTH(CreatedDate)=MONTH(NOW())) LIMIT 30";
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();

            int count = 0;
            sb.append("<xml version=\"1.0\">");
            sb.append("<TECHIES>");

            while (resultSet.next()) {


                //System.err.print("consultantId------------>"+httpServletRequest.getSession(false).getAttribute("consultantId").toString());
                sb.append("<TECHIE><VALID>true</VALID>");
                sb.append("<LoginId>" + resultSet.getString(2) + "</LoginId>");
                if (resultSet.getString(3).equals("") || resultSet.getString(3).equals(null) || resultSet.getString(3).equals("null")) {

                    sb.append("<DeptId> No Department Assigned </DeptId>");
                } else {
                    sb.append("<DeptId>" + resultSet.getString(3) + "</DeptId>");

                }
                if (resultSet.getString(4).equals("") || resultSet.getString(4).equals(null) || resultSet.getString(4).equals("null")) {

                    sb.append("<TitleId> No Title Assigned </TitleId>");
                } else {
                    sb.append("<TitleId>" + resultSet.getString(4) + "</TitleId>");

                }
                sb.append("<NAME>" + StringEscapeUtils.escapeHtml(resultSet.getString(1)) + "</NAME>");

                String activityDetails = DataSourceDataProvider.getInstance().getEmpActivityDetails(resultSet.getString(2), resultSet.getString(3));
                sb.append("<CallOutBound>" + activityDetails.split(",")[0] + "</CallOutBound>");
                sb.append("<Appointment>" + activityDetails.split(",")[1] + "</Appointment>");
                sb.append("<ConferenceCalls>" + activityDetails.split(",")[2] + "</ConferenceCalls>");
                sb.append("<Meeting>" + activityDetails.split(",")[3] + "</Meeting>");
                sb.append("<Oppurtunity>" + activityDetails.split(",")[4] + "</Oppurtunity>");
                sb.append("<Requirement>" + activityDetails.split(",")[5] + "</Requirement>");

                sb.append("</TECHIE>");
                isGetting = true;
                count++;
            }

            if (!isGetting) {
                //sb.append("<CONSULTANTS>" + sb.toString() + "</CONSULTANTS>");
                //} else {
                isGetting = false;
                //nothing to show
                //  response.setStatus(HttpServletResponse.SC_NO_CONTENT);
                sb.append("<TECHIES><VALID>false</VALID></TECHIES>");
            }
            sb.append("</TECHIES>");
            sb.append("</xml>");
            //System.err.println("Result----"+sb);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        //  System.out.println("" + sb.toString());
        return sb.toString();
    }

    public String editTitleValues(HttpServletRequest httpServletRequest, String titleId) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        DateUtility dateUtil;
        String resultString1 = "";
        // PerformanceVTO performanceVTO = new PerformanceVTO();
        //   String attachmentId="";
        String sqlQuery = "select * from tblTitleMetrics where Id=" + titleId;
        // System.out.println("sqlQuery-->"+sqlQuery);
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(sqlQuery);
            resultSet = preparedStatement.executeQuery();
            //performanceVTO.setId(id);
            String id = titleId;

            String deptId = "";
            String titleTypeId = "";
            String metricId = "";
            String metricDetails = "";
            String metricName = "";
            String minValue = "";
            String maxValue = "";
            String status = "";
            String desc = "";
            String weightage = "";
            while (resultSet.next()) {
                deptId = resultSet.getString("DepartmentId");
                titleTypeId = resultSet.getString("TitleTypeId");
                // System.out.println(performanceVTO.getTitleId());
                StringBuilder sb = new StringBuilder();
                sb.append("");
                sb.append(resultSet.getInt("MetricId"));
                metricId = sb.toString();
                metricDetails = DataSourceDataProvider.getInstance().getMetricDetailsByMetricId(resultSet.getInt("MetricId"));
                metricName = metricDetails.split(",")[0];
                minValue = metricDetails.split(",")[1];
                maxValue = metricDetails.split(",")[2];
                status = resultSet.getString("Status");
                desc = resultSet.getString("Description");
                weightage = resultSet.getString("Weightage");


            }
            resultString1 = id + "@" + deptId + "@" + titleTypeId + "@" + metricId + "@" + metricName + "@" + minValue + "@" + maxValue + "@" + status + "@" + desc + "@" + weightage;
        } catch (SQLException se) {
            se.printStackTrace();
            throw new ServiceLocatorException(se);
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                throw new ServiceLocatorException(sqle);
            }
        }
        //return performanceVTO;

        return resultString1;

    }

    public String updateTitlleValues(HttpServletRequest httpServletRequest, AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        Connection connection1 = null;
        PreparedStatement preparedStatement1 = null;
        // ResultSet resultSet = null;

        int isUpdated = 0;
        int isUpdatedComments = 0;
        String resutMessage = "";
        String queryString = "UPDATE `mirage`.`tblTitleMetrics` SET `DepartmentId` = ? , `TitleTypeId` = ? , `MetricId` = ? , `Weightage` = ? , `Status` = ? , `ModifiedBy` = ? , `ModifiedDate` = ? , `Description` = ? WHERE `Id` = ?";



        try {

            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            preparedStatement.setString(1, ajaxHandlerAction.getDepartmentName());
            preparedStatement.setString(2, ajaxHandlerAction.getTitle());
            preparedStatement.setString(3, ajaxHandlerAction.getMetricId());
            preparedStatement.setString(4, ajaxHandlerAction.getWeightage());
            preparedStatement.setString(5, ajaxHandlerAction.getStatus());
            preparedStatement.setString(6, httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString());
            preparedStatement.setTimestamp(7, DateUtility.getInstance().getCurrentMySqlDateTime());
            preparedStatement.setString(8, ajaxHandlerAction.getComments());
            preparedStatement.setString(9, ajaxHandlerAction.getTitleId());
            isUpdated = preparedStatement.executeUpdate();
            if (isUpdated > 0) {
                resutMessage = "updated";
            }

        } catch (SQLException se) {
            se.printStackTrace();
            throw new ServiceLocatorException(se);
        } finally {
            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException se) {
                se.printStackTrace();
                throw new ServiceLocatorException(se);
            }
        }
        return resutMessage;

    }

    public String addTitleValues(HttpServletRequest httpServletRequest, AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String resutMessage = "";
        int isInserted = 0;
        //String queryString = "INSERT INTO tblEmpMetrics(MetricName,MinValue,MaxValue,Status,CreatedBy,Description) VALUES(?,?,?,?,?,?)";
        String queryString = "INSERT INTO `mirage`.`tblTitleMetrics` (`DepartmentId`, `TitleTypeId`, `MetricId`, `Weightage`,`CreatedBy`, `Status`, `Description`)"
                + " VALUES(?,?,?,?,?,?,?)";
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            preparedStatement.setString(1, ajaxHandlerAction.getDepartmentName());
            preparedStatement.setString(2, ajaxHandlerAction.getTitle());
            preparedStatement.setInt(3, Integer.parseInt(ajaxHandlerAction.getMetricId()));
            preparedStatement.setInt(4, Integer.parseInt(ajaxHandlerAction.getWeightage()));
            preparedStatement.setString(5, httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString());
            preparedStatement.setString(6, ajaxHandlerAction.getStatus());
            preparedStatement.setString(7, ajaxHandlerAction.getComments());
            isInserted = preparedStatement.executeUpdate();
            if (isInserted > 0) {
                resutMessage = "inserted";
            }
        } catch (SQLException se) {
            se.printStackTrace();
            throw new ServiceLocatorException(se);
        } finally {
            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException se) {
                se.printStackTrace();
                throw new ServiceLocatorException(se);
            }
        }
        return resutMessage;

    }

    public String editMetricValues(HttpServletRequest httpServletRequest, String metricId) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        DateUtility dateUtil;
        String resultString1 = "";
        // PerformanceVTO performanceVTO = new PerformanceVTO();
        //   String attachmentId="";
        String sqlQuery = "select * from tblEmpMetrics where Id=" + metricId;
        // System.out.println("sqlQuery-->"+sqlQuery);
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(sqlQuery);
            resultSet = preparedStatement.executeQuery();
            //performanceVTO.setId(id);
            String id = metricId;


            String metricName = "";
            String minValue = "";
            String maxValue = "";
            String status = "";
            String desc = "";
            // String weightage="";
            while (resultSet.next()) {


                metricName = resultSet.getString("MetricName");
                status = resultSet.getString("Status");
                desc = resultSet.getString("Description");
                StringBuilder sb = new StringBuilder();
                sb.append("");
                sb.append(resultSet.getInt("MinValue"));
                minValue = sb.toString();

                StringBuilder sb1 = new StringBuilder();
                sb1.append("");
                sb1.append(resultSet.getInt("MaxValue"));
                maxValue = sb1.toString();



            }
            resultString1 = id + "@" + metricName + "@" + minValue + "@" + maxValue + "@" + status + "@" + desc;
        } catch (SQLException se) {
            se.printStackTrace();
            throw new ServiceLocatorException(se);
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                throw new ServiceLocatorException(sqle);
            }
        }
        //return performanceVTO;

        return resultString1;

    }

    public String updateMetricValues(HttpServletRequest httpServletRequest, AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        Connection connection1 = null;
        PreparedStatement preparedStatement1 = null;
        // ResultSet resultSet = null;

        int isUpdated = 0;
        int isUpdatedComments = 0;
        String resutMessage = "";
        String queryString = "UPDATE `tblEmpMetrics` SET `MetricName` = ? , `MinValue` = ? , `MaxValue` = ? , `Status` = ? , `ModifiedDate` = ? , `ModifiedBy` = ? , `Description` = ? WHERE `Id` = ?";



        try {

            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            preparedStatement.setString(1, ajaxHandlerAction.getMetricName());
            preparedStatement.setInt(2, Integer.parseInt(ajaxHandlerAction.getMinValue()));
            preparedStatement.setInt(3, Integer.parseInt(ajaxHandlerAction.getMaxValue()));

            preparedStatement.setString(4, ajaxHandlerAction.getStatus());
            preparedStatement.setString(6, httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString());
            preparedStatement.setTimestamp(5, DateUtility.getInstance().getCurrentMySqlDateTime());
            preparedStatement.setString(7, ajaxHandlerAction.getComments());
            preparedStatement.setString(8, ajaxHandlerAction.getMetricId());
            isUpdated = preparedStatement.executeUpdate();
            if (isUpdated > 0) {
                resutMessage = "updated";
            }

        } catch (SQLException se) {
            se.printStackTrace();
            throw new ServiceLocatorException(se);
        } finally {
            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException se) {
                se.printStackTrace();
                throw new ServiceLocatorException(se);
            }
        }
        return resutMessage;

    }

    public String addMetricValues(HttpServletRequest httpServletRequest, AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String resutMessage = "";
        int isInserted = 0;
        //String queryString = "INSERT INTO tblEmpMetrics(MetricName,MinValue,MaxValue,Status,CreatedBy,Description) VALUES(?,?,?,?,?,?)";
        String queryString = "INSERT INTO `tblEmpMetrics` ( `MetricName`, `MinValue`, `MaxValue`, `Status`, `CreatedBy`,`Description`)"
                + " VALUES(?,?,?,?,?,?)";
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            preparedStatement.setString(1, ajaxHandlerAction.getMetricName());

            preparedStatement.setInt(2, Integer.parseInt(ajaxHandlerAction.getMinValue()));
            preparedStatement.setInt(3, Integer.parseInt(ajaxHandlerAction.getMaxValue()));
            preparedStatement.setString(5, httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString());
            preparedStatement.setString(4, ajaxHandlerAction.getStatus());
            preparedStatement.setString(6, ajaxHandlerAction.getComments());
            isInserted = preparedStatement.executeUpdate();
            if (isInserted > 0) {
                resutMessage = "inserted";
            }
        } catch (SQLException se) {
            se.printStackTrace();
            throw new ServiceLocatorException(se);
        } finally {
            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException se) {
                se.printStackTrace();
                throw new ServiceLocatorException(se);
            }
        }
        return resutMessage;

    }

    /*
     * Author : Santosh Kola
     * Date : 11/17/2014
     * Method : for displaying activities by loginId
     * 
     */
    public String getActivityDetailsByLoginId(String loginId, Date startDate, Date endDate) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        // CallableStatement callableStatement = null;
        // PreparedStatement preparedStatement=null;
        Statement statement = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        int i = 0;
        try {
            // queryString = "SELECT COUNT(DISTINCT tblCrmActivity.Id) AS  total,tblCrmActivity.ActivityType AS ActivityType FROM tblCrmActivity WHERE CreatedById = '"+loginId+"' AND  ActivityType IN('Call - Inbound','Call - Outbound') AND DATE(tblCrmActivity.CreatedDate) >='"+startDate+"' AND DATE(tblCrmActivity.CreatedDate) <='"+endDate+"'  GROUP BY ActivityType";   


            queryString = "SELECT COUNT(DISTINCT tblCrmActivity.Id) AS  total,tblCrmActivity.ActivityType AS ActivityType FROM tblCrmActivity WHERE CreatedById = '" + loginId + "' AND  ActivityType=? AND DATE(tblCrmActivity.CreatedDate) >='" + startDate + "' AND DATE(tblCrmActivity.CreatedDate) <='" + endDate + "' ";





            //System.out.println("queryString11-->"+queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            // AND  ActivityType IN('Call - Inbound','Call - Outbound')
            // GROUP BY ActivityType

            preparedStatement.setString(1, "Call - Inbound");
            resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                activityDetails = "Call - Inbound : " + resultSet.getString("total") + "<br>";
            } else {
                activityDetails = "Call - Inbound" + " : 0 <br>";
            }
            if (resultSet != null) {
                resultSet.close();
                resultSet = null;
            }
            preparedStatement.setString(1, "Call - Outbound");
            resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                activityDetails = activityDetails + "Call - Outbound : " + resultSet.getString("total") + "<br>";
            } else {
                activityDetails = activityDetails + "Call - Outbound : 0 <br>";
            }




            //  stringBuffer.append("addto");
            //stringBuffer.append(totalActivities);
            // stringBuffer.append("addto");
            // stringBuffer.append(i);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.out.println("Activity details-->"+activityDetails);
        return activityDetails;
    }

    // Dual change
    public String isDualReportsTo(String projectId) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String isDualReportsTo = "NO";
        try {
            queryString = "SELECT Dualreporting FROM tblProjects WHERE ID =" + projectId;
            //  System.out.println("queryString-->" + queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                if (resultSet.getBoolean("Dualreporting")) {
                    isDualReportsTo = "YES";
                } else {
                    isDualReportsTo = "NO";
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return isDualReportsTo;
    }

    public String getTeamByReportsToType(int teamType, String reportsToId, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        // StringBuffer projects  = new StringBuffer();
        StringBuffer employees = new StringBuffer();
        //  String projectName = null;
        String empName = null;
        // int projectId=0;
        int empId = 0;
        // Map primaryMap = DataSourceDataProvider.getInstance().getCustomerTeamMap(Integer.parseInt(reportsToId));

        //queryString = "SELECT distinct tblProjectContacts.ProjectId AS projectId,ProjectName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE AccountId="+accountId;

        //System.out.println("teamtype ajax-->"+teamType+"-->"+reportsToId);
        try {
            if (teamType == 1) {
                Map primaryMap = DataSourceDataProvider.getInstance().getCustomerTeamMap(Integer.parseInt(reportsToId));
                //    queryString = "SELECT DISTINCT ObjectId as EmpId,ResourceName AS EmpName FROM" +
                //         " tblProjectContacts WHERE Status='Active' AND ResourceType = 1 AND ReportsTo="+reportsToId+"  ORDER BY EmpName";

                Iterator entries = primaryMap.entrySet().iterator();
                employees.append("<xml version=\"1.0\">");
                //   projects.append("<PROJECTS>");
                employees.append("<EMPLOYEES>");
                //projects.append("<USER projectId=\"-1\">--Please Select--</USER>");
                //  employees.append("<USER empId=\"-1\">--Please Select--</USER>");
                employees.append("<USER empId=\"All\">All</USER>");
                while (entries.hasNext()) {
                    Map.Entry entry = (Map.Entry) entries.next();
                    // empId = Integer.parseInt((String)entry.getKey());
                    empId = (Integer) entry.getKey();
                    empName = (String) entry.getValue();
                    employees.append("<USER empId=\"" + empId + "\">");
                    if (empName.contains("&")) {
                        empName = empName.replace("&", "&amp;");
                    }
                    employees.append(empName);
                    employees.append("</USER>");
                }
                employees.append("</EMPLOYEES>");
                employees.append("</xml>");

            } else if (teamType == 2) {

                Map secondaryMap = DataSourceDataProvider.getInstance().getCustomerSecondaryTeamMap(Integer.parseInt(reportsToId));

                Iterator entries = secondaryMap.entrySet().iterator();
                employees.append("<xml version=\"1.0\">");
                //   projects.append("<PROJECTS>");
                employees.append("<EMPLOYEES>");
                //projects.append("<USER projectId=\"-1\">--Please Select--</USER>");
                //  employees.append("<USER empId=\"-1\">--Please Select--</USER>");
                employees.append("<USER empId=\"All\">All</USER>");
                while (entries.hasNext()) {
                    Map.Entry entry = (Map.Entry) entries.next();
                    // empId = Integer.parseInt((String)entry.getKey());
                    empId = (Integer) entry.getKey();
                    empName = (String) entry.getValue();
                    employees.append("<USER empId=\"" + empId + "\">");
                    if (empName.contains("&")) {
                        empName = empName.replace("&", "&amp;");
                    }
                    employees.append(empName);
                    employees.append("</USER>");
                }
                employees.append("</EMPLOYEES>");
                employees.append("</xml>");

            } else if (teamType == 0) {
                //getCustomerAllTeamMap
                Map allTeamMap = DataSourceDataProvider.getInstance().getCustomerAllTeamMap(Integer.parseInt(reportsToId));

                Iterator entries = allTeamMap.entrySet().iterator();
                employees.append("<xml version=\"1.0\">");
                //   projects.append("<PROJECTS>");
                employees.append("<EMPLOYEES>");
                //projects.append("<USER projectId=\"-1\">--Please Select--</USER>");
                //  employees.append("<USER empId=\"-1\">--Please Select--</USER>");
                employees.append("<USER empId=\"All\">All</USER>");
                while (entries.hasNext()) {
                    Map.Entry entry = (Map.Entry) entries.next();
                    // empId = Integer.parseInt((String)entry.getKey());
                    empId = (Integer) entry.getKey();
                    empName = (String) entry.getValue();
                    employees.append("<USER empId=\"" + empId + "\">");
                    if (empName.contains("&")) {
                        empName = empName.replace("&", "&amp;");
                    }
                    employees.append(empName);
                    employees.append("</USER>");
                }
                employees.append("</EMPLOYEES>");
                employees.append("</xml>");
            } else {
                Map internalTeamMap = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);

                Iterator entries = internalTeamMap.entrySet().iterator();
                employees.append("<xml version=\"1.0\">");
                //   projects.append("<PROJECTS>");
                employees.append("<EMPLOYEES>");
                //projects.append("<USER projectId=\"-1\">--Please Select--</USER>");
                //  employees.append("<USER empId=\"-1\">--Please Select--</USER>");
                employees.append("<USER empId=\"All\">All</USER>");
                while (entries.hasNext()) {
                    Map.Entry entry = (Map.Entry) entries.next();
                    String loginId = (String) entry.getKey();
                    //  empId = (Integer)entry.getKey();
                    empName = (String) entry.getValue();
                    employees.append("<USER empId=\"" + loginId + "\">");
                    if (empName.contains("&")) {
                        empName = empName.replace("&", "&amp;");
                    }
                    employees.append(empName);
                    employees.append("</USER>");
                }
                employees.append("</EMPLOYEES>");
                employees.append("</xml>");
            }

            //  System.out.println("queryString-->"+queryString);

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        //     System.out.println("Team List: "+projects.toString());
        return employees.toString();
    }

    public boolean addReview(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        boolean isInserted = false;
        String queryString = "insert into tblEmpReview (ReviewTypeId,EmpComments,AttachmentName,AttachmentLocation,CreatdBy,ReviewName,ReviewDate,Status,MaxPoints,UserId,EmpTitle,BillingAmount,LogosCount) values(?,?,?,?,?,?,?,?,?,?,?,?,?)";
        ajaxHandlerAction.setReviewStatus(ajaxHandlerAction.getReviewStatusOverlay());
        if ("Team".equalsIgnoreCase(ajaxHandlerAction.getAddType())) {
            if (ajaxHandlerAction.getRoleName().equalsIgnoreCase("Employee")) {
                if (ajaxHandlerAction.getManager() == 1 && ajaxHandlerAction.getManagerCountry().equals("USA")) {
                    queryString = "insert into tblEmpReview (ReviewTypeId,EmpComments,AttachmentName,AttachmentLocation,CreatdBy,ReviewName,ReviewDate,OnSiteMgrStatus,MaxPoints,UserId,EmpTitle,ApprovedBy3,Approver3Date,OnSiteMgrComments,OnSiteMgrRating,ApprovedBy1,Approver1Date,TLComments,TLRating,Status) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    ajaxHandlerAction.setApproverComments(ajaxHandlerAction.getOnsiteMgrComments());
                    ajaxHandlerAction.setReviewStatus(ajaxHandlerAction.getReviewOnsiteMgrStatusOverlay());
                    ajaxHandlerAction.setRating(ajaxHandlerAction.getOnsiteMgrRating());
                } else {
                    queryString = "insert into tblEmpReview (ReviewTypeId,EmpComments,AttachmentName,AttachmentLocation,CreatdBy,ReviewName,ReviewDate,Status,MaxPoints,UserId,EmpTitle,ApprovedBy1,Approver1Date,TLComments,TLRating) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                    ajaxHandlerAction.setApproverComments(ajaxHandlerAction.getTlComments());
                    ajaxHandlerAction.setReviewStatus(ajaxHandlerAction.getReviewStatusOverlay());
                    ajaxHandlerAction.setRating(ajaxHandlerAction.getLeadRating());
                }
            } else {
                queryString = "insert into tblEmpReview (ReviewTypeId,EmpComments,AttachmentName,AttachmentLocation,CreatdBy,ReviewName,ReviewDate,HRStatus,MaxPoints,UserId,EmpTitle,ApprovedBy2,Approver2Date,HrComments,HRRating) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
                ajaxHandlerAction.setApproverComments(ajaxHandlerAction.getHrComments());
                ajaxHandlerAction.setReviewStatus(ajaxHandlerAction.getReviewHrStatusOverlay());
                ajaxHandlerAction.setRating(ajaxHandlerAction.getHrRating());
            }
        }
        // queryString = "insert into tblEmpReview (ReviewTypeId,EmpComments,AttachmentName,AttachmentLocation,EmpId,CreatdBy,ReviewName,ReviewDate,Status,TLRating,HRRating,MaxPoints,UserId,TLComments,HrComments,ApprovedBy2,Approver2Date) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            preparedStatement.setString(1, ajaxHandlerAction.getOverlayReviewType());
            preparedStatement.setString(2, ajaxHandlerAction.getOverlayDescription());
            preparedStatement.setString(3, ajaxHandlerAction.getFileFileName());
            preparedStatement.setString(4, ajaxHandlerAction.getAttachmentLocation());
            //  preparedStatement.setString(5,reviewPojo.getUploadFileName());
            //   preparedStatement.setInt(5,Integer.parseInt(ajaxHandlerAction.getEmpId()));
            preparedStatement.setString(5, ajaxHandlerAction.getCreatedBy());
            preparedStatement.setString(6, ajaxHandlerAction.getOverlayReviewName());
            preparedStatement.setDate(7, DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getOverlayReviewDate()));

            preparedStatement.setString(8, ajaxHandlerAction.getReviewStatus());
            preparedStatement.setInt(9, ajaxHandlerAction.getMaxPoints());
            preparedStatement.setString(10, ajaxHandlerAction.getUserId());
            preparedStatement.setString(11, ajaxHandlerAction.getEmpTitle());

//            preparedStatement.setInt(9, ajaxHandlerAction.getLeadRating());
//            preparedStatement.setInt(10, ajaxHandlerAction.getHrRating());
//            
//            
//            preparedStatement.setString(13, ajaxHandlerAction.getTlComments());
//            preparedStatement.setString(14, ajaxHandlerAction.getHrComments());

            if ("Team".equalsIgnoreCase(ajaxHandlerAction.getAddType())) {
                preparedStatement.setString(12, ajaxHandlerAction.getCreatedBy());
                preparedStatement.setTimestamp(13, DateUtility.getInstance().getCurrentMySqlDateTime());
                preparedStatement.setString(14, ajaxHandlerAction.getApproverComments());
                preparedStatement.setInt(15, ajaxHandlerAction.getRating());

                if (ajaxHandlerAction.getRoleName().equalsIgnoreCase("Employee")) {
                    if (ajaxHandlerAction.getManager() == 1 && ajaxHandlerAction.getManagerCountry().equals("USA")) {
                        preparedStatement.setString(16, ajaxHandlerAction.getCreatedBy());
                        preparedStatement.setTimestamp(17, DateUtility.getInstance().getCurrentMySqlDateTime());
                        preparedStatement.setString(18, ajaxHandlerAction.getTlComments());
                        preparedStatement.setInt(19, ajaxHandlerAction.getLeadRating());
                        preparedStatement.setString(20, ajaxHandlerAction.getReviewStatusOverlay());

                    }
                }
            } else {
                preparedStatement.setDouble(12, ajaxHandlerAction.getOverlayReviewBilling());
                preparedStatement.setInt(13, ajaxHandlerAction.getOverlayReviewLogAdded());
            }
            isInserted = preparedStatement.execute();
            // System.out.println("isInserted  " + isInserted);
        } catch (SQLException se) {
            se.printStackTrace();
            throw new ServiceLocatorException(se);
        } finally {
            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException se) {
                throw new ServiceLocatorException(se);
            }
        }

        return isInserted;

    }

    public boolean updateReview(AjaxHandlerAction ajaxHandlerAction, String roleName) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        boolean isUpdated = false;
        String queryString = "";


        //queryString = "update tblEmpReview set ReviewTypeId=?,EmpComments=?,ModifiedBy=?,ModifiedDate=?,ReviewName=?,ReviewDate=?,Status=?,TLComments=?,TLRating=?,HRRating=?,HrComments=? where Id=?";
        if (roleName.equalsIgnoreCase("Employee")) {

            if (ajaxHandlerAction.getManager() == 1 && ajaxHandlerAction.getManagerCountry().equals("USA")) {
                queryString = "update tblEmpReview set EmpComments=?,ApprovedBy3=?,Approver3Date=?,ReviewName=?,ReviewDate=?,OnSiteMgrStatus=?,OnSiteMgrComments=?,OnSiteMgrRating=?,BillingAmount=?,LogosCount=?,ApprovedBy1=?,Approver1Date=?,TLComments=?,TLRating=?,Status=? where Id=?";
                ajaxHandlerAction.setApproverComments(ajaxHandlerAction.getOnsiteMgrComments());
                ajaxHandlerAction.setReviewStatus(ajaxHandlerAction.getReviewOnsiteMgrStatusOverlay());
                ajaxHandlerAction.setRating(ajaxHandlerAction.getOnsiteMgrRating());
            } else {
                queryString = "update tblEmpReview set EmpComments=?,ApprovedBy1=?,Approver1Date=?,ReviewName=?,ReviewDate=?,Status=?,TLComments=?,TLRating=?,BillingAmount=?,LogosCount=? where Id=?";
                ajaxHandlerAction.setApproverComments(ajaxHandlerAction.getTlComments());
                ajaxHandlerAction.setReviewStatus(ajaxHandlerAction.getReviewStatusOverlay());
                ajaxHandlerAction.setRating(ajaxHandlerAction.getLeadRating());
            }
        } else {
            queryString = "update tblEmpReview set EmpComments=?,ApprovedBy2=?,Approver2Date=?,ReviewName=?,ReviewDate=?,HRStatus=?,HrComments=?,HRRating=?,BillingAmount=?,LogosCount=? where Id=?";
            ajaxHandlerAction.setApproverComments(ajaxHandlerAction.getHrComments());
            ajaxHandlerAction.setReviewStatus(ajaxHandlerAction.getReviewHrStatusOverlay());
            ajaxHandlerAction.setRating(ajaxHandlerAction.getHrRating());
        }
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            //  preparedStatement.setString(1,ajaxHandlerAction.getOverlayReviewType());
            preparedStatement.setString(1, ajaxHandlerAction.getOverlayDescription());

            // preparedStatement.setInt(3,Integer.parseInt(ajaxHandlerAction.getEmpId()));
            preparedStatement.setString(2, ajaxHandlerAction.getModifiedBy());
            preparedStatement.setTimestamp(3, DateUtility.getInstance().getCurrentMySqlDateTime());
            preparedStatement.setString(4, ajaxHandlerAction.getOverlayReviewName());
            preparedStatement.setDate(5, DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getOverlayReviewDate()));
            preparedStatement.setString(6, ajaxHandlerAction.getReviewStatus());
            preparedStatement.setString(7, ajaxHandlerAction.getApproverComments());
            preparedStatement.setInt(8, ajaxHandlerAction.getRating());

            preparedStatement.setDouble(9, ajaxHandlerAction.getOverlayReviewBilling());
            preparedStatement.setInt(10, ajaxHandlerAction.getOverlayReviewLogAdded());
            if (roleName.equalsIgnoreCase("Employee")) {

                if (ajaxHandlerAction.getManager() == 1 && ajaxHandlerAction.getManagerCountry().equals("USA")) {
                    preparedStatement.setString(11, ajaxHandlerAction.getModifiedBy());
                    preparedStatement.setTimestamp(12, DateUtility.getInstance().getCurrentMySqlDateTime());
                    preparedStatement.setString(13, ajaxHandlerAction.getTlComments());
                    preparedStatement.setInt(14, ajaxHandlerAction.getLeadRating());
                    preparedStatement.setString(15, ajaxHandlerAction.getReviewStatusOverlay());
                    preparedStatement.setString(16, ajaxHandlerAction.getReviewId());
                } else {
                    preparedStatement.setString(11, ajaxHandlerAction.getReviewId());
                }
            } else {
                preparedStatement.setString(11, ajaxHandlerAction.getReviewId());
            }
            isUpdated = preparedStatement.execute();

        } catch (SQLException se) {
            se.printStackTrace();
            throw new ServiceLocatorException(se);
        } finally {
            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException se) {
                throw new ServiceLocatorException(se);
            }
        }

        return isUpdated;

    }

    public String getApprovedByDetails(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String resultString1 = "";
        String query = "SELECT ApprovedBy1,ApprovedBy2,Approver1Comments,Approver2Comments FROM tblEmpReview WHERE Id=" + ajaxHandlerAction.getReviewId();
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();
            int count = 0;
            String ApprovedBy1 = "";
            String ApprovedBy2 = "";
            String Approver1Comments = "";
            String Approver2Comments = "";
            String approvedBy1Name = "";
            String approvedBy2Name = "";

            while (resultSet.next()) {
                ApprovedBy1 = resultSet.getString("ApprovedBy1");
                approvedBy1Name = DataSourceDataProvider.getInstance().getFname_Lname(ApprovedBy1);
                ApprovedBy2 = resultSet.getString("ApprovedBy2");
                approvedBy2Name = DataSourceDataProvider.getInstance().getFname_Lname(ApprovedBy2);
                Approver1Comments = resultSet.getString("Approver1Comments");
                Approver2Comments = resultSet.getString("Approver2Comments");

            }
            resultString1 = approvedBy1Name + "@" + Approver1Comments + "|" + approvedBy2Name + "@" + Approver2Comments + "|";
            //System.err.println("Result----"+sb);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        //  System.out.println("---------->" + resultString1);
        return resultString1;

    }

    public String getBasePoints(int reviewTypeId) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String response = "0";
        String query = "SELECT BasePoints FROM tblLkReviews WHERE STATUS = 'Active' AND Id =" + reviewTypeId;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();


            if (resultSet.next()) {
                response = resultSet.getString("BasePoints");

            }

            //System.err.println("Result----"+sb);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        //  System.out.println("---------->" + resultString1);
        return response;
    }

    public boolean updateMyReview(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        boolean isUpdated = false;
        String queryString = "";


        //queryString = "update tblEmpReview set ReviewTypeId=?,EmpComments=?,ModifiedBy=?,ModifiedDate=?,ReviewName=?,ReviewDate=?,Status=?,TLComments=?,TLRating=?,HRRating=?,HrComments=? where Id=?";
        //if(roleName.equalsIgnoreCase("Employee"))
        queryString = "update tblEmpReview set EmpComments=?,ReviewName=?,ReviewDate=?,Status=?,BillingAmount=?,LogosCount=? where Id=?";

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            //  preparedStatement.setString(1,ajaxHandlerAction.getOverlayReviewType());
            preparedStatement.setString(1, ajaxHandlerAction.getOverlayDescription());



            preparedStatement.setString(2, ajaxHandlerAction.getOverlayReviewName());
            preparedStatement.setDate(3, DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getOverlayReviewDate()));
            preparedStatement.setString(4, ajaxHandlerAction.getReviewStatusOverlay());
            preparedStatement.setDouble(5, ajaxHandlerAction.getOverlayReviewBilling());
            preparedStatement.setInt(6, ajaxHandlerAction.getOverlayReviewLogAdded());
            preparedStatement.setString(7, ajaxHandlerAction.getReviewId());

            isUpdated = preparedStatement.execute();

        } catch (SQLException se) {
            se.printStackTrace();
            throw new ServiceLocatorException(se);
        } finally {
            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException se) {
                throw new ServiceLocatorException(se);
            }
        }

        return isUpdated;

    }

    public String consultantActivitiesAsGraph(String startDate, String endDate, String activityType, String recruiterName, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        //System.out.println("This is consultantActivitiesAsGraph");
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            /*     queryString="SELECT CreatedById, ContactId, count(distinct tblCrmActivity.Id) as  total from tblCrmActivity join tblCrmAddress on tblCrmActivity.AccountId=tblCrmAddress.ObjectId" +
            " WHERE CreatedById in" +"("+team+")"+ "and " +
            "Country like '"+curWorkCountry+"'"+
            "and date(CreatedDate) >='"+startDate+"'"+" and date(CreatedDate) <='"+endDate+"'"+
            "GROUP BY CreatedById ORDER BY CreatedById, total";*/
            queryString = "SELECT CONCAT(tblEmployee.FName,'.',tblEmployee.LName) AS CreatedBy,COUNT(ActivityType) AS total FROM tblRecActivity "
                    + " LEFT OUTER JOIN tblEmployee ON (tblRecActivity.CreatedBy=tblEmployee.LoginId)WHERE 1=1 ";
            // System.out.println("After Query String");

            // System.out.println("startDate"+startDate);
            //System.out.println("endDate"+endDate);
            Map myTeamMemebrs = null;
            if (httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_CEO).toString().equalsIgnoreCase("yes")) {
                myTeamMemebrs = DataSourceDataProvider.getInstance().getRecruitmentEmployeeMap();
            } else {

                myTeamMemebrs = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);

                if (myTeamMemebrs.size() == 0) {
                    myTeamMemebrs.put(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString(), httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_NAME).toString());
                }
            }

            if (!"".equals(startDate) && !"".equals(endDate)) {
                queryString = queryString + " and  tblRecActivity.CreatedDate >= '" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)) + "%' and  tblRecActivity.CreatedDate <= '" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)) + "%' ";
                // System.out.println("startDate is"+startDate);
            }
            if (!"-1".equalsIgnoreCase(activityType)) {
                queryString = queryString + " and tblRecActivity.ActivityType like '" + activityType + "' ";
            }



            // Map myTeamMemebrs = (Map)httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
            //   Map myTeamMemebrs = dataSourceDataProvider.getMyTeamMembersForReview(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString(),httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_DEPT_ID).toString());
            //     List myTeamList = dataSourceDataProvider.getListFromMap(myTeamMemebrs);
            String teamList = DataSourceDataProvider.getInstance().getTeamLoginIdList(myTeamMemebrs);
            if (!"".equals(teamList)) {
                queryString = queryString + " and tblRecActivity.CreatedBy IN( " + teamList + " )";
            } else {
                queryString = queryString + " and tblRecActivity.CreatedBy IN( '" + httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString() + "' )";
            }


            queryString = queryString + "AND tblRecActivity.ActivityType NOT IN('--Please Select--') GROUP BY tblRecActivity.CreatedBy ";

            //System.out.println("queryString-->"+queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            //  System.out.println("Starting while loop");
            while (resultSet.next()) {
                i++;
                //String date = resultSet.getString("CreatedDate");
                //date = date.split(" ")[0];
                // System.out.println("date-->"+date);
                //activityDetails=activityDetails+i+"|"+resultSet.getInt("total")+"|"+resultSet.getString("CreatedBy")+"|^";
                activityDetails = activityDetails + i + "|" + resultSet.getString("CreatedBy") + "|" + resultSet.getInt("total") + "|^";
                //  System.out.println(" Query String");
            }
            //System.out.println("After while loop");
            stringBuffer.append(activityDetails);
            stringBuffer.append("addto");
            //stringBuffer.append(totalActivities);
            // stringBuffer.append("addto");
            stringBuffer.append(i);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.err.println("string is"+stringBuffer.toString());
        //System.out.println(stringBuffer.toString());
        return stringBuffer.toString();
    }
    //////////////////////////////////////////////////////////////////////////////////////////////////////

    public String consultantActivitiesAsGraphInd(String startDate, String endDate, String activityType, String recruiterName) throws ServiceLocatorException {
        //System.out.println("This is consultantActivitiesAsGraphIND");
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            /*     queryString="SELECT CreatedById, ContactId, count(distinct tblCrmActivity.Id) as  total from tblCrmActivity join tblCrmAddress on tblCrmActivity.AccountId=tblCrmAddress.ObjectId" +
            " WHERE CreatedById in" +"("+team+")"+ "and " +
            "Country like '"+curWorkCountry+"'"+
            "and date(CreatedDate) >='"+startDate+"'"+" and date(CreatedDate) <='"+endDate+"'"+
            "GROUP BY CreatedById ORDER BY CreatedById, total";*/
            queryString = "SELECT ActivityType,COUNT(ActivityType) as total FROM tblRecActivity WHERE CreatedBy ='" + recruiterName + "'  ";
            // System.out.println("After Query String");

            // if(!StartDate.equals("")&&!EndDate.equals(""))
            if (!"".equals(startDate) && !"".equals(endDate)) {
                queryString = queryString + " and  tblRecActivity.CreatedDate >= '" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)) + "%' and  tblRecActivity.CreatedDate <= '" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)) + "%' ";
            }
            if (!"-1".equalsIgnoreCase(activityType)) {
                queryString = queryString + " and tblRecActivity.ActivityType like '" + activityType + "' ";
            }
            //if(!"-1".equalsIgnoreCase(recruiterName))
            //{
            // queryString = queryString + " and tblRecActivity.CreatedBy like '"+ recruiterName +"' ";
            //}

            queryString = queryString + "AND tblRecActivity.ActivityType NOT IN('--Please Select--') GROUP BY ActivityType ";

            //System.out.println("queryString-->"+queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            // System.out.println("Starting while loop");
            while (resultSet.next()) {
                i++;
                //String date = resultSet.getString("CreatedDate");
                //date = date.split(" ")[0];
                // System.out.println("date-->"+date);
                //activityDetails=activityDetails+i+"|"+resultSet.getInt("total")+"|"+resultSet.getString("CreatedBy")+"|^";
                activityDetails = activityDetails + i + "|" + resultSet.getString("ActivityType") + "|" + resultSet.getInt("total") + "|^";
                //  System.out.println(" Query String");
            }
            // System.out.println("After while loop");
            stringBuffer.append(activityDetails);
            stringBuffer.append("addto");
            //stringBuffer.append(totalActivities);
            // stringBuffer.append("addto");
            stringBuffer.append(i);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.err.println("string is"+stringBuffer.toString());
        // System.out.println(stringBuffer.toString());
        return stringBuffer.toString();
    }

//new methods for account merge
    public String ConsultantAnalysis(String original, String duplicate) throws ServiceLocatorException {
        //  System.out.println("This is ConsultantAnalysis");
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";

        String orinalDetails = "";
        String duplicateDetails = "";
        int i = 0;

        try {

            queryString = "SELECT * from tblRecConsultant WHERE Email2 =?";
            //System.out.println("After Query String");
            int originalAttachmentId;
            int duplicateAttachmentId;
            originalAttachmentId = (DataSourceDataProvider.getInstance().getConsultantDetails(original));
            duplicateAttachmentId = (DataSourceDataProvider.getInstance().getConsultantDetails(duplicate));
            //System.out.println("queryString-->"+queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            preparedStatement.setString(1, original);

            resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                orinalDetails = resultSet.getString("Email2") + "|" + resultSet.getString("FName") + "|" + resultSet.getString("CellPhoneNo") + "|" + resultSet.getInt("Id") + "|" + resultSet.getString("SkillSet") + "|" + originalAttachmentId;
            }
            resultSet.close();
            preparedStatement.setString(1, duplicate);
            resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                duplicateDetails = resultSet.getString("Email2") + "|" + resultSet.getString("FName") + "|" + resultSet.getString("CellPhoneNo") + "|" + resultSet.getInt("Id") + "|" + resultSet.getString("SkillSet") + "|" + duplicateAttachmentId;
            }

            //  System.out.println("The original Details are--->"+orinalDetails);
            //   System.out.println("The duplicateDetailss are--->"+duplicateDetails);




        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.err.println("string is"+stringBuffer.toString());
        // System.out.println("string is"+orinalDetails+"*"+duplicateDetails);
        return orinalDetails + "*" + duplicateDetails;
    }

    public String getMergeConsultants(String original, String duplicate) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        CallableStatement callableStatement = null;



        String resutMessage = "";
        String queryString = " ";



        try {
            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call ConsultantsMerge(?,?,?)}");
            callableStatement.setString(1, original);
            callableStatement.setString(2, duplicate);
            callableStatement.registerOutParameter(3, java.sql.Types.VARCHAR);
            callableStatement.executeUpdate();
            resutMessage = callableStatement.getString(3);


        } catch (SQLException se) {
            se.printStackTrace();
            throw new ServiceLocatorException(se);
        } finally {
            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException se) {
                se.printStackTrace();
                throw new ServiceLocatorException(se);
            }
        }
        //  System.out.println("The result msg is "+resutMessage);
        return resutMessage;

    }

    public String getIssueTypeBasedOnIssueRel(String issueRel) throws ServiceLocatorException {
        // StringBuffer projects  = new StringBuffer();
        StringBuffer issues = new StringBuffer();
        //  String projectName = null;
        String description = null;
        // int projectId=0;
        String issueTypeId = "";

        String title = "";

        {
            queryString = "SELECT IssueTypeId,Description FROM tblLKIssueType "
                    + "WHERE STATUS='Active' AND IsIssueRelatedToID =" + issueRel + " ORDER BY IssueTypeId";
        }

        //System.out.println("queryString-->"+queryString);
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            issues.append("<xml version=\"1.0\">");
            //   projects.append("<PROJECTS>");
            issues.append("<ISSUESRELATEDTO>");
            //projects.append("<USER projectId=\"-1\">--Please Select--</USER>");
            //  employees.append("<USER empId=\"-1\">--Please Select--</USER>");
            //   employees.append("<USER loginId=\"-1\">Please Select</USER>");
            while (resultSet.next()) {
                // projectId=resultSet.getInt("Id");
                issueTypeId = resultSet.getString("IssueTypeId");
                description = resultSet.getString("Description");

                // projects.append(projectName);

                //projects.append("<USER projectId=\""+projectId+"\">");
                issues.append("<Issue IssueTypeId=\"" + issueTypeId + "\">");
                if (description.contains("&")) {
                    description = description.replace("&", "&amp;");
                }
                issues.append(description);
                issues.append("</Issue>");

            }
            issues.append("</ISSUESRELATEDTO>");
            issues.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        //  System.out.println("Team List: "+employees.toString());
        return issues.toString();
    }
//new methods for sales activity graph

    //  public String salesActivitiesAsGraph(String startDate, String endDate, String activityType, String recruiterName, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
   /* public String salesActivitiesAsGraph(String startDate, String endDate, String activityType, String recruiterName, HttpServletRequest httpServletRequest, String campaignId) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            /* queryString = "SELECT CONCAT(tblEmployee.FName,'.',tblEmployee.LName) AS CreatedById,COUNT(ActivityType) AS total ,tblEmployee.LoginId AS LoginId FROM tblCrmActivity "
            + " LEFT OUTER JOIN tblEmployee ON (tblCrmActivity.CreatedById=tblEmployee.LoginId)  WHERE 1=1";
             
            queryString = "SELECT COUNT(DISTINCT tblCrmActivity.Id) AS total,tblCrmActivity.CreatedById AS LoginId FROM tblCrmAccountTeam LEFT OUTER JOIN tblCrmActivity ON (tblCrmAccountTeam.AccountId=tblCrmActivity.AccountId) WHERE 1=1  ";
            if (!"".equals(startDate) && !"".equals(endDate)) {

                queryString = queryString + " and  tblCrmActivity.CreatedDate >= '" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)) + "%' and  tblCrmActivity.CreatedDate <= '" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)) + "%' ";
            }
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            AccountService accountService = ServiceLocator.getAccountService();
            Map myTeammembers = null;
//            if (loginId.equals("plokam")) {
//                myTeammembers = accountService.getAllSalesTeamExceptAccountTeam(new TreeMap());
//            } else {
//                myTeammembers = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
//            }
            myTeammembers = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
            myTeammembers.put(loginId, httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_NAME).toString());
            // Map myTeammembers = DataSourceDataProvider.getInstance().getMyTeamMembers(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString(), httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_DEPT_ID).toString());
            Iterator iterator = myTeammembers.entrySet().iterator();
            String teammembersLoginIds = "";
            while (iterator.hasNext()) {
                Map.Entry mapEntry = (Map.Entry) iterator.next();
                teammembersLoginIds = teammembersLoginIds + "'" + mapEntry.getKey() + "',";
            }
            String finalLoginIds = "";

            finalLoginIds = teammembersLoginIds.substring(0, teammembersLoginIds.length() - 1);
            // finalLoginIds = teammembersLoginIds+"'"+loginId+"'";

            finalLoginIds = "(" + finalLoginIds + ")";


            if (!"-1".equalsIgnoreCase(activityType)) {
                queryString = queryString + " and tblCrmActivity.ActivityType like '" + activityType + "' ";
            }


            String title = "";

            if ("-1".equals(recruiterName)) {
                title = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE).toString();
                // System.out.println("title....."+title);
            }



            if (("BDM".equalsIgnoreCase(title.trim()) || "Vice President".equalsIgnoreCase(title.trim()))) {

                if (!"-1".equals(recruiterName)) {
                    // System.out.println(" else recruiterName"+recruiterName);
                    queryString = queryString + " AND  tblCrmAccountTeam.TeamMemberId  like (" + recruiterName + ")";

                } else {
                    // System.out.println("else recruiterName"+finalLoginIds);
                    queryString = queryString + " AND  tblCrmAccountTeam.TeamMemberId  IN" + finalLoginIds;
                }

            } else {
                if (!"-1".equals(recruiterName)) {
                    // System.out.println("recruiterName"+recruiterName);
                    queryString = queryString + " AND tblCrmActivity.CreatedById like (" + recruiterName + ")";

                } else {
                    // System.out.println("recruiterName"+finalLoginIds);
                    queryString = queryString + " AND tblCrmActivity.CreatedById IN" + finalLoginIds;
                }
            }
            //  queryString = queryString + "AND tblCrmActivity.ActivityType NOT IN('--Please Select--') GROUP BY tblCrmActivity.CreatedById  ";
            if (!"".equalsIgnoreCase(campaignId)) {
                queryString = queryString + " AND tblCrmActivity.CampaignId =" + campaignId;
            }

            queryString = queryString + " AND tblCrmActivity.ActivityType NOT IN('--Please Select--') GROUP BY tblCrmActivity.CreatedById  ";
            //  System.out.println("salesActivitiesAsGraph---" + queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            while (resultSet.next()) {
                i++;
                // activityDetails = activityDetails + i + "|" + resultSet.getString("CreatedById") + "|" + resultSet.getInt("total") + "|^";
                activityDetails = activityDetails + i + "|" + resultSet.getString("LoginId") + "|" + resultSet.getInt("total") + "|^";

            }
            stringBuffer.append(activityDetails);
            stringBuffer.append("addto");
            stringBuffer.append(i);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return stringBuffer.toString();
    }*/
public String salesActivitiesAsGraph(String startDate, String endDate, String activityType, String recruiterName, HttpServletRequest httpServletRequest, String campaignId) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
         String responseString = "";
        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            /* queryString = "SELECT CONCAT(tblEmployee.FName,'.',tblEmployee.LName) AS CreatedById,COUNT(ActivityType) AS total ,tblEmployee.LoginId AS LoginId FROM tblCrmActivity "
            + " LEFT OUTER JOIN tblEmployee ON (tblCrmActivity.CreatedById=tblEmployee.LoginId)  WHERE 1=1";
             */
            connection = ConnectionProvider.getInstance().getConnection();
               String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
             String titleType = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE);
              AccountService accountService = ServiceLocator.getAccountService();
            Map myTeammembers = null;
//            if (loginId.equals("plokam")) {
//                myTeammembers = accountService.getAllSalesTeamExceptAccountTeam(new TreeMap());
//            } else {
//                myTeammembers = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
//            }
             if(titleType.equals("BDM")){
                            String empId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_ID).toString();   
                        myTeammembers = DataSourceDataProvider.getInstance().getBdmAssociateList(empId);
             }
             else{
                  myTeammembers = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
             }
            myTeammembers.put(loginId, httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_NAME).toString());
         //   System.out.println("myTeammembers of salesActivitiesAsGraph----->"+myTeammembers);
            // Map myTeammembers = DataSourceDataProvider.getInstance().getMyTeamMembers(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString(), httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_DEPT_ID).toString());
            Iterator iterator = myTeammembers.entrySet().iterator();
            String teammembersLoginIds = "";
            while (iterator.hasNext()) {
                Map.Entry mapEntry = (Map.Entry) iterator.next();
                teammembersLoginIds = teammembersLoginIds + "'" + mapEntry.getKey() + "',";
            }
            String finalLoginIds = "";

            finalLoginIds = teammembersLoginIds.substring(0, teammembersLoginIds.length() - 1);
            // finalLoginIds = teammembersLoginIds+"'"+loginId+"'";
   if(!titleType.equals("BDM")){
            finalLoginIds = "(" + finalLoginIds + ")";
   }
   if(!titleType.equals("BDM")){
        finalLoginIds = finalLoginIds ;
   }
             if(!titleType.equals("BDM")){
                // System.out.println("in non BDM case");
            queryString = "SELECT COUNT(DISTINCT tblCrmActivity.Id) AS total,tblCrmActivity.CreatedById AS LoginId FROM tblCrmAccountTeam LEFT OUTER JOIN tblCrmActivity ON (tblCrmAccountTeam.AccountId=tblCrmActivity.AccountId) WHERE 1=1  ";
            if (!"".equals(startDate) && !"".equals(endDate)) {

                queryString = queryString + " and  tblCrmActivity.CreatedDate >= '" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)) + "%' and  tblCrmActivity.CreatedDate <= '" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)) + "%' ";
            }
         
           

            if (!"-1".equalsIgnoreCase(activityType)) {
                queryString = queryString + " and tblCrmActivity.ActivityType like '" + activityType + "' ";
            }


            String title = "";

            if ("-1".equals(recruiterName)) {
                title = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE).toString();
                // System.out.println("title....."+title);
            }



//            if (("BDM".equalsIgnoreCase(title.trim()) || "Vice President".equalsIgnoreCase(title.trim()))) {
 if (("Vice President".equalsIgnoreCase(title.trim()))) {
                if (!"-1".equals(recruiterName)) {
                    // System.out.println(" else recruiterName"+recruiterName);
                    queryString = queryString + " AND  tblCrmAccountTeam.TeamMemberId  like (" + recruiterName + ")";

                } else {
                    // System.out.println("else recruiterName"+finalLoginIds);
                    queryString = queryString + " AND  tblCrmAccountTeam.TeamMemberId  IN" + finalLoginIds;
                }

            } else {
                if (!"-1".equals(recruiterName)) {
                    // System.out.println("recruiterName"+recruiterName);
                    queryString = queryString + " AND tblCrmActivity.CreatedById like (" + recruiterName + ")";

                } else {
                    // System.out.println("recruiterName"+finalLoginIds);
                    queryString = queryString + " AND tblCrmActivity.CreatedById IN" + finalLoginIds;
                }
            }
            //  queryString = queryString + "AND tblCrmActivity.ActivityType NOT IN('--Please Select--') GROUP BY tblCrmActivity.CreatedById  ";
            if (!"".equalsIgnoreCase(campaignId)) {
                queryString = queryString + " AND tblCrmActivity.CampaignId =" + campaignId;
            }

            queryString = queryString + " AND tblCrmActivity.ActivityType NOT IN('--Please Select--') GROUP BY tblCrmActivity.CreatedById  ";
           //   System.out.println("salesActivitiesAsGraph---" + queryString);
            
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            while (resultSet.next()) {
                i++;
                // activityDetails = activityDetails + i + "|" + resultSet.getString("CreatedById") + "|" + resultSet.getInt("total") + "|^";
                activityDetails = activityDetails + i + "|" + resultSet.getString("LoginId") + "|" + resultSet.getInt("total") + "|^";

            }
               //  System.out.println("activityDetails is---->"+activityDetails);
            stringBuffer.append(activityDetails);
               //  System.out.println("stringBuffer.toString() is---->"+stringBuffer.toString());
            stringBuffer.append("addto");
            stringBuffer.append(i);
             }
             
             if(titleType.equals("BDM")){
               //   System.out.println("in BDM case case");
            
                       callableStatement = connection.prepareCall("{call spBdmActivitySummary(?,?,?,?,?,?,?)}");
         
                           if (startDate != null && !"".equals(startDate)) {
            callableStatement.setString(1, DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)));
                           }
                           else{
                                callableStatement.setString(1,"%");
                           }
                    //   System.out.println("Start Date---->"+DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)));
                       if (endDate != null && !"".equals(endDate)) {
            callableStatement.setString(2,DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)));
                       }
                       else{
                             callableStatement.setString(2,"%");
                       }
                    //   System.out.println("End Date---->"+DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)));
           if (!"-1".equalsIgnoreCase(activityType)) {
                 callableStatement.setString(3,activityType);
            }
            else{
                callableStatement.setString(3,"%");
            }
               //  System.out.println("activityType is--->"+activityType);
   if (!"".equalsIgnoreCase(campaignId)) {
        callableStatement.setString(4,campaignId);
   }
   else{
         callableStatement.setString(4,"%");
   }
             //    System.out.println("campaignId is---->"+campaignId);
                 finalLoginIds=finalLoginIds.replaceAll("'", "");
        if (!"-1".equals(recruiterName)) {
             callableStatement.setString(5,recruiterName);
        }
        else{
             callableStatement.setString(5,finalLoginIds);
        }
              //   System.out.println("recruiterName---->"+recruiterName);
              //   System.out.println("finalLoginIds---->"+finalLoginIds);
                        callableStatement.setString(6,loginId);
                 //       System.out.println("loginId is---->"+loginId);
            callableStatement.registerOutParameter(7, Types.VARCHAR);
            

            callableStatement.executeUpdate();
           String response=callableStatement.getString(7);
                     //  System.out.println("response...."+response);
 stringBuffer.delete(0, stringBuffer.length());
            stringBuffer.append(callableStatement.getString(7));
       //   stringBuffer.append(response);
            
          //  System.out.println("stringBuffer is---->"+stringBuffer.toString());
          //  System.out.println("stringBuffer is---->"+stringBuffer.toString());
                  
                   StringBuffer newString = new StringBuffer();
                    responseString=stringBuffer.toString();
                 //   System.out.println("responseString---->"+responseString);
             }
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return stringBuffer.toString();
    }

    // public String salesActivitiesAsGraphInd(String startDate, String endDate, String activityType, String createdBy,int teamMemberCheck) throws ServiceLocatorException {
    //public String salesActivitiesAsGraphInd(String startDate, String endDate, String activityType, String createdBy,int teamMemberCheck,String titleType) throws ServiceLocatorException {
   /* public String salesActivitiesAsGraphInd(String startDate, String endDate, String activityType, String createdBy, int teamMemberCheck, String titleType, String campaignId) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        int i = 0;
        String resutMessage = "";
        String empNamesList = "'" + createdBy + "'";

        try {
            queryString = " ";
            if (teamMemberCheck == 1) {
                String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(createdBy);
                Map teamMap = DataSourceDataProvider.getInstance().getMyTeamMembers(createdBy, departmentId);
                String teamKeys = getKeys(teamMap, ",");

                //if(empNamesList.equalsIgnoreCase(""))
                if (!"".equals(teamKeys)) {
                    empNamesList = getKeys(teamMap, ",");
                }
            }
            empNamesList = empNamesList.replaceAll("'", "");

            //  System.out.println("empNamesList-->"+empNamesList);
            connection = ConnectionProvider.getInstance().getConnection();
            //callableStatement = connection.prepareCall("{call spSalesActivitiesAsGraphInd(?,?,?,?,?,?)}");
            callableStatement = connection.prepareCall("{call spSalesActivitiesAsGraphInd(?,?,?,?,?,?,?)}");
            // System.out.println("Date"+DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)));
            // System.out.println("endDate"+DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)));
            callableStatement.setString(1, DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)));
            callableStatement.setString(2, DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)));
            if ("-1".equals(activityType)) {
                activityType = "%";
            }
            callableStatement.setString(3, activityType);
            if ("-1".equals(empNamesList)) {
                empNamesList = "%";
            }
            if ("".equals((titleType.trim())) || (!"BDM".equalsIgnoreCase(titleType.trim()) && !"Vice President".equalsIgnoreCase(titleType.trim()))) {
                titleType = "%";
            }

            if ("".equals(campaignId)) {
                campaignId = "%";
            }




            // System.out.println("titleType........"+titleType);
            callableStatement.setString(4, empNamesList);
            callableStatement.setString(5, titleType.toUpperCase().trim());
            callableStatement.setString(6, campaignId);
            callableStatement.registerOutParameter(7, java.sql.Types.VARCHAR);
            callableStatement.executeUpdate();
            activityDetails = callableStatement.getString(7);

            // System.out.println("activityDetails..."+activityDetails);


        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return activityDetails;
    }*/
 public String salesActivitiesAsGraphInd(String startDate, String endDate, String activityType, String createdBy, int teamMemberCheck, String titleType, String campaignId,String sessionTitleType,HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        int i = 0;
        String resutMessage = "";
        String empNamesList = "'" + createdBy + "'";
        Map teamMap ;

       // System.out.println("createdBy is---->"+createdBy);
        try {
           // System.out.println("String sessionTitleType---->"+sessionTitleType);
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            queryString = " ";
           // System.out.println("teamMemberCheck---->"+teamMemberCheck);
            if (teamMemberCheck == 1) {
                if(titleType.equals("BDM")){
                    
                       int empId= DataSourceDataProvider.getInstance().getEmpIdByLoginId(createdBy);
               teamMap = DataSourceDataProvider.getInstance().getBdmAssociateList(Integer.toString(empId));
                  //  System.out.println("teamMap in if case is----->"+teamMap);   
                }
                else{
                String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(createdBy);
                teamMap = DataSourceDataProvider.getInstance().getMyTeamMembers(createdBy, departmentId);
               //  System.out.println("teamMap in else case is----->"+teamMap);   
                }
             
                String teamKeys = getKeys(teamMap, ",");
               // System.out.println("teamKeys---->"+teamKeys);
                //if(empNamesList.equalsIgnoreCase(""))
                if (!"".equals(teamKeys)) {
                    empNamesList = getKeys(teamMap, ",");
                }
            //    System.out.println("empNamesList before is---->"+empNamesList);
            }
            empNamesList = empNamesList.replaceAll("'", "");
//System.out.println("empNamesList after is---->"+empNamesList);
             if(!sessionTitleType.equals("BDM")){
            //  System.out.println("non BDM case-->");
            connection = ConnectionProvider.getInstance().getConnection();
            //callableStatement = connection.prepareCall("{call spSalesActivitiesAsGraphInd(?,?,?,?,?,?)}");
            callableStatement = connection.prepareCall("{call spSalesActivitiesAsGraphInd(?,?,?,?,?,?,?)}");
           //  System.out.println("Date"+DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)));
           //  System.out.println("endDate"+DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)));
            callableStatement.setString(1, DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)));
            callableStatement.setString(2, DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)));
           // System.out.println("activityType is---->"+activityType);
            if ("-1".equals(activityType)) {
                activityType = "%";
            }
            callableStatement.setString(3, activityType);
          //  System.out.println("empNamesList---->"+empNamesList);
            if ("-1".equals(empNamesList)) {
                empNamesList = "%";
            }
           // System.out.println("titleType----"+titleType);
            if ("".equals((titleType.trim())) || (!"BDM".equalsIgnoreCase(titleType.trim()) && !"Vice President".equalsIgnoreCase(titleType.trim()))) {
                titleType = "%";
            }
          //  System.out.println("campaignId----->"+campaignId);
            if ("".equals(campaignId)) {
                campaignId = "%";
            }




          //   System.out.println("loginId........"+loginId);
          //  System.out.println("empNamesList before calling prepared stmt is---->"+empNamesList);
            callableStatement.setString(4, empNamesList);
         //   System.out.println("titleType.toUpperCase().trim()---->"+titleType.toUpperCase().trim());
            callableStatement.setString(5, titleType.toUpperCase().trim());
         //   System.out.println("campaignId----->"+campaignId);
            callableStatement.setString(6, campaignId);
//            callableStatement.setString(7, loginId);
            callableStatement.registerOutParameter(7, java.sql.Types.VARCHAR);
            callableStatement.executeUpdate();
            activityDetails = callableStatement.getString(7);

           //  System.out.println("activityDetails..."+activityDetails);
            }

            if(sessionTitleType.equals("BDM")){
              System.out.println("in bdm case-->");
            connection = ConnectionProvider.getInstance().getConnection();
            //callableStatement = connection.prepareCall("{call spSalesActivitiesAsGraphInd(?,?,?,?,?,?)}");
            callableStatement = connection.prepareCall("{call spBdmSalesActivitiesAsGraphInd(?,?,?,?,?,?,?,?)}");
          //   System.out.println("Date"+DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)));
           //  System.out.println("endDate"+DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)));
            callableStatement.setString(1, DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)));
            callableStatement.setString(2, DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)));
         //   System.out.println("activityType is---->"+activityType);
            if ("-1".equals(activityType)) {
                activityType = "%";
            }
            callableStatement.setString(3, activityType);
           // System.out.println("empNamesList---->"+empNamesList);
            if ("-1".equals(empNamesList)) {
                empNamesList = "%";
            }
           // System.out.println("titleType----"+titleType);
            if ("".equals((titleType.trim())) || (!"BDM".equalsIgnoreCase(titleType.trim()) && !"Vice President".equalsIgnoreCase(titleType.trim()))) {
                titleType = "%";
            }
            System.out.println("campaignId----->"+campaignId);
            if ("".equals(campaignId)) {
                campaignId = "%";
            }




           //  System.out.println("loginId........"+loginId);
          //  System.out.println("empNamesList before calling prepared stmt is---->"+empNamesList);
            callableStatement.setString(4, empNamesList);
           // System.out.println("titleType.toUpperCase().trim()---->"+titleType.toUpperCase().trim());
            callableStatement.setString(5, titleType.toUpperCase().trim());
         //   System.out.println("campaignId----->"+campaignId);
            callableStatement.setString(6, campaignId);
            callableStatement.setString(7, loginId);
            callableStatement.registerOutParameter(8, java.sql.Types.VARCHAR);
            callableStatement.executeUpdate();
            activityDetails = callableStatement.getString(8);

            // System.out.println("activityDetails..."+activityDetails);
            }
            
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return activityDetails;
    }
    public String getReviewDetails(String reviewId) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        int i = 0;
        JSONObject subJson = null;
        try {
            queryString = "SELECT  CONCAT(tblEmployee.FName,' ',tblEmployee.MName,'.',tblEmployee.LName) AS EmployeeName,ReviewType,EmpId,ReviewTypeId,tblEmpReview.Status,EmpComments,tblEmpReview.CreatdBy,tblEmpReview.CreatedDate,AttachmentName,AttachmentLocation,ReviewName,tblEmpReview.Id AS Id,HrComments,TLComments,ReviewDate,TLRating,HRRating,MaxPoints,ApprovedBy1,Approver1Date,Approver2Date,ApprovedBy2,Approver3Date,ApprovedBy3,OnSiteMgrRating,OnSiteMgrComments,OnSiteMgrStatus,HRStatus,BillingAmount,LogosCount,tblEmpReview.UserId as UserId FROM tblEmpReview JOIN tblLkReviews ON (ReviewTypeId = tblLkReviews.Id) JOIN tblEmployee ON (tblEmpReview.UserId = tblEmployee.LoginId) WHERE tblEmpReview.Id=" + reviewId;

//System.out.println("queryString-->"+queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            if (resultSet.next()) {
                subJson = new JSONObject();
                subJson.put("EmployeeName", resultSet.getString("EmployeeName"));
                subJson.put("ReviewType", resultSet.getString("ReviewType"));
                subJson.put("EmpId", resultSet.getString("EmpId"));
                subJson.put("ReviewTypeId", resultSet.getString("ReviewTypeId"));
                subJson.put("Status", resultSet.getString("Status"));
                subJson.put("EmpComments", resultSet.getString("EmpComments"));
                subJson.put("CreatdBy", resultSet.getString("CreatdBy"));
                subJson.put("CreatedDate", resultSet.getString("CreatedDate"));
                subJson.put("AttachmentName", resultSet.getString("AttachmentName"));
                subJson.put("AttachmentLocation", resultSet.getString("AttachmentLocation"));
                subJson.put("ReviewName", resultSet.getString("ReviewName"));
                subJson.put("Id", resultSet.getString("Id"));
                subJson.put("ReviewDate", resultSet.getString("ReviewDate"));
                subJson.put("UserId", resultSet.getString("UserId"));
                subJson.put("HrComments", resultSet.getString("HrComments"));
                subJson.put("TLComments", resultSet.getString("TLComments"));
                subJson.put("TLRating", resultSet.getString("TLRating"));
                subJson.put("HRRating", resultSet.getString("HRRating"));
                subJson.put("MaxPoints", resultSet.getString("MaxPoints"));
                subJson.put("ApprovedBy1", resultSet.getString("ApprovedBy1"));
                subJson.put("Approver1Date", resultSet.getString("Approver1Date"));
                subJson.put("Approver2Date", resultSet.getString("Approver2Date"));
                subJson.put("ApprovedBy2", resultSet.getString("ApprovedBy2"));
                subJson.put("Approver3Date", resultSet.getString("Approver3Date"));
                subJson.put("ApprovedBy3", resultSet.getString("ApprovedBy3"));
                subJson.put("OnSiteMgrRating", resultSet.getString("OnSiteMgrRating"));
                subJson.put("OnSiteMgrComments", resultSet.getString("OnSiteMgrComments"));
                subJson.put("OnSiteMgrStatus", resultSet.getString("OnSiteMgrStatus"));
                subJson.put("BillingAmount", resultSet.getString("BillingAmount"));
                subJson.put("LogosCount", resultSet.getString("LogosCount"));
                subJson.put("HRStatus", resultSet.getString("HRStatus"));
            }



        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return subJson.toString();
    }

    /*
     * Method : 
     * Reason : displaying required reviews list for appraisal
     * Date : 03/26/2015
     * Author : Santosh Kola
     */
    public String getEmpTotalReviews(String userId, int reviewTypeId) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String createdBy = "";
        String totalStream = "";
        int i = 0;
        String responseString = "";
        boolean isDataAvailable = false;
        try {


            // queryString = "SELECT ReviewName,tblEmpReview.Id,ReviewType,EmpComments,TLrating,HRRating ,tblEmpReview.STATUS,TLComments,HrComments,RevisedDate ,tblEmpReview.ReviewDate FROM tblEmpReview LEFT JOIN tblLkReviews ON (tblEmpReview.ReviewTypeId=tblLkReviews.Id) LEFT JOIN tblEmployee ON (tblEmpReview.UserId=tblEmployee.LoginId) WHERE UserId LIKE '"+userId+"' AND tblEmpReview.STATUS IN ('Approved','Denied') AND tblEmpReview.ReviewDate>=tblEmployee.RevisedDate AND tblEmpReview.ReviewDate <=tblEmployee.NextRevisedDate ";
            queryString = "SELECT ReviewName,tblEmpReview.Id,ReviewType,EmpComments,TLrating,HRRating ,tblEmpReview.STATUS,tblEmpReview.HRStatus,TLComments,HrComments,RevisedDate ,tblEmpReview.ReviewDate FROM tblEmpReview LEFT JOIN tblLkReviews ON (tblEmpReview.ReviewTypeId=tblLkReviews.Id) LEFT JOIN tblEmployee ON (tblEmpReview.UserId=tblEmployee.LoginId) WHERE UserId LIKE '" + userId + "' AND tblEmpReview.ReviewDate>=tblEmployee.RevisedDate AND tblEmpReview.ReviewDate <=tblEmployee.NextRevisedDate ";

            if (reviewTypeId != 0) {
                queryString = queryString + " AND tblEmpReview.ReviewTypeId=" + reviewTypeId;
            }
            queryString = queryString + " ORDER BY tblEmpReview.ReviewDate DESC";
            // System.out.println("query--" + queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            while (resultSet.next()) {

                responseString = responseString + resultSet.getString("ReviewType") + "#^$";
                responseString = responseString + resultSet.getString("ReviewName") + "#^$";
                responseString = responseString + resultSet.getString("EmpComments") + "#^$";
                responseString = responseString + resultSet.getString("STATUS") + "#^$";
                responseString = responseString + resultSet.getString("TLrating") + "#^$";
                responseString = responseString + resultSet.getString("TLComments") + "#^$";
                responseString = responseString + resultSet.getString("HRStatus") + "#^$";
                responseString = responseString + resultSet.getString("HRRating") + "#^$";
                responseString = responseString + resultSet.getString("HrComments") + "#^$";
                responseString = responseString + resultSet.getString("ReviewDate").split(" ")[0] + "#^$";

                responseString = responseString + resultSet.getString("Id") + "*@!";

                isDataAvailable = true;
            }
            //  System.err.println("response String---"+responseString);
            if (!isDataAvailable) {
                responseString = "no data";
            }
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public String getEmpReviewComments(String reviewId) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String response = "";
        String query = "SELECT EmpComments FROM tblEmpReview WHERE Id =" + reviewId;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();


            if (resultSet.next()) {
                response = resultSet.getString("EmpComments");

            }
            if ("".equals(response) || response == null) {
                response = "No data";
            }
            //System.err.println("Result----"+sb);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        //  System.out.println("---------->" + resultString1);
        return response;
    }

    public String getTlReviewComments(String reviewId) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String response = "";
        String query = "SELECT TLComments FROM tblEmpReview WHERE Id =" + reviewId;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();


            if (resultSet.next()) {
                response = resultSet.getString("TLComments");

            }
            if ("".equals(response) || response == null) {
                response = "No data";
            }
            //System.err.println("Result----"+sb);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        //  System.out.println("---------->" + resultString1);
        return response;
    }

    public String getHrReviewComments(String reviewId) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String response = "";
        String query = "SELECT HrComments FROM tblEmpReview WHERE Id =" + reviewId;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();


            if (resultSet.next()) {

                response = resultSet.getString("HrComments");

            }
            if ("".equals(response) || response == null) {
                response = "No data";
            }

            //System.err.println("Result----"+sb);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        //  System.out.println("---------->" + resultString1);
        return response;
    }

    /*
     * MEthod for Employees list by dept
     * Date : 03/27/2015
     * Author : Santosh Kola
     */
    public String getEmployeesByDept(String deptName) throws ServiceLocatorException {
        StringBuffer reportsToBuffer = new StringBuffer();
        String loginId = null;
        String topManagementPeople[] = null;
        boolean isTopManager = false;



        try {
            if (deptName == null || "".equals(deptName)) {
                deptName = "%";
            }
            queryString = "SELECT LoginId,CONCAT(TRIM(FName),'.',TRIM(LName)) AS EmployeeName FROM tblEmployee WHERE DepartmentId LIKE '" + deptName + "' AND CurStatus='Active' ORDER BY EmployeeName";
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            reportsToBuffer.append("<xml version=\"1.0\">");
            reportsToBuffer.append("<TEAM Description=\"" + deptName + "\">");
            reportsToBuffer.append("<USER userId=\"-1\">All</USER>");


            while (resultSet.next()) {
                loginId = resultSet.getString("LoginId");

                reportsToBuffer.append("<USER userId=\"" + loginId + "\">");
                reportsToBuffer.append(resultSet.getString("EmployeeName"));
                reportsToBuffer.append("</USER>");

            }
            reportsToBuffer.append("</TEAM>");
            reportsToBuffer.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        //System.out.println("Team List: "+reportsToBuffer.toString());
        return reportsToBuffer.toString();
    }

    public String getEmployeeSkillSet(String empId, String currId) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String response = "";
        String TABLE_EMP_STATE_HISTORY = Properties.getProperty("TABLE_EMP_STATE_HISTORY");
        // String query = "SELECT HrComments FROM tblEmpReview WHERE Id =" + reviewId;
        String query = "SELECT SkillSet FROM  " + TABLE_EMP_STATE_HISTORY + " WHERE Id= " + currId + " AND EmpId=" + empId;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();


            if (resultSet.next()) {

                response = resultSet.getString("SkillSet");

            }
            if ("".equals(response) || response == null) {
                response = "No data";
            }

            //System.err.println("Result----"+sb);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        //  System.out.println("---------->" + resultString1);
        return response;
    }

//    public String getrequirementAjaxList(HttpServletRequest httpServletRequest) throws ServiceLocatorException {
//        stringBuffer = new StringBuffer();
//        CallableStatement callableStatement = null;
//        PreparedStatement preparedStatement = null;
//        Statement statement = null;
//        ResultSet resultSet = null;
//        String createdBy = "";
//        String totalStream = "";
//        String queryString = "";
//        int i = 0;
//
//        String userWorkCountry = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.WORKING_COUNTRY).toString();
//        //   int isRequirementAdmin = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.IS_REQUIREMENT_ADMIN).toString());
//
//        try {
//            /*queryString ="SELECT Id,ActivityType,Status,Description,DateDue,CreatedDate,AssignedToId,Comments FROM tblCrmActivity";
//            queryString = queryString + " WHERE AccountId ="+accId+" AND ContactId =0 GROUP BY ActivityType,STATUS,Description,AssignedToId ORDER BY CreatedDate DESC";*/
//
//            queryStringBuffer = new StringBuffer();
//            String territory = "";
//            httpServletRequest.getSession(false).setAttribute("dummyStatus", "Open");
//            if (httpServletRequest.getSession(false).getAttribute("REQ_SEARCH_QUERY") == null) {
//                // queryString = "select TRIM(Id) AS RequirementId,TRIM(JobTitle) AS JobTitle ,CONCAT(`tblRecRequirement`.`State`,', ',`tblRecRequirement`.`Country`) AS Location,STATUS,StartDate,AssignedTo AS Recruiter,AssignToTechLead AS PreSales,Skills FROM tblRecRequirement WHERE `tblRecRequirement`.`Country` like '"+userWorkCountry+"' ORDER BY DatePosted DESC";
//                // queryString = "select TRIM(Id) AS RequirementId,TRIM(JobTitle) AS JobTitle ,CONCAT(`tblRecRequirement`.`State`,', ',`tblRecRequirement`.`Country`) AS Location,STATUS,StartDate,AssignedTo AS Recruiter,SecondaryRecruiter AS SecondaryRecruiter,AssignToTechLead AS PreSales,Skills FROM tblRecRequirement WHERE `tblRecRequirement`.`Country` like '"+userWorkCountry+"' ORDER BY DatePosted DESC";
//                queryStringBuffer.append(" SELECT COUNT(tblRecRequirement.Id) AS resumecount,TRIM(tblRecRequirement .Id) AS RequirementId,TRIM(tblRecConsultant.Id) AS ConsultantId,TRIM(JobTitle) AS JobTitle, ");
//                queryStringBuffer.append("CONCAT(tblRecConsultant.FName,'.',tblRecConsultant.LName) AS ConsultantNAME ,");
//                queryStringBuffer.append("CONCAT(`tblRecRequirement`.`State`,',',`tblRecRequirement`.`Country`) AS Location,");
//                queryStringBuffer.append("tblRecRequirement .STATUS AS status,tblRec.CreatedDate as SubmittedDate,");
//                queryStringBuffer.append("tblRecRequirement.AssignedDate as AssignedDate,tblRecRequirement.NoResumes AS noofresumes,");
//                queryStringBuffer.append("AssignedTo AS Recruiter,SecondaryRecruiter AS SecondaryRecruiter,AssignToTechLead AS PreSales,");
//                queryStringBuffer.append("Skills FROM tblRecRequirement LEFT JOIN(tblRecConsultant, tblRec)");
//                queryStringBuffer.append("ON (tblRecRequirement.Id=tblRec.RequirementId AND tblRecConsultant.Id=tblRec.ConsultantId) ");
//                //   queryStringBuffer.append("WHERE tblRecRequirement.Country LIKE '"+userWorkCountry+"'  AND tblRecRequirement.STATUS = 'Open' ");
//                queryStringBuffer.append("WHERE tblRecRequirement.STATUS = 'Open' ");
//                //queryStringBuffer.append("WHERE tblRecRequirement.Country LIKE '%'  " );
//                int rollId = Integer.parseInt((String) httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_ROLE_ID));
//                if (rollId == 4 && ("Vice President".equals(httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_EMP_TITLE).toString()) || "BDM".equals(httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_EMP_TITLE).toString()))) {
//
//                    String userLoginId = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID);
//                    //  System.out.println("LoginId-->"+userLoginId);
//                    String statesListString = "";
//                    territory = DataSourceDataProvider.getInstance().getTeamNameByLoginId(userLoginId);
//
//                    List east_List = DataSourceDataProvider.getInstance().getSubPracticeByPracticeId(1);
//                    List west_List = DataSourceDataProvider.getInstance().getSubPracticeByPracticeId(2);
//                    List central_List = DataSourceDataProvider.getInstance().getSubPracticeByPracticeId(3);
//
//
//
//
//                    int Contains_result = 0;
//                    if (east_List.contains(territory) || west_List.contains(territory) || central_List.contains(territory)) {
//                        // System.out.println("in if");
//
//
//                        Contains_result++;
//
//
//                        if (territory.length() > 0 && !territory.equals("All") && Contains_result == 1) {
//
//                            String stateList = DataSourceDataProvider.getInstance().getStatesByTeritory(territory);
//
//                            String stateL[] = stateList.split(",");
//                            for (int j = 0; j < stateL.length; j++) {
//                                if (!stateL[j].equals("null")) {
//                                    statesListString = statesListString + "'" + stateL[j] + "',";
//                                }
//                            }
//
//
//                            if (statesListString.length() > 0) {
//                                statesListString = statesListString.substring(0, statesListString.length() - 1);
//                            }
//
//
//                        }
//                    }
//queryStringBuffer.append("AND (tblRecRequirement.CreatedBy='"+userLoginId+"' ");
//
//                    if (statesListString.length() > 0) {
//                        queryStringBuffer.append("OR tblRecRequirement.State IN (" + statesListString + ")  ");
//                    }
//
//
//
//                } else if (rollId == 4) {
//                    String loginId = httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
//                    Map teamMap = (Map) httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
//                    String loginIdsList = "'" + loginId + "'";
//                    if (teamMap.size() > 0) {
//                        loginIdsList = loginIdsList + "," + DataSourceDataProvider.getInstance().getTeamLoginIdList(teamMap);
//                    }
//                    queryStringBuffer.append("AND tblRecRequirement.CreatedBy IN (" + loginIdsList + ")  ");
//                } else if (rollId == 6) {
//
//
//
//                    String employeeName = httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_USER_NAME).toString();
//                    boolean isTeamExist = false;
//                    if (Integer.parseInt(httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_IS_USER_MANAGER).toString()) == 1 || Integer.parseInt(httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_IS_TEAM_LEAD).toString()) == 1) {
//                        isTeamExist = true;
//                    }
//                    String empNamesList = "'" + employeeName + "'";
//                    if (isTeamExist) {
//                        Map teamMap = (Map) httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
//                        empNamesList = empNamesList + "," + DataSourceDataProvider.getInstance().getTeamNamesList(teamMap);
//                    }
//                    queryStringBuffer.append("AND (tblRecRequirement.AssignedTo IN (" + empNamesList + ") || tblRecRequirement.SecondaryRecruiter IN (" + empNamesList + ")) ");
//
//
//
//                }
//
//                queryStringBuffer.append(" GROUP BY tblRecRequirement.Id ORDER BY tblRecRequirement.DatePosted DESC Limit 100");
//            } else {
//                queryStringBuffer.append((String) httpServletRequest.getSession(false).getAttribute("REQ_SEARCH_QUERY"));
//            }
//
//
//
//            connection = ConnectionProvider.getInstance().getConnection();
//            statement = connection.createStatement();
//            resultSet = statement.executeQuery(queryStringBuffer.toString());
//            System.err.println("Account Activities:"+queryString);
//            while (resultSet.next()) {
//
//                int resumeCount = resultSet.getInt("resumecount");
//                int RequirementId = resultSet.getInt("RequirementId");
//
//                int ConsultantId = resultSet.getInt("ConsultantId");
//                String JobTitle = resultSet.getString("JobTitle");
//
//                String ConsultantNAME = resultSet.getString("ConsultantNAME");
//
//                String Location = resultSet.getString("Location");
//
//                String status = resultSet.getString("status");
//
//                String SubmittedDate = resultSet.getString("SubmittedDate");
//                String AssignedDate = resultSet.getString("AssignedDate");
//
//
//                int noofresumes = resultSet.getInt("noofresumes");
//
//                String Recruiter = "-";
//                if (resultSet.getString("Recruiter") != null || resultSet.getString("Recruiter") != "") {
//                    Recruiter = resultSet.getString("Recruiter");
//                }
//
//
//                String SecondaryRecruiter = "-";
//                if (resultSet.getString("SecondaryRecruiter") != null || resultSet.getString("SecondaryRecruiter") != "") {
//                    SecondaryRecruiter = resultSet.getString("SecondaryRecruiter");
//                }
//
//                String PreSales = "-";
//                if (resultSet.getString("PreSales") != null || resultSet.getString("PreSales") != "") {
//                    PreSales = resultSet.getString("PreSales");
//                }
//
//
//                String Skills = resultSet.getString("Skills");
//
//
//
//                i++;
//                /*createdBy=resultSet.getString("CreatedById");
//                count =resultSet.getInt("total");*/
//                //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+status+"|"+datedue+"|"+contactId+"|"+accountId+"|"+"^";
//                //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+status+"|"+datedue+"|"+"^";
//                totalStream = totalStream + i + "|" + resumeCount + "|" + RequirementId + "|" + ConsultantId + "|" + JobTitle + "|" + ConsultantNAME + "|" + Location + "|" + status + "|" + SubmittedDate + "|" + AssignedDate + "|" + noofresumes + "|" + Recruiter + "|" + SecondaryRecruiter + "|" + PreSales + "|" + PreSales + "|" + Skills + "^";
//                //  totalActivities=totalActivities+count;
//            }
//            stringBuffer.append(totalStream);
//            stringBuffer.append("addto");
//
//            stringBuffer.append(i);
//
//        } catch (Exception sqe) {
//            sqe.printStackTrace();
//        } finally {
//            try {
//                if (resultSet != null) {
//                    resultSet.close();
//                    resultSet = null;
//                }
//                if (statement != null) {
//                    statement.close();
//                    statement = null;
//                }
//                if (connection != null) {
//                    connection.close();
//                    connection = null;
//                }
//            } catch (SQLException sqle) {
//            }
//        }
//        // System.err.println("response string is"+stringBuffer.toString());
//        return stringBuffer.toString();
//    }
    public String getrequirementAjaxList(HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String createdBy = "";
        String totalStream = "";
        String queryString = "";
        int i = 0;

        String userWorkCountry = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.WORKING_COUNTRY).toString();
        //   int isRequirementAdmin = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.IS_REQUIREMENT_ADMIN).toString());

        try {
            /*queryString ="SELECT Id,ActivityType,Status,Description,DateDue,CreatedDate,AssignedToId,Comments FROM tblCrmActivity";
            queryString = queryString + " WHERE AccountId ="+accId+" AND ContactId =0 GROUP BY ActivityType,STATUS,Description,AssignedToId ORDER BY CreatedDate DESC";*/

            queryStringBuffer = new StringBuffer();
            String territory = "";
            // httpServletRequest.getSession(false).setAttribute("dummyStatus", "Open");
            if (httpServletRequest.getSession(false).getAttribute("REQ_SEARCH_QUERY") == null) {
                // queryString = "select TRIM(Id) AS RequirementId,TRIM(JobTitle) AS JobTitle ,CONCAT(`tblRecRequirement`.`State`,', ',`tblRecRequirement`.`Country`) AS Location,STATUS,StartDate,AssignedTo AS Recruiter,AssignToTechLead AS PreSales,Skills FROM tblRecRequirement WHERE `tblRecRequirement`.`Country` like '"+userWorkCountry+"' ORDER BY DatePosted DESC";
                // queryString = "select TRIM(Id) AS RequirementId,TRIM(JobTitle) AS JobTitle ,CONCAT(`tblRecRequirement`.`State`,', ',`tblRecRequirement`.`Country`) AS Location,STATUS,StartDate,AssignedTo AS Recruiter,SecondaryRecruiter AS SecondaryRecruiter,AssignToTechLead AS PreSales,Skills FROM tblRecRequirement WHERE `tblRecRequirement`.`Country` like '"+userWorkCountry+"' ORDER BY DatePosted DESC";
                queryStringBuffer.append("SELECT COUNT(tblRecRequirement.Id) AS resumecount,TRIM(tblRecRequirement .Id) AS RequirementId,TRIM(tblRecConsultant.Id) AS ConsultantId,TRIM(JobTitle) AS JobTitle, ");
                queryStringBuffer.append("CONCAT(tblRecConsultant.FName,'.',tblRecConsultant.LName) AS ConsultantNAME ,");
                queryStringBuffer.append("CONCAT(`tblRecRequirement`.`State`,',',`tblRecRequirement`.`Country`) AS Location,");
                queryStringBuffer.append("tblRecRequirement .STATUS AS status,tblRec.CreatedDate as SubmittedDate,");
                queryStringBuffer.append("tblRecRequirement.AssignedDate as AssignedDate,tblRecRequirement.NoResumes AS noofresumes,");
                queryStringBuffer.append("AssignedTo AS Recruiter,SecondaryRecruiter AS SecondaryRecruiter,AssignToTechLead AS PreSales,");
                queryStringBuffer.append("Skills FROM tblRecRequirement LEFT JOIN(tblRecConsultant, tblRec)");
                queryStringBuffer.append("ON (tblRecRequirement.Id=tblRec.RequirementId AND tblRecConsultant.Id=tblRec.ConsultantId) ");
                //   queryStringBuffer.append("WHERE tblRecRequirement.Country LIKE '"+userWorkCountry+"'  AND tblRecRequirement.STATUS = 'Open' ");
                //   queryStringBuffer.append("WHERE tblRecRequirement.STATUS = 'Open' ");
                queryStringBuffer.append("WHERE 1=1 ");
                //queryStringBuffer.append("WHERE tblRecRequirement.Country LIKE '%'  " );
                int rollId = Integer.parseInt((String) httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_ROLE_ID));
                if (rollId == 4 && ("Vice President".equals(httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_EMP_TITLE).toString()) || "BDM".equals(httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_EMP_TITLE).toString()))) {

                    String userLoginId = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID);
                    //  System.out.println("LoginId-->"+userLoginId);
                    String statesListString = "";
                    territory = DataSourceDataProvider.getInstance().getTeamNameByLoginId(userLoginId);

                    List east_List = DataSourceDataProvider.getInstance().getSubPracticeByPracticeId(1);
                    List west_List = DataSourceDataProvider.getInstance().getSubPracticeByPracticeId(2);
                    List central_List = DataSourceDataProvider.getInstance().getSubPracticeByPracticeId(3);




                    int Contains_result = 0;
                    if (east_List.contains(territory) || west_List.contains(territory) || central_List.contains(territory)) {
                        // System.out.println("in if");


                        Contains_result++;


                        if (territory.length() > 0 && !territory.equals("All") && Contains_result == 1) {

                            String stateList = DataSourceDataProvider.getInstance().getStatesByTeritory(territory);

                            String stateL[] = stateList.split(",");
                            for (int j = 0; j < stateL.length; j++) {
                                if (!stateL[j].equals("null")) {
                                    statesListString = statesListString + "'" + stateL[j] + "',";
                                }
                            }


                            if (statesListString.length() > 0) {
                                statesListString = statesListString.substring(0, statesListString.length() - 1);
                            }


                        }
                    }

                    queryStringBuffer.append("AND (tblRecRequirement.CreatedBy='" + userLoginId + "' ");

                    if (statesListString.length() > 0) {
                        queryStringBuffer.append("OR tblRecRequirement.State IN (" + statesListString + ")  ");
                    }

                    queryStringBuffer.append(")");

                } else if (rollId == 4) {
                    String loginId = httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
                    Map teamMap = (Map) httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
                    String loginIdsList = "'" + loginId + "'";
                    if (teamMap.size() > 0) {
                        loginIdsList = loginIdsList + "," + DataSourceDataProvider.getInstance().getTeamLoginIdList(teamMap);
                    }
                    queryStringBuffer.append("AND tblRecRequirement.CreatedBy IN (" + loginIdsList + ")  ");
                } else if (rollId == 6) {



                    String employeeName = httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_USER_NAME).toString();
                    boolean isTeamExist = false;
                    if (Integer.parseInt(httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_IS_USER_MANAGER).toString()) == 1 || Integer.parseInt(httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_IS_TEAM_LEAD).toString()) == 1) {
                        isTeamExist = true;
                    }
                    String empNamesList = "'" + employeeName + "'";
                    if (isTeamExist) {
                        Map teamMap = (Map) httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
                        empNamesList = empNamesList + "," + DataSourceDataProvider.getInstance().getTeamNamesList(teamMap);
                    }
                    queryStringBuffer.append("AND (tblRecRequirement.AssignedTo IN (" + empNamesList + ") || tblRecRequirement.SecondaryRecruiter IN (" + empNamesList + ")) ");



                } else if (rollId == 10) {
                    //    String employeeName = httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_USER_NAME).toString();
                    //    queryStringBuffer.append("AND (tblRecRequirement.AssignToTechLead ='" + employeeName + "' || tblRecRequirement.SecondaryTechLead ='" + employeeName + "') ");
                    String employeeName = httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_USER_NAME).toString();
                    boolean isTeamExist = false;
                    if (Integer.parseInt(httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_IS_USER_MANAGER).toString()) == 1 || Integer.parseInt(httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_IS_TEAM_LEAD).toString()) == 1) {
                        isTeamExist = true;
                    }
                    String empNamesList = "'" + employeeName + "'";
                    if (isTeamExist) {
                        Map teamMap = (Map) httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
                        if (teamMap.size() > 0) {
                            empNamesList = empNamesList + "," + DataSourceDataProvider.getInstance().getTeamNamesList(teamMap);
                        }
                    }
                    queryStringBuffer.append("AND (tblRecRequirement.AssignToTechLead IN (" + empNamesList + ") OR tblRecRequirement.SecondaryTechLead IN (" + empNamesList + ") )");

                }
                /*else if (rollId == 10) {
                String employeeName = httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_USER_NAME).toString();
                queryStringBuffer.append("AND (tblRecRequirement.AssignToTechLead ='" + employeeName + "' || tblRecRequirement.SecondaryTechLead ='" + employeeName + "') ");
                }*/

                queryStringBuffer.append(" GROUP BY tblRecRequirement.Id ORDER BY tblRecRequirement.DatePosted DESC Limit 200");
            } else {
                queryStringBuffer.append((String) httpServletRequest.getSession(false).getAttribute("REQ_SEARCH_QUERY"));
            }

            // System.out.println("Default query ----" + queryStringBuffer.toString());

            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryStringBuffer.toString());
            //System.err.println("Account Activities:"+queryString);
            while (resultSet.next()) {

                int resumeCount = resultSet.getInt("resumecount");
                int RequirementId = resultSet.getInt("RequirementId");

                int ConsultantId = resultSet.getInt("ConsultantId");
                String JobTitle = resultSet.getString("JobTitle");

                String ConsultantNAME = resultSet.getString("ConsultantNAME");

                String Location = resultSet.getString("Location");

                String status = resultSet.getString("status");

                String SubmittedDate = resultSet.getString("SubmittedDate");
                String AssignedDate = resultSet.getString("AssignedDate");


                int noofresumes = resultSet.getInt("noofresumes");

                String Recruiter = "-";
                if (resultSet.getString("Recruiter") != null || resultSet.getString("Recruiter") != "") {
                    Recruiter = resultSet.getString("Recruiter");
                }


                String SecondaryRecruiter = "-";
                if (resultSet.getString("SecondaryRecruiter") != null || resultSet.getString("SecondaryRecruiter") != "") {
                    SecondaryRecruiter = resultSet.getString("SecondaryRecruiter");
                }

                String PreSales = "-";
                if (resultSet.getString("PreSales") != null || resultSet.getString("PreSales") != "") {
                    PreSales = resultSet.getString("PreSales");
                }


                String Skills = resultSet.getString("Skills");



                i++;
                /*createdBy=resultSet.getString("CreatedById");
                count =resultSet.getInt("total");*/
                //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+status+"|"+datedue+"|"+contactId+"|"+accountId+"|"+"^";
                //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+status+"|"+datedue+"|"+"^";
                totalStream = totalStream + i + "|" + resumeCount + "|" + RequirementId + "|" + ConsultantId + "|" + JobTitle + "|" + ConsultantNAME + "|" + Location + "|" + status + "|" + SubmittedDate + "|" + AssignedDate + "|" + noofresumes + "|" + Recruiter + "|" + SecondaryRecruiter + "|" + PreSales + "|" + PreSales + "|" + Skills + "^";
                //  totalActivities=totalActivities+count;
            }
            stringBuffer.append(totalStream);
            stringBuffer.append("addto");

            stringBuffer.append(i);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.err.println("response string is"+stringBuffer.toString());
        return stringBuffer.toString();
    }

    /**
     * search Action 
     *
     */
//    public String getsearchRequirementAjaxList(HttpServletRequest httpServletRequest, AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {
//
//        stringBuffer = new StringBuffer();
//        CallableStatement callableStatement = null;
//        PreparedStatement preparedStatement = null;
//        Statement statement = null;
//        ResultSet resultSet = null;
//        String createdBy = "";
//        String totalStream = "";
//        String queryString = "";
//        int i = 0;
//
//        String userWorkCountry = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.WORKING_COUNTRY).toString();
//
//        int userRoleId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_ROLE_ID).toString());
//        //resultType = "accessFailed";
//
//        DateUtility dateUtility = new DateUtility();
//
//        // System.out.println(" impl  --- createdBy----------"+ajaxHandlerAction.getCreatedBy()+"--assignedTo-------------"+ajaxHandlerAction.getAssignedTo()+"--title-------------"+ajaxHandlerAction.getTitle()+"--postedDate1-------"+ajaxHandlerAction.getPostedDate1()+"---postedDate2----"+ajaxHandlerAction.getPostedDate2()+"---status----"+ajaxHandlerAction.getStatus());
//
//
//        try {
//            /*queryString ="SELECT Id,ActivityType,Status,Description,DateDue,CreatedDate,AssignedToId,Comments FROM tblCrmActivity";
//            queryString = queryString + " WHERE AccountId ="+accId+" AND ContactId =0 GROUP BY ActivityType,STATUS,Description,AssignedToId ORDER BY CreatedDate DESC";*/
//
//
//            //   System.out.println("ajaxHandlerAction.getTitle()==="+ajaxHandlerAction.getTitle());
//
//            httpServletRequest.getSession(false).setAttribute("dummyTitle", ajaxHandlerAction.getTitle());
//            httpServletRequest.getSession(false).setAttribute("dummyStatus", ajaxHandlerAction.getStatus());
//            httpServletRequest.getSession(false).setAttribute("dummyAssignedTo", ajaxHandlerAction.getAssignedTo());
//            httpServletRequest.getSession(false).setAttribute("dummyStartDate", ajaxHandlerAction.getPostedDate1());
//            httpServletRequest.getSession(false).setAttribute("dummyEndDate", ajaxHandlerAction.getPostedDate2());
//            httpServletRequest.getSession(false).setAttribute("dummyCreatedBy", ajaxHandlerAction.getCreatedBy());
//            int columnCounter = 0;
//            queryStringBuffer = new StringBuffer();
//            String territory = "";
//            queryStringBuffer.append(" SELECT COUNT(tblRecRequirement.Id) AS resumecount,TRIM(tblRecRequirement .Id) AS RequirementId,TRIM(tblRecConsultant.Id) AS ConsultantId,TRIM(JobTitle) AS JobTitle, ");
//            queryStringBuffer.append("CONCAT(tblRecConsultant.FName,'.',tblRecConsultant.LName) AS ConsultantNAME ,");
//            queryStringBuffer.append("CONCAT(`tblRecRequirement`.`State`,',',`tblRecRequirement`.`Country`) AS Location,");
//            queryStringBuffer.append("tblRecRequirement .STATUS AS status,tblRec.CreatedDate as SubmittedDate,");
//            queryStringBuffer.append("tblRecRequirement.AssignedDate as AssignedDate,tblRecRequirement.NoResumes AS noofresumes,");
//            queryStringBuffer.append("AssignedTo AS Recruiter,SecondaryRecruiter AS SecondaryRecruiter,AssignToTechLead AS PreSales,");
//            queryStringBuffer.append("Skills FROM tblRecRequirement LEFT JOIN(tblRecConsultant, tblRec)");
//            queryStringBuffer.append("ON (tblRecRequirement.Id=tblRec.RequirementId AND tblRecConsultant.Id=tblRec.ConsultantId) ");
//            //    queryStringBuffer.append("WHERE tblRecRequirement.Country LIKE '"+userWorkCountry+"'  " );
//            queryStringBuffer.append("WHERE 1=1  ");
//            //queryStringBuffer.append("WHERE tblRecRequirement.Country LIKE '%'  " );
//            int rollId = Integer.parseInt((String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_ROLE_ID));
//
//            columnCounter++;
//            // queryStringBuffer.append(" GROUP BY tblRecRequirement.Id ORDER BY tblRecRequirement.DatePosted DESC Limit 150");
//
//            // if(rollId==4&&"BDM".equals(httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_EMP_TITLE).toString())){
//            if (rollId == 4 && ("Vice President".equals(httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_EMP_TITLE).toString()) || "BDM".equals(httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_EMP_TITLE).toString()))) {
//                String userLoginId = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID);
//                //  System.out.println("LoginId-->"+userLoginId);
//                String statesListString = "";
//                territory = DataSourceDataProvider.getInstance().getTeamNameByLoginId(userLoginId);
//
//                List east_List = DataSourceDataProvider.getInstance().getSubPracticeByPracticeId(1);
//                List west_List = DataSourceDataProvider.getInstance().getSubPracticeByPracticeId(2);
//                List central_List = DataSourceDataProvider.getInstance().getSubPracticeByPracticeId(3);
//
//
//
//
//                int Contains_result = 0;
//                if (east_List.contains(territory) || west_List.contains(territory) || central_List.contains(territory)) {
//                    // System.out.println("in if");
//
//
//                    Contains_result++;
//
//
//                    if (territory.length() > 0 && !territory.equals("All") && Contains_result == 1) {
//
//                        String stateList = DataSourceDataProvider.getInstance().getStatesByTeritory(territory);
//
//                        String stateL[] = stateList.split(",");
//                        for (int j = 0; j < stateL.length; j++) {
//                            if (!stateL[j].equals("null")) {
//                                statesListString = statesListString + "'" + stateL[j] + "',";
//                            }
//                        }
//
//                        System.out.println("statesListString-->" + statesListString);
//                        if (statesListString.length() > 0) {
//                            statesListString = statesListString.substring(0, statesListString.length() - 1);
//                        }
//
//
//                    }
//                }
//
//
//                if (statesListString.length() > 0) {
//                    queryStringBuffer.append("AND tblRecRequirement.State IN (" + statesListString + ")  ");
//                }
//
//
//
//            } else if (rollId == 4) {
//                String loginId = httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
//                Map teamMap = (Map) httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
//                String loginIdsList = "'" + loginId + "'";
//                if (teamMap.size() > 0) {
//                    loginIdsList = loginIdsList + "," + DataSourceDataProvider.getInstance().getTeamLoginIdList(teamMap);
//                }
//                queryStringBuffer.append("AND tblRecRequirement.CreatedBy IN (" + loginIdsList + ")  ");
//            } else if (rollId == 6) {
//
//
//
//                String employeeName = httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_USER_NAME).toString();
//                boolean isTeamExist = false;
//                if (Integer.parseInt(httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_IS_USER_MANAGER).toString()) == 1 || Integer.parseInt(httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_IS_TEAM_LEAD).toString()) == 1) {
//                    isTeamExist = true;
//                }
//                String empNamesList = "'" + employeeName + "'";
//                if (isTeamExist) {
//                    Map teamMap = (Map) httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
//                    empNamesList = empNamesList + "," + DataSourceDataProvider.getInstance().getTeamNamesList(teamMap);
//                }
//                queryStringBuffer.append("AND (tblRecRequirement.AssignedTo IN (" + empNamesList + ") || tblRecRequirement.SecondaryRecruiter IN (" + empNamesList + ")) ");
//
//
//
//            }
//
//            /**
//             *
//             *where Start
//             */
//            if (null == ajaxHandlerAction.getCreatedBy()) {
//                ajaxHandlerAction.setCreatedBy("");
//            }
//            if ("All".equalsIgnoreCase(ajaxHandlerAction.getCreatedBy())) {
//                ajaxHandlerAction.setCreatedBy("");
//            }
//            if (null == ajaxHandlerAction.getAssignedTo()) {
//                ajaxHandlerAction.setAssignedTo("");
//            }
//            if ("All".equalsIgnoreCase(ajaxHandlerAction.getAssignedTo())) {
//                ajaxHandlerAction.setAssignedTo("");
//            }
//            if (null == ajaxHandlerAction.getStatus()) {
//                ajaxHandlerAction.setStatus("");
//            }
//            if ("All".equalsIgnoreCase(ajaxHandlerAction.getStatus())) {
//                ajaxHandlerAction.setStatus("");
//            }
//            if (null == ajaxHandlerAction.getTitle()) {
//                ajaxHandlerAction.setTitle("");
//            }
//            if (null == ajaxHandlerAction.getPostedDate1()) {
//                ajaxHandlerAction.setPostedDate1("");
//            }
//            if (null == ajaxHandlerAction.getPostedDate2()) {
//                ajaxHandlerAction.setPostedDate2("");
//            }
//            //commented by prasad
//            if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1())) {
//                ajaxHandlerAction.setPostedDate1(DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getPostedDate1()));
//            }
//
//            if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2())) {
//                ajaxHandlerAction.setPostedDate2(DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getPostedDate2()));
//            }
//
//            /* if ((!"".equalsIgnoreCase(ajaxHandlerAction.getCreatedBy())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getAssignedTo())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getStatus())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getTitle())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()))) {
//            queryStringBuffer.append(" WHERE ");
//            }*/
//
//
//
//            if (!"".equalsIgnoreCase(ajaxHandlerAction.getCreatedBy()) && columnCounter == 0) {
//                if ((ajaxHandlerAction.getCreatedBy().indexOf("*") == -1) && (ajaxHandlerAction.getCreatedBy().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy() + "*");
//                }
//                ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy().replace("*", "%"));
//                queryStringBuffer.append(" AND `tblRecRequirement`.`CreatedBy` LIKE '" + ajaxHandlerAction.getCreatedBy() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy().replace("%", ""));
//            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getCreatedBy()) && columnCounter != 0) {
//                if ((ajaxHandlerAction.getCreatedBy().indexOf("*") == -1) && (ajaxHandlerAction.getCreatedBy().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy() + "*");
//                }
//                ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy().replace("*", "%"));
//                queryStringBuffer.append("AND `tblRecRequirement`.`CreatedBy` LIKE '" + ajaxHandlerAction.getCreatedBy() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy().replace("%", ""));
//            }
//
//            if (!"".equalsIgnoreCase(ajaxHandlerAction.getAssignedTo()) && columnCounter == 0) {
//                if ((ajaxHandlerAction.getAssignedTo().indexOf("*") == -1) && (ajaxHandlerAction.getAssignedTo().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo() + "*");
//                }
//                ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo().replace("*", "%"));
//                queryStringBuffer.append("`tblRecRequirement`.`AssignedTo` LIKE '" + ajaxHandlerAction.getAssignedTo() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo().replace("%", ""));
//            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getAssignedTo()) && columnCounter != 0) {
//                if ((ajaxHandlerAction.getAssignedTo().indexOf("*") == -1) && (ajaxHandlerAction.getAssignedTo().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo() + "*");
//                }
//                ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo().replace("*", "%"));
//                queryStringBuffer.append("AND `tblRecRequirement`.`AssignedTo` LIKE '" + ajaxHandlerAction.getAssignedTo() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo().replace("%", ""));
//            }
//
//            if (!"".equalsIgnoreCase(ajaxHandlerAction.getStatus()) && columnCounter == 0) {
//                if ((ajaxHandlerAction.getStatus().indexOf("*") == -1) && (ajaxHandlerAction.getStatus().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus() + "*");
//                }
//                ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus().replace("*", "%"));
//                queryStringBuffer.append("`tblRecRequirement`.`Status` LIKE '" + ajaxHandlerAction.getStatus() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus().replace("%", ""));
//            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getStatus()) && columnCounter != 0) {
//                if ((ajaxHandlerAction.getStatus().indexOf("*") == -1) && (ajaxHandlerAction.getStatus().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus() + "*");
//                }
//                ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus().replace("*", "%"));
//                queryStringBuffer.append("AND `tblRecRequirement`.`Status` LIKE '" + ajaxHandlerAction.getStatus() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus().replace("%", ""));
//            }
//
//            if (!"".equalsIgnoreCase(ajaxHandlerAction.getTitle()) && columnCounter == 0) {
//                if ((ajaxHandlerAction.getTitle().indexOf("*") == -1) && (ajaxHandlerAction.getTitle().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setTitle(ajaxHandlerAction.getTitle() + "*");
//                }
//                ajaxHandlerAction.setTitle(ajaxHandlerAction.getTitle().replace("*", "%"));
//                queryStringBuffer.append("`tblRecRequirement`.`JobTitle` LIKE '" + ajaxHandlerAction.getTitle() + "'");
//                columnCounter++;
//
//
//            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getTitle()) && columnCounter != 0) {
//                if ((ajaxHandlerAction.getTitle().indexOf("*") == -1) && (ajaxHandlerAction.getTitle().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setTitle(ajaxHandlerAction.getTitle() + "*");
//                }
//                ajaxHandlerAction.setTitle(ajaxHandlerAction.getTitle().replace("*", "%"));
//                queryStringBuffer.append("AND `tblRecRequirement`.`JobTitle` LIKE '" + ajaxHandlerAction.getTitle() + "'");
//                columnCounter++;
//            }
//
//            if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && "".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && columnCounter == 0) {
//                if ((ajaxHandlerAction.getPostedDate1().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate1().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1() + "*");
//                }
//                ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1().replace("*", "%"));
//                queryStringBuffer.append("date(`tblRecRequirement`.`DatePosted`) LIKE '" + ajaxHandlerAction.getPostedDate1() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setPostedDate1(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate1().replace("%", "")));
//            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && "".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && columnCounter != 0) {
//                if ((ajaxHandlerAction.getPostedDate1().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate1().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1() + "*");
//                }
//                ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1().replace("*", "%"));
//                queryStringBuffer.append("AND date(`tblRecRequirement`.`DatePosted`) LIKE '" + ajaxHandlerAction.getPostedDate1() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setPostedDate1(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate1().replace("%", "")));
//            }
//
//            if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && "".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && columnCounter == 0) {
//                if ((ajaxHandlerAction.getPostedDate2().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate2().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2() + "*");
//                }
//                ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2().replace("*", "%"));
//                queryStringBuffer.append("date(`tblRecRequirement`.`DatePosted`) LIKE '" + ajaxHandlerAction.getPostedDate2() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setPostedDate2(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate2().replace("%", "")));
//            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && "".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && columnCounter != 0) {
//                if ((ajaxHandlerAction.getPostedDate2().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate2().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2() + "*");
//                }
//                ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2().replace("*", "%"));
//                queryStringBuffer.append("AND date(`tblRecRequirement`.`DatePosted`) LIKE '" + ajaxHandlerAction.getPostedDate2() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setPostedDate2(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate2().replace("%", "")));
//            }
//
//            if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && !"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && columnCounter == 0) {
//                if ((ajaxHandlerAction.getPostedDate1().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate1().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1() + "*");
//                }
//                ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1().replace("*", "%"));
//
//                if ((ajaxHandlerAction.getPostedDate2().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate2().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2() + "*");
//                }
//                ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2().replace("*", "%"));
//
//                queryStringBuffer.append("date(`tblRecRequirement`.`DatePosted`) BETWEEN '" + ajaxHandlerAction.getPostedDate1() + "' AND '" + ajaxHandlerAction.getPostedDate2() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setPostedDate1(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate1().replace("%", "")));
//                ajaxHandlerAction.setPostedDate2(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate2().replace("%", "")));
//
//            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && !"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && columnCounter != 0) {
//                if ((ajaxHandlerAction.getPostedDate1().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate1().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1() + "*");
//                }
//                ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1().replace("*", "%"));
//
//                if ((ajaxHandlerAction.getPostedDate2().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate2().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2() + "*");
//                }
//                ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2().replace("*", "%"));
//
//                queryStringBuffer.append("AND date(`tblRecRequirement`.`DatePosted`) BETWEEN '" + ajaxHandlerAction.getPostedDate1() + "' AND '" + ajaxHandlerAction.getPostedDate2() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setPostedDate1(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate1().replace("%", "")));
//                ajaxHandlerAction.setPostedDate2(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate2().replace("%", "")));
//            }
//
//
//            /*   if (columnCounter == 0) {//queryStringBuffer.append(" Where `tblRecRequirement`.`Country` like '"+userWorkCountry+"' ORDER BY date(`tblRecRequirement`.`DatePosted`),Country DESC"); ,tblRecRequirement.Country
//            queryStringBuffer.append(" Where `tblRecRequirement`.`Country` like '" + userWorkCountry + "' ");
//            } else {
//            //queryStringBuffer.append(" AND `tblRecRequirement`.`Country` like '"+userWorkCountry+"' ORDER BY date(`tblRecRequirement`.`DatePosted`),Country DESC");,tblRecRequirement.Country
//            queryStringBuffer.append(" AND `tblRecRequirement`.`Country` like '" + userWorkCountry + "' ");
//            // httpServletRequest.getSession(false).setAttribute(ApplicationConstants.QUERY_STRING,queryStringBuffer.toString());
//            }
//             */
//            queryStringBuffer.append(" GROUP BY tblRecRequirement.Id ORDER BY date(`tblRecRequirement`.`DatePosted`) DESC Limit 100");
//
//
////                   System.out.println("ajaxHandlerAction.getStatus()===="+ajaxHandlerAction.getStatus());
//            //     System.out.println("ajaxHandlerAction.getTitle()==="+ajaxHandlerAction.getTitle());
//
//
//            httpServletRequest.getSession(false).setAttribute("REQ_SEARCH_QUERY", queryStringBuffer.toString());
//            //System.out.println("REQ_SEARCH_QUERY --->"+REQ_SEARCH_QUERY);
//                     /*
//             *
//             *End of where 
//             */
//
//
//            //  System.out.println("query String for List ---"+queryStringBuffer.toString());
//
//            connection = ConnectionProvider.getInstance().getConnection();
//            statement = connection.createStatement();
//            resultSet = statement.executeQuery(queryStringBuffer.toString());
//
//            //System.err.println("Account Activities:"+queryString);
//            while (resultSet.next()) {
//
//                int resumeCount = resultSet.getInt("resumecount");
//                int RequirementId = resultSet.getInt("RequirementId");
//
//                int ConsultantId = resultSet.getInt("ConsultantId");
//
//                String JobTitle = resultSet.getString("JobTitle");
//
//                String ConsultantNAME = resultSet.getString("ConsultantNAME");
//
//                String Location = resultSet.getString("Location");
//
//                String status = resultSet.getString("status");
//
//                String SubmittedDate = resultSet.getString("SubmittedDate");
//
//                String AssignedDate = resultSet.getString("AssignedDate");
//
//
//                int noofresumes = resultSet.getInt("noofresumes");
//
//                String Recruiter = "-";
//                if (resultSet.getString("Recruiter") != null || resultSet.getString("Recruiter") != "") {
//                    Recruiter = resultSet.getString("Recruiter");
//                }
//
//
//                String SecondaryRecruiter = "-";
//                if (resultSet.getString("SecondaryRecruiter") != null || resultSet.getString("SecondaryRecruiter") != "") {
//                    SecondaryRecruiter = resultSet.getString("SecondaryRecruiter");
//                }
//
//                String PreSales = "-";
//                if (resultSet.getString("PreSales") != null || resultSet.getString("PreSales") != "") {
//                    PreSales = resultSet.getString("PreSales");
//                }
//
//
//                String Skills = resultSet.getString("Skills");
//
//
//
//                i++;
//                /*createdBy=resultSet.getString("CreatedById");
//                count =resultSet.getInt("total");*/
//                //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+status+"|"+datedue+"|"+contactId+"|"+accountId+"|"+"^";
//                //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+status+"|"+datedue+"|"+"^";
//                totalStream = totalStream + i + "|" + resumeCount + "|" + RequirementId + "|" + ConsultantId + "|" + JobTitle + "|" + ConsultantNAME + "|" + Location + "|" + status + "|" + SubmittedDate + "|" + AssignedDate + "|" + noofresumes + "|" + Recruiter + "|" + SecondaryRecruiter + "|" + PreSales + "|" + PreSales + "|" + Skills + "^";
//                //  totalActivities=totalActivities+count;
//            }
//            stringBuffer.append(totalStream);
//            stringBuffer.append("addto");
//
//            stringBuffer.append(i);
//
//        } catch (Exception sqe) {
//            sqe.printStackTrace();
//        } finally {
//            try {
//                if (resultSet != null) {
//                    resultSet.close();
//                    resultSet = null;
//                }
//                if (statement != null) {
//                    statement.close();
//                    statement = null;
//                }
//                if (connection != null) {
//                    connection.close();
//                    connection = null;
//                }
//            } catch (SQLException sqle) {
//            }
//        }
//        // System.err.println("response string is"+stringBuffer.toString());
//        return stringBuffer.toString();
//    }
    public String getsearchRequirementAjaxList(HttpServletRequest httpServletRequest, AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String createdBy = "";
        String totalStream = "";
        String queryString = "";
        int i = 0;

        String userWorkCountry = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.WORKING_COUNTRY).toString();

        int userRoleId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_ROLE_ID).toString());
        //resultType = "accessFailed";

        DateUtility dateUtility = new DateUtility();

        // System.out.println(" impl  --- createdBy----------"+ajaxHandlerAction.getCreatedBy()+"--assignedTo-------------"+ajaxHandlerAction.getAssignedTo()+"--title-------------"+ajaxHandlerAction.getTitle()+"--postedDate1-------"+ajaxHandlerAction.getPostedDate1()+"---postedDate2----"+ajaxHandlerAction.getPostedDate2()+"---status----"+ajaxHandlerAction.getStatus());


        try {
            /*queryString ="SELECT Id,ActivityType,Status,Description,DateDue,CreatedDate,AssignedToId,Comments FROM tblCrmActivity";
            queryString = queryString + " WHERE AccountId ="+accId+" AND ContactId =0 GROUP BY ActivityType,STATUS,Description,AssignedToId ORDER BY CreatedDate DESC";*/


            //   System.out.println("ajaxHandlerAction.getTitle()==="+ajaxHandlerAction.getTitle());

            httpServletRequest.getSession(false).setAttribute("dummyTitle", ajaxHandlerAction.getTitle());
            httpServletRequest.getSession(false).setAttribute("dummyStatus", ajaxHandlerAction.getStatus());
            httpServletRequest.getSession(false).setAttribute("dummyAssignedTo", ajaxHandlerAction.getAssignedTo());
            httpServletRequest.getSession(false).setAttribute("dummyStartDate", ajaxHandlerAction.getPostedDate1());
            httpServletRequest.getSession(false).setAttribute("dummyEndDate", ajaxHandlerAction.getPostedDate2());
            httpServletRequest.getSession(false).setAttribute("dummyCreatedBy", ajaxHandlerAction.getCreatedBy());
            httpServletRequest.getSession(false).setAttribute("dummyAssignedBy", ajaxHandlerAction.getAssignedBy());
            httpServletRequest.getSession(false).setAttribute("dummyClientId", ajaxHandlerAction.getClientId());

            int columnCounter = 0;
            queryStringBuffer = new StringBuffer();
            String territory = "";
            queryStringBuffer.append("SELECT COUNT(tblRecRequirement.Id) AS resumecount,TRIM(tblRecRequirement .Id) AS RequirementId,TRIM(tblRecConsultant.Id) AS ConsultantId,TRIM(JobTitle) AS JobTitle, ");
            queryStringBuffer.append("CONCAT(tblRecConsultant.FName,'.',tblRecConsultant.LName) AS ConsultantNAME ,");
            queryStringBuffer.append("CONCAT(`tblRecRequirement`.`State`,',',`tblRecRequirement`.`Country`) AS Location,");
            queryStringBuffer.append("tblRecRequirement .STATUS AS status,tblRec.CreatedDate as SubmittedDate,");
            queryStringBuffer.append("tblRecRequirement.AssignedDate as AssignedDate,tblRecRequirement.NoResumes AS noofresumes,");
            queryStringBuffer.append("AssignedTo AS Recruiter,SecondaryRecruiter AS SecondaryRecruiter,AssignToTechLead AS PreSales,");
            queryStringBuffer.append("Skills FROM tblRecRequirement LEFT JOIN(tblRecConsultant, tblRec)");
            queryStringBuffer.append("ON (tblRecRequirement.Id=tblRec.RequirementId AND tblRecConsultant.Id=tblRec.ConsultantId) ");
            //    queryStringBuffer.append("WHERE tblRecRequirement.Country LIKE '"+userWorkCountry+"'  " );
            queryStringBuffer.append("WHERE 1=1  ");
            //queryStringBuffer.append("WHERE tblRecRequirement.Country LIKE '%'  " );
            int rollId = Integer.parseInt((String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_ROLE_ID));

            columnCounter++;
            // queryStringBuffer.append(" GROUP BY tblRecRequirement.Id ORDER BY tblRecRequirement.DatePosted DESC Limit 150");

            // if(rollId==4&&"BDM".equals(httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_EMP_TITLE).toString())){
            if (rollId == 4 && ("Vice President".equals(httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_EMP_TITLE).toString()) || "BDM".equals(httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_EMP_TITLE).toString()))) {
                String userLoginId = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID);
                //  System.out.println("LoginId-->"+userLoginId);
                String statesListString = "";
                territory = DataSourceDataProvider.getInstance().getTeamNameByLoginId(userLoginId);

                List east_List = DataSourceDataProvider.getInstance().getSubPracticeByPracticeId(1);
                List west_List = DataSourceDataProvider.getInstance().getSubPracticeByPracticeId(2);
                List central_List = DataSourceDataProvider.getInstance().getSubPracticeByPracticeId(3);




                int Contains_result = 0;
                if (east_List.contains(territory) || west_List.contains(territory) || central_List.contains(territory)) {
                    // System.out.println("in if");


                    Contains_result++;


                    if (territory.length() > 0 && !territory.equals("All") && Contains_result == 1) {

                        String stateList = DataSourceDataProvider.getInstance().getStatesByTeritory(territory);

                        String stateL[] = stateList.split(",");
                        for (int j = 0; j < stateL.length; j++) {
                            if (!stateL[j].equals("null")) {
                                statesListString = statesListString + "'" + stateL[j] + "',";
                            }
                        }

                        // System.out.println("statesListString-->" + statesListString);
                        if (statesListString.length() > 0) {
                            statesListString = statesListString.substring(0, statesListString.length() - 1);
                        }


                    }
                }

                queryStringBuffer.append("AND (tblRecRequirement.CreatedBy='" + userLoginId + "' ");

                if (statesListString.length() > 0) {
                    queryStringBuffer.append("OR tblRecRequirement.State IN (" + statesListString + ")  ");
                }

                queryStringBuffer.append(")");



            } else if (rollId == 4) {
                String loginId = httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
                Map teamMap = (Map) httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
                String loginIdsList = "'" + loginId + "'";
                if (teamMap.size() > 0) {
                    loginIdsList = loginIdsList + "," + DataSourceDataProvider.getInstance().getTeamLoginIdList(teamMap);
                }
                queryStringBuffer.append("AND tblRecRequirement.CreatedBy IN (" + loginIdsList + ")  ");
            } else if (rollId == 6) {



                String employeeName = httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_USER_NAME).toString();
                boolean isTeamExist = false;
                if (Integer.parseInt(httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_IS_USER_MANAGER).toString()) == 1 || Integer.parseInt(httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_IS_TEAM_LEAD).toString()) == 1) {
                    isTeamExist = true;
                }
                String empNamesList = "'" + employeeName + "'";
                if (isTeamExist) {
                    Map teamMap = (Map) httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
                    empNamesList = empNamesList + "," + DataSourceDataProvider.getInstance().getTeamNamesList(teamMap);
                }
                queryStringBuffer.append("AND (tblRecRequirement.AssignedTo IN (" + empNamesList + ") || tblRecRequirement.SecondaryRecruiter IN (" + empNamesList + ")) ");


            } else if (rollId == 10) {
                //    String employeeName = httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_USER_NAME).toString();
                //    queryStringBuffer.append("AND (tblRecRequirement.AssignToTechLead ='" + employeeName + "' || tblRecRequirement.SecondaryTechLead ='" + employeeName + "') ");
                String employeeName = httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_USER_NAME).toString();
                boolean isTeamExist = false;
                if (Integer.parseInt(httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_IS_USER_MANAGER).toString()) == 1 || Integer.parseInt(httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_IS_TEAM_LEAD).toString()) == 1) {
                    isTeamExist = true;
                }
                String empNamesList = "'" + employeeName + "'";
                if (isTeamExist) {
                    Map teamMap = (Map) httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
                    if (teamMap.size() > 0) {
                        empNamesList = empNamesList + "," + DataSourceDataProvider.getInstance().getTeamNamesList(teamMap);
                    }
                }
                queryStringBuffer.append(" AND (tblRecRequirement.AssignToTechLead IN (" + empNamesList + ") OR tblRecRequirement.SecondaryTechLead IN (" + empNamesList + ") ) ");

            }



            //else if (rollId == 10) {
//                String employeeName = httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_USER_NAME).toString();
//                queryStringBuffer.append("AND (tblRecRequirement.AssignToTechLead ='" + employeeName + "' || tblRecRequirement.SecondaryTechLead ='" + employeeName + "') ");
//            }

            /**
             *
             * where Start
             */
            if (null == ajaxHandlerAction.getCreatedBy()) {
                ajaxHandlerAction.setCreatedBy("");
            }
            if ("All".equalsIgnoreCase(ajaxHandlerAction.getCreatedBy())) {
                ajaxHandlerAction.setCreatedBy("");
            }
            if (null == ajaxHandlerAction.getAssignedTo()) {
                ajaxHandlerAction.setAssignedTo("");
            }
            if ("All".equalsIgnoreCase(ajaxHandlerAction.getAssignedTo())) {
                ajaxHandlerAction.setAssignedTo("");
            }
            if (null == ajaxHandlerAction.getStatus()) {
                ajaxHandlerAction.setStatus("");
            }
            if ("All".equalsIgnoreCase(ajaxHandlerAction.getStatus())) {
                ajaxHandlerAction.setStatus("");
            }
            if (null == ajaxHandlerAction.getTitle()) {
                ajaxHandlerAction.setTitle("");
            }
            if (null == ajaxHandlerAction.getPostedDate1()) {
                ajaxHandlerAction.setPostedDate1("");
            }
            if (null == ajaxHandlerAction.getPostedDate2()) {
                ajaxHandlerAction.setPostedDate2("");
            }
            //commented by prasad
            if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1())) {
                ajaxHandlerAction.setPostedDate1(DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getPostedDate1()));
            }

            if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2())) {
                ajaxHandlerAction.setPostedDate2(DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getPostedDate2()));
            }
            if ("All".equalsIgnoreCase(ajaxHandlerAction.getAssignedBy())) {
                ajaxHandlerAction.setAssignedBy("");
            }

            /* if ((!"".equalsIgnoreCase(ajaxHandlerAction.getCreatedBy())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getAssignedTo())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getStatus())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getTitle())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()))) {
            queryStringBuffer.append(" WHERE ");
            }*/



            if (!"".equalsIgnoreCase(ajaxHandlerAction.getCreatedBy()) && columnCounter == 0) {
                if ((ajaxHandlerAction.getCreatedBy().indexOf("*") == -1) && (ajaxHandlerAction.getCreatedBy().indexOf("%") == -1)) {
                    ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy() + "*");
                }
                ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy().replace("*", "%"));
                queryStringBuffer.append(" AND `tblRecRequirement`.`CreatedBy` LIKE '" + ajaxHandlerAction.getCreatedBy() + "'");
                columnCounter++;

                ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy().replace("%", ""));
            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getCreatedBy()) && columnCounter != 0) {
                if ((ajaxHandlerAction.getCreatedBy().indexOf("*") == -1) && (ajaxHandlerAction.getCreatedBy().indexOf("%") == -1)) {
                    ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy() + "*");
                }
                ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy().replace("*", "%"));
                queryStringBuffer.append("AND `tblRecRequirement`.`CreatedBy` LIKE '" + ajaxHandlerAction.getCreatedBy() + "'");
                columnCounter++;

                ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy().replace("%", ""));
            }

            if (!"".equalsIgnoreCase(ajaxHandlerAction.getAssignedTo()) && columnCounter == 0) {
                if ((ajaxHandlerAction.getAssignedTo().indexOf("*") == -1) && (ajaxHandlerAction.getAssignedTo().indexOf("%") == -1)) {
                    ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo() + "*");
                }
                ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo().replace("*", "%"));
                queryStringBuffer.append(" (`tblRecRequirement`.`AssignedTo` LIKE '" + ajaxHandlerAction.getAssignedTo() + "' OR tblRecRequirement.SecondaryRecruiter  LIKE'" + ajaxHandlerAction.getAssignedTo() + "') ");
                columnCounter++;

                ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo().replace("%", ""));
            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getAssignedTo()) && columnCounter != 0) {
                if ((ajaxHandlerAction.getAssignedTo().indexOf("*") == -1) && (ajaxHandlerAction.getAssignedTo().indexOf("%") == -1)) {
                    ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo() + "*");
                }
                ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo().replace("*", "%"));
                queryStringBuffer.append("AND (`tblRecRequirement`.`AssignedTo` LIKE '" + ajaxHandlerAction.getAssignedTo() + "' OR tblRecRequirement.SecondaryRecruiter  LIKE'" + ajaxHandlerAction.getAssignedTo() + "') ");
                columnCounter++;

                ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo().replace("%", ""));
            }
            if (!"".equalsIgnoreCase(ajaxHandlerAction.getAssignedBy()) && columnCounter == 0) {
                if ((ajaxHandlerAction.getAssignedBy().indexOf("*") == -1) && (ajaxHandlerAction.getAssignedBy().indexOf("%") == -1)) {
                    ajaxHandlerAction.setAssignedBy(ajaxHandlerAction.getAssignedBy() + "*");
                }
                ajaxHandlerAction.setAssignedBy(ajaxHandlerAction.getAssignedBy().replace("*", "%"));
                queryStringBuffer.append("`tblRecRequirement`.`AssignedBy` LIKE '" + ajaxHandlerAction.getAssignedBy() + "'");
                columnCounter++;

                ajaxHandlerAction.setAssignedBy(ajaxHandlerAction.getAssignedBy().replace("%", ""));
            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getAssignedBy()) && columnCounter != 0) {
                if ((ajaxHandlerAction.getAssignedBy().indexOf("*") == -1) && (ajaxHandlerAction.getAssignedBy().indexOf("%") == -1)) {
                    ajaxHandlerAction.setAssignedBy(ajaxHandlerAction.getAssignedBy() + "*");
                }
                ajaxHandlerAction.setAssignedBy(ajaxHandlerAction.getAssignedBy().replace("*", "%"));
                queryStringBuffer.append("AND `tblRecRequirement`.`AssignedBy` LIKE '" + ajaxHandlerAction.getAssignedBy() + "'");
                columnCounter++;

                ajaxHandlerAction.setAssignedBy(ajaxHandlerAction.getAssignedBy().replace("%", ""));
            }
            if (!"".equalsIgnoreCase(ajaxHandlerAction.getStatus()) && columnCounter == 0) {
                if ((ajaxHandlerAction.getStatus().indexOf("*") == -1) && (ajaxHandlerAction.getStatus().indexOf("%") == -1)) {
                    ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus() + "*");
                }
                ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus().replace("*", "%"));
                queryStringBuffer.append("`tblRecRequirement`.`Status` LIKE '" + ajaxHandlerAction.getStatus() + "'");
                columnCounter++;

                ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus().replace("%", ""));
            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getStatus()) && columnCounter != 0) {
                if ((ajaxHandlerAction.getStatus().indexOf("*") == -1) && (ajaxHandlerAction.getStatus().indexOf("%") == -1)) {
                    ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus() + "*");
                }
                ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus().replace("*", "%"));
                queryStringBuffer.append("AND `tblRecRequirement`.`Status` LIKE '" + ajaxHandlerAction.getStatus() + "'");
                columnCounter++;

                ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus().replace("%", ""));
            }

            if (!"".equalsIgnoreCase(ajaxHandlerAction.getTitle()) && columnCounter == 0) {
                if ((ajaxHandlerAction.getTitle().indexOf("*") == -1) && (ajaxHandlerAction.getTitle().indexOf("%") == -1)) {
                    ajaxHandlerAction.setTitle(ajaxHandlerAction.getTitle() + "*");
                }
                ajaxHandlerAction.setTitle(ajaxHandlerAction.getTitle().replace("*", "%"));
                queryStringBuffer.append("`tblRecRequirement`.`JobTitle` LIKE '" + ajaxHandlerAction.getTitle() + "'");
                columnCounter++;


            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getTitle()) && columnCounter != 0) {
                if ((ajaxHandlerAction.getTitle().indexOf("*") == -1) && (ajaxHandlerAction.getTitle().indexOf("%") == -1)) {
                    ajaxHandlerAction.setTitle(ajaxHandlerAction.getTitle() + "*");
                }
                ajaxHandlerAction.setTitle(ajaxHandlerAction.getTitle().replace("*", "%"));
                queryStringBuffer.append("AND `tblRecRequirement`.`JobTitle` LIKE '" + ajaxHandlerAction.getTitle() + "'");
                columnCounter++;
            }

            if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && "".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && columnCounter == 0) {
                if ((ajaxHandlerAction.getPostedDate1().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate1().indexOf("%") == -1)) {
                    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1() + "*");
                }
                ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1().replace("*", "%"));
                queryStringBuffer.append("date(`tblRecRequirement`.`DatePosted`) LIKE '" + ajaxHandlerAction.getPostedDate1() + "'");
                columnCounter++;

                ajaxHandlerAction.setPostedDate1(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate1().replace("%", "")));
            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && "".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && columnCounter != 0) {
                if ((ajaxHandlerAction.getPostedDate1().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate1().indexOf("%") == -1)) {
                    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1() + "*");
                }
                ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1().replace("*", "%"));
                queryStringBuffer.append("AND date(`tblRecRequirement`.`DatePosted`) LIKE '" + ajaxHandlerAction.getPostedDate1() + "'");
                columnCounter++;

                ajaxHandlerAction.setPostedDate1(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate1().replace("%", "")));
            }

            if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && "".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && columnCounter == 0) {
                if ((ajaxHandlerAction.getPostedDate2().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate2().indexOf("%") == -1)) {
                    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2() + "*");
                }
                ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2().replace("*", "%"));
                queryStringBuffer.append("date(`tblRecRequirement`.`DatePosted`) LIKE '" + ajaxHandlerAction.getPostedDate2() + "'");
                columnCounter++;

                ajaxHandlerAction.setPostedDate2(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate2().replace("%", "")));
            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && "".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && columnCounter != 0) {
                if ((ajaxHandlerAction.getPostedDate2().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate2().indexOf("%") == -1)) {
                    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2() + "*");
                }
                ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2().replace("*", "%"));
                queryStringBuffer.append("AND date(`tblRecRequirement`.`DatePosted`) LIKE '" + ajaxHandlerAction.getPostedDate2() + "'");
                columnCounter++;

                ajaxHandlerAction.setPostedDate2(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate2().replace("%", "")));
            }

            if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && !"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && columnCounter == 0) {
                if ((ajaxHandlerAction.getPostedDate1().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate1().indexOf("%") == -1)) {
                    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1() + "*");
                }
                ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1().replace("*", "%"));

                if ((ajaxHandlerAction.getPostedDate2().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate2().indexOf("%") == -1)) {
                    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2() + "*");
                }
                ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2().replace("*", "%"));

                queryStringBuffer.append("date(`tblRecRequirement`.`DatePosted`) BETWEEN '" + ajaxHandlerAction.getPostedDate1() + "' AND '" + ajaxHandlerAction.getPostedDate2() + "'");
                columnCounter++;

                ajaxHandlerAction.setPostedDate1(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate1().replace("%", "")));
                ajaxHandlerAction.setPostedDate2(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate2().replace("%", "")));

            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && !"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && columnCounter != 0) {
                if ((ajaxHandlerAction.getPostedDate1().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate1().indexOf("%") == -1)) {
                    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1() + "*");
                }
                ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1().replace("*", "%"));

                if ((ajaxHandlerAction.getPostedDate2().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate2().indexOf("%") == -1)) {
                    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2() + "*");
                }
                ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2().replace("*", "%"));

                queryStringBuffer.append("AND date(`tblRecRequirement`.`DatePosted`) BETWEEN '" + ajaxHandlerAction.getPostedDate1() + "' AND '" + ajaxHandlerAction.getPostedDate2() + "'");
                columnCounter++;

                ajaxHandlerAction.setPostedDate1(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate1().replace("%", "")));
                ajaxHandlerAction.setPostedDate2(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate2().replace("%", "")));
            }

// working country removed
            /*   if (columnCounter == 0) {//queryStringBuffer.append(" Where `tblRecRequirement`.`Country` like '"+userWorkCountry+"' ORDER BY date(`tblRecRequirement`.`DatePosted`),Country DESC"); ,tblRecRequirement.Country
            queryStringBuffer.append(" Where `tblRecRequirement`.`Country` like '" + userWorkCountry + "' ");
            } else {
            //queryStringBuffer.append(" AND `tblRecRequirement`.`Country` like '"+userWorkCountry+"' ORDER BY date(`tblRecRequirement`.`DatePosted`),Country DESC");,tblRecRequirement.Country
            queryStringBuffer.append(" AND `tblRecRequirement`.`Country` like '" + userWorkCountry + "' ");
            // httpServletRequest.getSession(false).setAttribute(ApplicationConstants.QUERY_STRING,queryStringBuffer.toString());
            }
             */

            if (!"-1".equals(ajaxHandlerAction.getPracticeid()) && ajaxHandlerAction.getPracticeid() != null) {
                //  System.out.println("ajaxHandlerAction.getPracticeid()---"+ajaxHandlerAction.getPracticeid());
                queryStringBuffer.append("  AND tblRecRequirement.Practice like '" + ajaxHandlerAction.getPracticeid() + "' ");
            }
            if (ajaxHandlerAction.getRequirementId() != 0) {
                queryStringBuffer.append("  AND tblRecRequirement .Id =" + ajaxHandlerAction.getRequirementId() + " ");
            }


            if (!"-1".equals(ajaxHandlerAction.getPracticeid()) && ajaxHandlerAction.getPracticeid() != null) {
                // System.out.println("ajaxHandlerAction.getPracticeid()---"+ajaxHandlerAction.getPracticeid());
            }
            if (!"-1".equals(ajaxHandlerAction.getCountry()) && ajaxHandlerAction.getCountry() != null) {
                // System.out.println("ajaxHandlerAction.getCountry()----"+ajaxHandlerAction.getCountry());
                queryStringBuffer.append(" AND `tblRecRequirement`.`Country` like '" + ajaxHandlerAction.getCountry() + "' ");
                if (!"".equals(ajaxHandlerAction.getState()) && ajaxHandlerAction.getState() != null) {
                    queryStringBuffer.append(" AND `tblRecRequirement`.`state` like '" + ajaxHandlerAction.getState() + "' ");
                }
            }
            if (ajaxHandlerAction.getPreSalesPerson() != null && !"".equals(ajaxHandlerAction.getPreSalesPerson())) {
                queryStringBuffer.append("AND (tblRecRequirement.AssignToTechLead ='" + ajaxHandlerAction.getPreSalesPerson() + "' || tblRecRequirement.SecondaryTechLead ='" + ajaxHandlerAction.getPreSalesPerson() + "') ");
            }
            if (ajaxHandlerAction.getClientId() != null && !"".equals(ajaxHandlerAction.getClientId())) {
                queryStringBuffer.append("  AND tblRecRequirement .CustomerId =" + ajaxHandlerAction.getClientId());
            }

            queryStringBuffer.append(" GROUP BY tblRecRequirement.Id ORDER BY `tblRecRequirement`.`DatePosted` DESC Limit 200");


//                   System.out.println("ajaxHandlerAction.getStatus()===="+ajaxHandlerAction.getStatus());
            // System.out.println("ajaxHandlerAction.getTitle()===" + ajaxHandlerAction.getTitle());
            //System.out.println("queryStringBuffer.toString()-->" + queryStringBuffer.toString());
            // System.out.println("query---"+queryStringBuffer.toString());
            httpServletRequest.getSession(false).setAttribute("REQ_SEARCH_QUERY", queryStringBuffer.toString());
            //System.out.println("REQ_SEARCH_QUERY --->"+REQ_SEARCH_QUERY);
                     /*
             *
             *End of where 
             */


            //System.out.println("Search Query ---"+queryStringBuffer.toString());

            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryStringBuffer.toString());

            //System.err.println("Account Activities:"+queryString);
            while (resultSet.next()) {

                int resumeCount = resultSet.getInt("resumecount");
                int RequirementId = resultSet.getInt("RequirementId");

                int ConsultantId = resultSet.getInt("ConsultantId");

                String JobTitle = resultSet.getString("JobTitle");

                String ConsultantNAME = resultSet.getString("ConsultantNAME");

                String Location = resultSet.getString("Location");

                String status = resultSet.getString("status");

                String SubmittedDate = resultSet.getString("SubmittedDate");

                String AssignedDate = resultSet.getString("AssignedDate");


                int noofresumes = resultSet.getInt("noofresumes");

                String Recruiter = "-";
                if (resultSet.getString("Recruiter") != null || resultSet.getString("Recruiter") != "") {
                    Recruiter = resultSet.getString("Recruiter");
                }


                String SecondaryRecruiter = "-";
                if (resultSet.getString("SecondaryRecruiter") != null || resultSet.getString("SecondaryRecruiter") != "") {
                    SecondaryRecruiter = resultSet.getString("SecondaryRecruiter");
                }

                String PreSales = "-";
                if (resultSet.getString("PreSales") != null || resultSet.getString("PreSales") != "") {
                    PreSales = resultSet.getString("PreSales");
                }


                String Skills = resultSet.getString("Skills");



                i++;
                /*createdBy=resultSet.getString("CreatedById");
                count =resultSet.getInt("total");*/
                //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+status+"|"+datedue+"|"+contactId+"|"+accountId+"|"+"^";
                //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+status+"|"+datedue+"|"+"^";
                totalStream = totalStream + i + "|" + resumeCount + "|" + RequirementId + "|" + ConsultantId + "|" + JobTitle + "|" + ConsultantNAME + "|" + Location + "|" + status + "|" + SubmittedDate + "|" + AssignedDate + "|" + noofresumes + "|" + Recruiter + "|" + SecondaryRecruiter + "|" + PreSales + "|" + PreSales + "|" + Skills + "^";
                //  totalActivities=totalActivities+count;
            }
            stringBuffer.append(totalStream);
            stringBuffer.append("addto");

            stringBuffer.append(i);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.err.println("response string is"+stringBuffer.toString());
        return stringBuffer.toString();
    }

//new impl for requirement list
    public String getRequirementAdminAjaxList(HttpServletRequest httpServletRequest) throws ServiceLocatorException {



        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String createdBy = "";
        String totalStream = "";
        String queryString = "";
        int i = 0;

        String userWorkCountry = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.WORKING_COUNTRY).toString();
        int isRequirementAdmin = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.IS_REQUIREMENT_ADMIN).toString());

        try {
            /*queryString ="SELECT Id,ActivityType,Status,Description,DateDue,CreatedDate,AssignedToId,Comments FROM tblCrmActivity";
            queryString = queryString + " WHERE AccountId ="+accId+" AND ContactId =0 GROUP BY ActivityType,STATUS,Description,AssignedToId ORDER BY CreatedDate DESC";*/

            queryStringBuffer = new StringBuffer();
            String territory = "";
            //  httpServletRequest.getSession(false).setAttribute("tempStatus", "Open");
            if (httpServletRequest.getSession(false).getAttribute("REQ_ADMIN_SEARCH_QUERY") == null) {
                // queryString = "select TRIM(Id) AS RequirementId,TRIM(JobTitle) AS JobTitle ,CONCAT(`tblRecRequirement`.`State`,', ',`tblRecRequirement`.`Country`) AS Location,STATUS,StartDate,AssignedTo AS Recruiter,AssignToTechLead AS PreSales,Skills FROM tblRecRequirement WHERE `tblRecRequirement`.`Country` like '"+userWorkCountry+"' ORDER BY DatePosted DESC";
                // queryString = "select TRIM(Id) AS RequirementId,TRIM(JobTitle) AS JobTitle ,CONCAT(`tblRecRequirement`.`State`,', ',`tblRecRequirement`.`Country`) AS Location,STATUS,StartDate,AssignedTo AS Recruiter,SecondaryRecruiter AS SecondaryRecruiter,AssignToTechLead AS PreSales,Skills FROM tblRecRequirement WHERE `tblRecRequirement`.`Country` like '"+userWorkCountry+"' ORDER BY DatePosted DESC";
                queryStringBuffer.append(" SELECT COUNT(tblRecRequirement.Id) AS resumecount,TRIM(tblRecRequirement .Id) AS RequirementId,TRIM(tblRecConsultant.Id) AS ConsultantId,TRIM(JobTitle) AS JobTitle, ");
                queryStringBuffer.append("CONCAT(tblRecConsultant.FName,'.',tblRecConsultant.LName) AS ConsultantNAME ,");
                queryStringBuffer.append("CONCAT(`tblRecRequirement`.`State`,',',`tblRecRequirement`.`Country`) AS Location,");
                queryStringBuffer.append("tblRecRequirement .STATUS AS status,tblRec.CreatedDate as SubmittedDate,");
                queryStringBuffer.append("tblRecRequirement.AssignedDate as AssignedDate,tblRecRequirement.NoResumes AS noofresumes,");
                queryStringBuffer.append("AssignedTo AS Recruiter,SecondaryRecruiter AS SecondaryRecruiter,AssignToTechLead AS PreSales,");
                queryStringBuffer.append("Skills FROM tblRecRequirement LEFT JOIN(tblRecConsultant, tblRec)");
                queryStringBuffer.append("ON (tblRecRequirement.Id=tblRec.RequirementId AND tblRecConsultant.Id=tblRec.ConsultantId) ");
                //queryStringBuffer.append("WHERE tblRecRequirement.Country LIKE '" + userWorkCountry + "'  AND tblRecRequirement.STATUS = 'Open' ");
                queryStringBuffer.append("WHERE tblRecRequirement.Country LIKE '" + userWorkCountry + "' ");


                queryStringBuffer.append(" GROUP BY tblRecRequirement.Id ORDER BY tblRecRequirement.DatePosted DESC Limit 200");
            } else {
                queryStringBuffer.append((String) httpServletRequest.getSession(false).getAttribute("REQ_ADMIN_SEARCH_QUERY"));
            }



            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryStringBuffer.toString());
            //System.err.println("Account Activities:"+queryString);
            while (resultSet.next()) {

                int resumeCount = resultSet.getInt("resumecount");
                int RequirementId = resultSet.getInt("RequirementId");

                int ConsultantId = resultSet.getInt("ConsultantId");
                String JobTitle = resultSet.getString("JobTitle");

                String ConsultantNAME = resultSet.getString("ConsultantNAME");

                String Location = resultSet.getString("Location");

                String status = resultSet.getString("status");

                String SubmittedDate = resultSet.getString("SubmittedDate");
                String AssignedDate = resultSet.getString("AssignedDate");


                int noofresumes = resultSet.getInt("noofresumes");

                String Recruiter = "-";
                if (resultSet.getString("Recruiter") != null || resultSet.getString("Recruiter") != "") {
                    Recruiter = resultSet.getString("Recruiter");
                }


                String SecondaryRecruiter = "-";
                if (resultSet.getString("SecondaryRecruiter") != null || resultSet.getString("SecondaryRecruiter") != "") {
                    SecondaryRecruiter = resultSet.getString("SecondaryRecruiter");
                }

                String PreSales = "-";
                if (resultSet.getString("PreSales") != null || resultSet.getString("PreSales") != "") {
                    PreSales = resultSet.getString("PreSales");
                }


                String Skills = resultSet.getString("Skills");



                i++;
                /*createdBy=resultSet.getString("CreatedById");
                count =resultSet.getInt("total");*/
                //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+status+"|"+datedue+"|"+contactId+"|"+accountId+"|"+"^";
                //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+status+"|"+datedue+"|"+"^";
                totalStream = totalStream + i + "|" + resumeCount + "|" + RequirementId + "|" + ConsultantId + "|" + JobTitle + "|" + ConsultantNAME + "|" + Location + "|" + status + "|" + SubmittedDate + "|" + AssignedDate + "|" + noofresumes + "|" + Recruiter + "|" + SecondaryRecruiter + "|" + PreSales + "|" + PreSales + "|" + Skills + "^";
                //  totalActivities=totalActivities+count;
            }
            stringBuffer.append(totalStream);
            stringBuffer.append("addto");

            stringBuffer.append(i);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.err.println("response string is"+stringBuffer.toString());
        return stringBuffer.toString();
    }

//    public String searchAdminRequirementAjaxList(HttpServletRequest httpServletRequest, AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {
//
//        stringBuffer = new StringBuffer();
//        CallableStatement callableStatement = null;
//        PreparedStatement preparedStatement = null;
//        Statement statement = null;
//        ResultSet resultSet = null;
//        String createdBy = "";
//        String totalStream = "";
//        String queryString = "";
//        int i = 0;
//
//        String userWorkCountry = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.WORKING_COUNTRY).toString();
//
//        int userRoleId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_ROLE_ID).toString());
//        //resultType = "accessFailed";
//
//        DateUtility dateUtility = new DateUtility();
//
//        // System.out.println(" impl  --- createdBy----------"+ajaxHandlerAction.getCreatedBy()+"--assignedTo-------------"+ajaxHandlerAction.getAssignedTo()+"--title-------------"+ajaxHandlerAction.getTitle()+"--postedDate1-------"+ajaxHandlerAction.getPostedDate1()+"---postedDate2----"+ajaxHandlerAction.getPostedDate2()+"---status----"+ajaxHandlerAction.getStatus());
//
//
//        try {
//            /*queryString ="SELECT Id,ActivityType,Status,Description,DateDue,CreatedDate,AssignedToId,Comments FROM tblCrmActivity";
//            queryString = queryString + " WHERE AccountId ="+accId+" AND ContactId =0 GROUP BY ActivityType,STATUS,Description,AssignedToId ORDER BY CreatedDate DESC";*/
//
//
//            //   System.out.println("ajaxHandlerAction.getTitle()==="+ajaxHandlerAction.getTitle());
//
//            httpServletRequest.getSession(false).setAttribute("tempTitle", ajaxHandlerAction.getTitle());
//            httpServletRequest.getSession(false).setAttribute("tempStatus", ajaxHandlerAction.getStatus());
//            httpServletRequest.getSession(false).setAttribute("tempAssignedTo", ajaxHandlerAction.getAssignedTo());
//            httpServletRequest.getSession(false).setAttribute("tempStartDate", ajaxHandlerAction.getPostedDate1());
//            httpServletRequest.getSession(false).setAttribute("tempEndDate", ajaxHandlerAction.getPostedDate2());
//            httpServletRequest.getSession(false).setAttribute("tempCreatedBy", ajaxHandlerAction.getCreatedBy());
//            int columnCounter = 0;
//            queryStringBuffer = new StringBuffer();
//            String territory = "";
//            queryStringBuffer.append(" SELECT COUNT(tblRecRequirement.Id) AS resumecount,TRIM(tblRecRequirement .Id) AS RequirementId,TRIM(tblRecConsultant.Id) AS ConsultantId,TRIM(JobTitle) AS JobTitle, ");
//            queryStringBuffer.append("CONCAT(tblRecConsultant.FName,'.',tblRecConsultant.LName) AS ConsultantNAME ,");
//            queryStringBuffer.append("CONCAT(`tblRecRequirement`.`State`,',',`tblRecRequirement`.`Country`) AS Location,");
//            queryStringBuffer.append("tblRecRequirement .STATUS AS status,tblRec.CreatedDate as SubmittedDate,");
//            queryStringBuffer.append("tblRecRequirement.AssignedDate as AssignedDate,tblRecRequirement.NoResumes AS noofresumes,");
//            queryStringBuffer.append("AssignedTo AS Recruiter,SecondaryRecruiter AS SecondaryRecruiter,AssignToTechLead AS PreSales,");
//            queryStringBuffer.append("Skills FROM tblRecRequirement LEFT JOIN(tblRecConsultant, tblRec)");
//            queryStringBuffer.append("ON (tblRecRequirement.Id=tblRec.RequirementId AND tblRecConsultant.Id=tblRec.ConsultantId) ");
//            // queryStringBuffer.append("WHERE tblRecRequirement.Country LIKE '"+userWorkCountry+"'  " );
//            //queryStringBuffer.append("WHERE tblRecRequirement.Country LIKE '%'  " );
//            int rollId = Integer.parseInt((String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_ROLE_ID));
//
//
//            /**
//             *
//             *where Start
//             */
//            if (null == ajaxHandlerAction.getCreatedBy()) {
//                ajaxHandlerAction.setCreatedBy("");
//            }
//            if ("All".equalsIgnoreCase(ajaxHandlerAction.getCreatedBy())) {
//                ajaxHandlerAction.setCreatedBy("");
//            }
//            if (null == ajaxHandlerAction.getAssignedTo()) {
//                ajaxHandlerAction.setAssignedTo("");
//            }
//            if ("All".equalsIgnoreCase(ajaxHandlerAction.getAssignedTo())) {
//                ajaxHandlerAction.setAssignedTo("");
//            }
//            if (null == ajaxHandlerAction.getStatus()) {
//                ajaxHandlerAction.setStatus("");
//            }
//            if ("All".equalsIgnoreCase(ajaxHandlerAction.getStatus())) {
//                ajaxHandlerAction.setStatus("");
//            }
//            if (null == ajaxHandlerAction.getTitle()) {
//                ajaxHandlerAction.setTitle("");
//            }
//            if (null == ajaxHandlerAction.getPostedDate1()) {
//                ajaxHandlerAction.setPostedDate1("");
//            }
//            if (null == ajaxHandlerAction.getPostedDate2()) {
//                ajaxHandlerAction.setPostedDate2("");
//            }
//            //commented by prasad
//            if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1())) {
//                ajaxHandlerAction.setPostedDate1(DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getPostedDate1()));
//            }
//
//            if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2())) {
//                ajaxHandlerAction.setPostedDate2(DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getPostedDate2()));
//            }
//
//            if ((!"".equalsIgnoreCase(ajaxHandlerAction.getCreatedBy())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getAssignedTo())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getStatus())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getTitle())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()))) {
//                queryStringBuffer.append(" WHERE 1=1");
//            }
//
//
//
//            if (!"".equalsIgnoreCase(ajaxHandlerAction.getCreatedBy()) && columnCounter == 0) {
//                if ((ajaxHandlerAction.getCreatedBy().indexOf("*") == -1) && (ajaxHandlerAction.getCreatedBy().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy() + "*");
//                }
//                ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy().replace("*", "%"));
//                queryStringBuffer.append(" AND `tblRecRequirement`.`CreatedBy` LIKE '" + ajaxHandlerAction.getCreatedBy() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy().replace("%", ""));
//            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getCreatedBy()) && columnCounter != 0) {
//                if ((ajaxHandlerAction.getCreatedBy().indexOf("*") == -1) && (ajaxHandlerAction.getCreatedBy().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy() + "*");
//                }
//                ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy().replace("*", "%"));
//                queryStringBuffer.append(" AND `tblRecRequirement`.`CreatedBy` LIKE '" + ajaxHandlerAction.getCreatedBy() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy().replace("%", ""));
//            }
//
//            if (!"".equalsIgnoreCase(ajaxHandlerAction.getAssignedTo()) && columnCounter == 0) {
//                if ((ajaxHandlerAction.getAssignedTo().indexOf("*") == -1) && (ajaxHandlerAction.getAssignedTo().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo() + "*");
//                }
//                ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo().replace("*", "%"));
//                queryStringBuffer.append(" AND `tblRecRequirement`.`AssignedTo` LIKE '" + ajaxHandlerAction.getAssignedTo() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo().replace("%", ""));
//            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getAssignedTo()) && columnCounter != 0) {
//                if ((ajaxHandlerAction.getAssignedTo().indexOf("*") == -1) && (ajaxHandlerAction.getAssignedTo().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo() + "*");
//                }
//                ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo().replace("*", "%"));
//                queryStringBuffer.append(" AND `tblRecRequirement`.`AssignedTo` LIKE '" + ajaxHandlerAction.getAssignedTo() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo().replace("%", ""));
//            }
//
//            if (!"".equalsIgnoreCase(ajaxHandlerAction.getStatus()) && columnCounter == 0) {
//                if ((ajaxHandlerAction.getStatus().indexOf("*") == -1) && (ajaxHandlerAction.getStatus().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus() + "*");
//                }
//                ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus().replace("*", "%"));
//                queryStringBuffer.append(" AND `tblRecRequirement`.`Status` LIKE '" + ajaxHandlerAction.getStatus() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus().replace("%", ""));
//            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getStatus()) && columnCounter != 0) {
//                if ((ajaxHandlerAction.getStatus().indexOf("*") == -1) && (ajaxHandlerAction.getStatus().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus() + "*");
//                }
//                ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus().replace("*", "%"));
//                queryStringBuffer.append(" AND `tblRecRequirement`.`Status` LIKE '" + ajaxHandlerAction.getStatus() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus().replace("%", ""));
//            }
//
//            if (!"".equalsIgnoreCase(ajaxHandlerAction.getTitle()) && columnCounter == 0) {
//                if ((ajaxHandlerAction.getTitle().indexOf("*") == -1) && (ajaxHandlerAction.getTitle().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setTitle(ajaxHandlerAction.getTitle() + "*");
//                }
//                ajaxHandlerAction.setTitle(ajaxHandlerAction.getTitle().replace("*", "%"));
//                queryStringBuffer.append(" AND `tblRecRequirement`.`JobTitle` LIKE '" + ajaxHandlerAction.getTitle() + "'");
//                columnCounter++;
//
//
//            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getTitle()) && columnCounter != 0) {
//                if ((ajaxHandlerAction.getTitle().indexOf("*") == -1) && (ajaxHandlerAction.getTitle().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setTitle(ajaxHandlerAction.getTitle() + "*");
//                }
//                ajaxHandlerAction.setTitle(ajaxHandlerAction.getTitle().replace("*", "%"));
//                queryStringBuffer.append(" AND `tblRecRequirement`.`JobTitle` LIKE '" + ajaxHandlerAction.getTitle() + "'");
//                columnCounter++;
//            }
//
//            if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && "".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && columnCounter == 0) {
//                if ((ajaxHandlerAction.getPostedDate1().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate1().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1() + "*");
//                }
//                ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1().replace("*", "%"));
//                queryStringBuffer.append(" AND date(`tblRecRequirement`.`DatePosted`) LIKE '" + ajaxHandlerAction.getPostedDate1() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setPostedDate1(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate1().replace("%", "")));
//            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && "".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && columnCounter != 0) {
//                if ((ajaxHandlerAction.getPostedDate1().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate1().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1() + "*");
//                }
//                ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1().replace("*", "%"));
//                queryStringBuffer.append(" AND date(`tblRecRequirement`.`DatePosted`) LIKE '" + ajaxHandlerAction.getPostedDate1() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setPostedDate1(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate1().replace("%", "")));
//            }
//
//            if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && "".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && columnCounter == 0) {
//                if ((ajaxHandlerAction.getPostedDate2().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate2().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2() + "*");
//                }
//                ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2().replace("*", "%"));
//                queryStringBuffer.append(" AND date(`tblRecRequirement`.`DatePosted`) LIKE '" + ajaxHandlerAction.getPostedDate2() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setPostedDate2(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate2().replace("%", "")));
//            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && "".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && columnCounter != 0) {
//                if ((ajaxHandlerAction.getPostedDate2().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate2().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2() + "*");
//                }
//                ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2().replace("*", "%"));
//                queryStringBuffer.append(" AND date(`tblRecRequirement`.`DatePosted`) LIKE '" + ajaxHandlerAction.getPostedDate2() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setPostedDate2(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate2().replace("%", "")));
//            }
//
//            if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && !"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && columnCounter == 0) {
//                if ((ajaxHandlerAction.getPostedDate1().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate1().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1() + "*");
//                }
//                ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1().replace("*", "%"));
//
//                if ((ajaxHandlerAction.getPostedDate2().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate2().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2() + "*");
//                }
//                ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2().replace("*", "%"));
//
//                queryStringBuffer.append("  AND date(`tblRecRequirement`.`DatePosted`) BETWEEN '" + ajaxHandlerAction.getPostedDate1() + "' AND '" + ajaxHandlerAction.getPostedDate2() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setPostedDate1(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate1().replace("%", "")));
//                ajaxHandlerAction.setPostedDate2(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate2().replace("%", "")));
//
//            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && !"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && columnCounter != 0) {
//                if ((ajaxHandlerAction.getPostedDate1().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate1().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1() + "*");
//                }
//                ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1().replace("*", "%"));
//
//                if ((ajaxHandlerAction.getPostedDate2().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate2().indexOf("%") == -1)) {
//                    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2() + "*");
//                }
//                ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2().replace("*", "%"));
//
//                queryStringBuffer.append(" AND date(`tblRecRequirement`.`DatePosted`) BETWEEN '" + ajaxHandlerAction.getPostedDate1() + "' AND '" + ajaxHandlerAction.getPostedDate2() + "'");
//                columnCounter++;
//
//                ajaxHandlerAction.setPostedDate1(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate1().replace("%", "")));
//                ajaxHandlerAction.setPostedDate2(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate2().replace("%", "")));
//            }
//
//
//            if (columnCounter == 0) {//queryStringBuffer.append(" Where `tblRecRequirement`.`Country` like '"+userWorkCountry+"' ORDER BY date(`tblRecRequirement`.`DatePosted`),Country DESC"); ,tblRecRequirement.Country
//                queryStringBuffer.append(" Where `tblRecRequirement`.`Country` like '" + userWorkCountry + "' ");
//            } else {
//                //queryStringBuffer.append(" AND `tblRecRequirement`.`Country` like '"+userWorkCountry+"' ORDER BY date(`tblRecRequirement`.`DatePosted`),Country DESC");,tblRecRequirement.Country
//                queryStringBuffer.append(" AND `tblRecRequirement`.`Country` like '" + userWorkCountry + "' ");
//                // httpServletRequest.getSession(false).setAttribute(ApplicationConstants.QUERY_STRING,queryStringBuffer.toString());
//            }
//
//            queryStringBuffer.append(" GROUP BY tblRecRequirement.Id ORDER BY date(`tblRecRequirement`.`DatePosted`) DESC Limit 100");
//
//
////                   System.out.println("ajaxHandlerAction.getStatus()===="+ajaxHandlerAction.getStatus());
//            //     System.out.println("ajaxHandlerAction.getTitle()==="+ajaxHandlerAction.getTitle());
//
//
//            httpServletRequest.getSession(false).setAttribute("REQ_ADMIN_SEARCH_QUERY", queryStringBuffer.toString());
//            //System.out.println("REQ_SEARCH_QUERY --->"+REQ_SEARCH_QUERY);
//                     /*
//             *
//             *End of where 
//             */
//
//
//            //  System.out.println("query String for List ---"+queryStringBuffer.toString());
//
//            connection = ConnectionProvider.getInstance().getConnection();
//            statement = connection.createStatement();
//            resultSet = statement.executeQuery(queryStringBuffer.toString());
//
//            //System.err.println("Account Activities:"+queryString);
//            while (resultSet.next()) {
//
//                int resumeCount = resultSet.getInt("resumecount");
//                int RequirementId = resultSet.getInt("RequirementId");
//
//                int ConsultantId = resultSet.getInt("ConsultantId");
//
//                String JobTitle = resultSet.getString("JobTitle");
//
//                String ConsultantNAME = resultSet.getString("ConsultantNAME");
//
//                String Location = resultSet.getString("Location");
//
//                String status = resultSet.getString("status");
//
//                String SubmittedDate = resultSet.getString("SubmittedDate");
//
//                String AssignedDate = resultSet.getString("AssignedDate");
//
//
//                int noofresumes = resultSet.getInt("noofresumes");
//
//                String Recruiter = "-";
//                if (resultSet.getString("Recruiter") != null || resultSet.getString("Recruiter") != "") {
//                    Recruiter = resultSet.getString("Recruiter");
//                }
//
//
//                String SecondaryRecruiter = "-";
//                if (resultSet.getString("SecondaryRecruiter") != null || resultSet.getString("SecondaryRecruiter") != "") {
//                    SecondaryRecruiter = resultSet.getString("SecondaryRecruiter");
//                }
//
//                String PreSales = "-";
//                if (resultSet.getString("PreSales") != null || resultSet.getString("PreSales") != "") {
//                    PreSales = resultSet.getString("PreSales");
//                }
//
//
//                String Skills = resultSet.getString("Skills");
//
//
//
//                i++;
//                /*createdBy=resultSet.getString("CreatedById");
//                count =resultSet.getInt("total");*/
//                //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+status+"|"+datedue+"|"+contactId+"|"+accountId+"|"+"^";
//                //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+status+"|"+datedue+"|"+"^";
//                totalStream = totalStream + i + "|" + resumeCount + "|" + RequirementId + "|" + ConsultantId + "|" + JobTitle + "|" + ConsultantNAME + "|" + Location + "|" + status + "|" + SubmittedDate + "|" + AssignedDate + "|" + noofresumes + "|" + Recruiter + "|" + SecondaryRecruiter + "|" + PreSales + "|" + PreSales + "|" + Skills + "^";
//                //  totalActivities=totalActivities+count;
//            }
//            stringBuffer.append(totalStream);
//            stringBuffer.append("addto");
//
//            stringBuffer.append(i);
//
//        } catch (Exception sqe) {
//            sqe.printStackTrace();
//        } finally {
//            try {
//                if (resultSet != null) {
//                    resultSet.close();
//                    resultSet = null;
//                }
//                if (statement != null) {
//                    statement.close();
//                    statement = null;
//                }
//                if (connection != null) {
//                    connection.close();
//                    connection = null;
//                }
//            } catch (SQLException sqle) {
//            }
//        }
//        // System.err.println("response string is"+stringBuffer.toString());
//        return stringBuffer.toString();
//    }
    public String searchAdminRequirementAjaxList(HttpServletRequest httpServletRequest, AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String createdBy = "";
        String totalStream = "";
        String queryString = "";
        int i = 0;

        String userWorkCountry = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.WORKING_COUNTRY).toString();

        int userRoleId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_ROLE_ID).toString());
        //resultType = "accessFailed";

        DateUtility dateUtility = new DateUtility();

        // System.out.println(" impl  --- createdBy----------"+ajaxHandlerAction.getCreatedBy()+"--assignedTo-------------"+ajaxHandlerAction.getAssignedTo()+"--title-------------"+ajaxHandlerAction.getTitle()+"--postedDate1-------"+ajaxHandlerAction.getPostedDate1()+"---postedDate2----"+ajaxHandlerAction.getPostedDate2()+"---status----"+ajaxHandlerAction.getStatus());


        try {
            /*queryString ="SELECT Id,ActivityType,Status,Description,DateDue,CreatedDate,AssignedToId,Comments FROM tblCrmActivity";
            queryString = queryString + " WHERE AccountId ="+accId+" AND ContactId =0 GROUP BY ActivityType,STATUS,Description,AssignedToId ORDER BY CreatedDate DESC";*/


            //   System.out.println("ajaxHandlerAction.getTitle()==="+ajaxHandlerAction.getTitle());

            httpServletRequest.getSession(false).setAttribute("tempTitle", ajaxHandlerAction.getTitle());
            httpServletRequest.getSession(false).setAttribute("tempStatus", ajaxHandlerAction.getStatus());
            httpServletRequest.getSession(false).setAttribute("tempAssignedTo", ajaxHandlerAction.getAssignedTo());
            httpServletRequest.getSession(false).setAttribute("tempStartDate", ajaxHandlerAction.getPostedDate1());
            httpServletRequest.getSession(false).setAttribute("tempEndDate", ajaxHandlerAction.getPostedDate2());
            httpServletRequest.getSession(false).setAttribute("tempCreatedBy", ajaxHandlerAction.getCreatedBy());
            httpServletRequest.getSession(false).setAttribute("tempAssignedBy", ajaxHandlerAction.getAssignedBy());
            httpServletRequest.getSession(false).setAttribute("tempClientId", ajaxHandlerAction.getClientId());
            int columnCounter = 0;
            queryStringBuffer = new StringBuffer();
            String territory = "";
            queryStringBuffer.append(" SELECT COUNT(tblRecRequirement.Id) AS resumecount,TRIM(tblRecRequirement .Id) AS RequirementId,TRIM(tblRecConsultant.Id) AS ConsultantId,TRIM(JobTitle) AS JobTitle, ");
            queryStringBuffer.append("CONCAT(tblRecConsultant.FName,'.',tblRecConsultant.LName) AS ConsultantNAME ,");
            queryStringBuffer.append("CONCAT(`tblRecRequirement`.`State`,',',`tblRecRequirement`.`Country`) AS Location,");
            queryStringBuffer.append("tblRecRequirement .STATUS AS status,tblRec.CreatedDate as SubmittedDate,");
            queryStringBuffer.append("tblRecRequirement.AssignedDate as AssignedDate,tblRecRequirement.NoResumes AS noofresumes,");
            queryStringBuffer.append("AssignedTo AS Recruiter,SecondaryRecruiter AS SecondaryRecruiter,AssignToTechLead AS PreSales,");
            queryStringBuffer.append("Skills FROM tblRecRequirement LEFT JOIN(tblRecConsultant, tblRec)");
            queryStringBuffer.append("ON (tblRecRequirement.Id=tblRec.RequirementId AND tblRecConsultant.Id=tblRec.ConsultantId) WHERE 1=1");
            // queryStringBuffer.append("WHERE tblRecRequirement.Country LIKE '"+userWorkCountry+"'  " );
            //queryStringBuffer.append("WHERE tblRecRequirement.Country LIKE '%'  " );
            int rollId = Integer.parseInt((String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_ROLE_ID));


            /**
             *
             * where Start
             */
            if (null == ajaxHandlerAction.getCreatedBy()) {
                ajaxHandlerAction.setCreatedBy("");
            }
            if ("All".equalsIgnoreCase(ajaxHandlerAction.getCreatedBy())) {
                ajaxHandlerAction.setCreatedBy("");
            }
            if (null == ajaxHandlerAction.getAssignedTo()) {
                ajaxHandlerAction.setAssignedTo("");
            }
            if ("All".equalsIgnoreCase(ajaxHandlerAction.getAssignedTo())) {
                ajaxHandlerAction.setAssignedTo("");
            }
            if (null == ajaxHandlerAction.getStatus()) {
                ajaxHandlerAction.setStatus("");
            }
            if ("All".equalsIgnoreCase(ajaxHandlerAction.getStatus())) {
                ajaxHandlerAction.setStatus("");
            }
            if (null == ajaxHandlerAction.getTitle()) {
                ajaxHandlerAction.setTitle("");
            }
            if (null == ajaxHandlerAction.getPostedDate1()) {
                ajaxHandlerAction.setPostedDate1("");
            }
            if (null == ajaxHandlerAction.getPostedDate2()) {
                ajaxHandlerAction.setPostedDate2("");
            }
            //commented by prasad
            if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1())) {
                ajaxHandlerAction.setPostedDate1(DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getPostedDate1()));
            }

            if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2())) {
                ajaxHandlerAction.setPostedDate2(DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getPostedDate2()));
            }
            if ("All".equalsIgnoreCase(ajaxHandlerAction.getAssignedBy())) {
                ajaxHandlerAction.setAssignedBy("");
            }

//            if ((!"".equalsIgnoreCase(ajaxHandlerAction.getCreatedBy())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getAssignedTo())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getStatus())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getTitle())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1())) || (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()))) {
//                queryStringBuffer.append(" WHERE 1=1");
//            }

            if (httpServletRequest.getSession(false).getAttribute("roleName").toString().equals("Pre-Sales")) {
                queryStringBuffer.append(" AND (tblRecRequirement.AssignToTechLead='" + httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_NAME).toString() + "' OR tblRecRequirement.SecondaryTechLead='" + httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_NAME).toString() + "') ");
            }

            if (!"".equalsIgnoreCase(ajaxHandlerAction.getCreatedBy()) && columnCounter == 0) {
                if ((ajaxHandlerAction.getCreatedBy().indexOf("*") == -1) && (ajaxHandlerAction.getCreatedBy().indexOf("%") == -1)) {
                    ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy() + "*");
                }
                ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy().replace("*", "%"));
                queryStringBuffer.append(" AND `tblRecRequirement`.`CreatedBy` LIKE '" + ajaxHandlerAction.getCreatedBy() + "'");
                columnCounter++;

                ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy().replace("%", ""));
            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getCreatedBy()) && columnCounter != 0) {
                if ((ajaxHandlerAction.getCreatedBy().indexOf("*") == -1) && (ajaxHandlerAction.getCreatedBy().indexOf("%") == -1)) {
                    ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy() + "*");
                }
                ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy().replace("*", "%"));
                queryStringBuffer.append(" AND `tblRecRequirement`.`CreatedBy` LIKE '" + ajaxHandlerAction.getCreatedBy() + "'");
                columnCounter++;

                ajaxHandlerAction.setCreatedBy(ajaxHandlerAction.getCreatedBy().replace("%", ""));
            }

            if (!"".equalsIgnoreCase(ajaxHandlerAction.getAssignedTo()) && columnCounter == 0) {
                if ((ajaxHandlerAction.getAssignedTo().indexOf("*") == -1) && (ajaxHandlerAction.getAssignedTo().indexOf("%") == -1)) {
                    ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo() + "*");
                }
                ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo().replace("*", "%"));
                queryStringBuffer.append(" AND (`tblRecRequirement`.`AssignedTo` LIKE '" + ajaxHandlerAction.getAssignedTo() + "' OR tblRecRequirement.SecondaryRecruiter  LIKE'" + ajaxHandlerAction.getAssignedTo() + "') ");
                columnCounter++;

                ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo().replace("%", ""));
            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getAssignedTo()) && columnCounter != 0) {
                if ((ajaxHandlerAction.getAssignedTo().indexOf("*") == -1) && (ajaxHandlerAction.getAssignedTo().indexOf("%") == -1)) {
                    ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo() + "*");
                }
                ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo().replace("*", "%"));
                queryStringBuffer.append(" AND (`tblRecRequirement`.`AssignedTo` LIKE '" + ajaxHandlerAction.getAssignedTo() + "' OR tblRecRequirement.SecondaryRecruiter  LIKE'" + ajaxHandlerAction.getAssignedTo() + "') ");
                columnCounter++;

                ajaxHandlerAction.setAssignedTo(ajaxHandlerAction.getAssignedTo().replace("%", ""));
            }
            if (!"".equalsIgnoreCase(ajaxHandlerAction.getAssignedBy()) && columnCounter == 0) {
                if ((ajaxHandlerAction.getAssignedBy().indexOf("*") == -1) && (ajaxHandlerAction.getAssignedBy().indexOf("%") == -1)) {
                    ajaxHandlerAction.setAssignedBy(ajaxHandlerAction.getAssignedBy() + "*");
                }
                ajaxHandlerAction.setAssignedBy(ajaxHandlerAction.getAssignedBy().replace("*", "%"));
                queryStringBuffer.append(" AND `tblRecRequirement`.`AssignedBy` LIKE '" + ajaxHandlerAction.getAssignedBy() + "'");
                columnCounter++;

                ajaxHandlerAction.setAssignedBy(ajaxHandlerAction.getAssignedBy().replace("%", ""));
            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getAssignedBy()) && columnCounter != 0) {
                if ((ajaxHandlerAction.getAssignedBy().indexOf("*") == -1) && (ajaxHandlerAction.getAssignedBy().indexOf("%") == -1)) {
                    ajaxHandlerAction.setAssignedBy(ajaxHandlerAction.getAssignedBy() + "*");
                }
                ajaxHandlerAction.setAssignedBy(ajaxHandlerAction.getAssignedBy().replace("*", "%"));
                queryStringBuffer.append("AND `tblRecRequirement`.`AssignedBy` LIKE '" + ajaxHandlerAction.getAssignedBy() + "'");
                columnCounter++;

                ajaxHandlerAction.setAssignedBy(ajaxHandlerAction.getAssignedBy().replace("%", ""));
            }

            if (!"".equalsIgnoreCase(ajaxHandlerAction.getStatus()) && columnCounter == 0) {
                if ((ajaxHandlerAction.getStatus().indexOf("*") == -1) && (ajaxHandlerAction.getStatus().indexOf("%") == -1)) {
                    ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus() + "*");
                }
                ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus().replace("*", "%"));
                queryStringBuffer.append(" AND `tblRecRequirement`.`Status` LIKE '" + ajaxHandlerAction.getStatus() + "'");
                columnCounter++;

                ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus().replace("%", ""));
            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getStatus()) && columnCounter != 0) {
                if ((ajaxHandlerAction.getStatus().indexOf("*") == -1) && (ajaxHandlerAction.getStatus().indexOf("%") == -1)) {
                    ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus() + "*");
                }
                ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus().replace("*", "%"));
                queryStringBuffer.append(" AND `tblRecRequirement`.`Status` LIKE '" + ajaxHandlerAction.getStatus() + "'");
                columnCounter++;

                ajaxHandlerAction.setStatus(ajaxHandlerAction.getStatus().replace("%", ""));
            }

            if (!"".equalsIgnoreCase(ajaxHandlerAction.getTitle()) && columnCounter == 0) {
                if ((ajaxHandlerAction.getTitle().indexOf("*") == -1) && (ajaxHandlerAction.getTitle().indexOf("%") == -1)) {
                    ajaxHandlerAction.setTitle(ajaxHandlerAction.getTitle() + "*");
                }
                ajaxHandlerAction.setTitle(ajaxHandlerAction.getTitle().replace("*", "%"));
                queryStringBuffer.append(" AND `tblRecRequirement`.`JobTitle` LIKE '" + ajaxHandlerAction.getTitle() + "'");
                columnCounter++;


            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getTitle()) && columnCounter != 0) {
                if ((ajaxHandlerAction.getTitle().indexOf("*") == -1) && (ajaxHandlerAction.getTitle().indexOf("%") == -1)) {
                    ajaxHandlerAction.setTitle(ajaxHandlerAction.getTitle() + "*");
                }
                ajaxHandlerAction.setTitle(ajaxHandlerAction.getTitle().replace("*", "%"));
                queryStringBuffer.append(" AND `tblRecRequirement`.`JobTitle` LIKE '" + ajaxHandlerAction.getTitle() + "'");
                columnCounter++;
            }

            if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && "".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && columnCounter == 0) {
                if ((ajaxHandlerAction.getPostedDate1().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate1().indexOf("%") == -1)) {
                    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1() + "*");
                }
                ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1().replace("*", "%"));
                queryStringBuffer.append(" AND date(`tblRecRequirement`.`DatePosted`) LIKE '" + ajaxHandlerAction.getPostedDate1() + "'");
                columnCounter++;

                ajaxHandlerAction.setPostedDate1(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate1().replace("%", "")));
            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && "".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && columnCounter != 0) {
                if ((ajaxHandlerAction.getPostedDate1().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate1().indexOf("%") == -1)) {
                    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1() + "*");
                }
                ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1().replace("*", "%"));
                queryStringBuffer.append(" AND date(`tblRecRequirement`.`DatePosted`) LIKE '" + ajaxHandlerAction.getPostedDate1() + "'");
                columnCounter++;

                ajaxHandlerAction.setPostedDate1(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate1().replace("%", "")));
            }

            if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && "".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && columnCounter == 0) {
                if ((ajaxHandlerAction.getPostedDate2().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate2().indexOf("%") == -1)) {
                    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2() + "*");
                }
                ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2().replace("*", "%"));
                queryStringBuffer.append(" AND date(`tblRecRequirement`.`DatePosted`) LIKE '" + ajaxHandlerAction.getPostedDate2() + "'");
                columnCounter++;

                ajaxHandlerAction.setPostedDate2(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate2().replace("%", "")));
            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && "".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && columnCounter != 0) {
                if ((ajaxHandlerAction.getPostedDate2().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate2().indexOf("%") == -1)) {
                    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2() + "*");
                }
                ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2().replace("*", "%"));
                queryStringBuffer.append(" AND date(`tblRecRequirement`.`DatePosted`) LIKE '" + ajaxHandlerAction.getPostedDate2() + "'");
                columnCounter++;

                ajaxHandlerAction.setPostedDate2(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate2().replace("%", "")));
            }

            if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && !"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && columnCounter == 0) {
                if ((ajaxHandlerAction.getPostedDate1().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate1().indexOf("%") == -1)) {
                    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1() + "*");
                }
                ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1().replace("*", "%"));

                if ((ajaxHandlerAction.getPostedDate2().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate2().indexOf("%") == -1)) {
                    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2() + "*");
                }
                ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2().replace("*", "%"));

                queryStringBuffer.append("  AND date(`tblRecRequirement`.`DatePosted`) BETWEEN '" + ajaxHandlerAction.getPostedDate1() + "' AND '" + ajaxHandlerAction.getPostedDate2() + "'");
                columnCounter++;

                ajaxHandlerAction.setPostedDate1(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate1().replace("%", "")));
                ajaxHandlerAction.setPostedDate2(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate2().replace("%", "")));

            } else if (!"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate1()) && !"".equalsIgnoreCase(ajaxHandlerAction.getPostedDate2()) && columnCounter != 0) {
                if ((ajaxHandlerAction.getPostedDate1().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate1().indexOf("%") == -1)) {
                    ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1() + "*");
                }
                ajaxHandlerAction.setPostedDate1(ajaxHandlerAction.getPostedDate1().replace("*", "%"));

                if ((ajaxHandlerAction.getPostedDate2().indexOf("*") == -1) && (ajaxHandlerAction.getPostedDate2().indexOf("%") == -1)) {
                    ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2() + "*");
                }
                ajaxHandlerAction.setPostedDate2(ajaxHandlerAction.getPostedDate2().replace("*", "%"));

                queryStringBuffer.append(" AND date(`tblRecRequirement`.`DatePosted`) BETWEEN '" + ajaxHandlerAction.getPostedDate1() + "' AND '" + ajaxHandlerAction.getPostedDate2() + "'");
                columnCounter++;

                ajaxHandlerAction.setPostedDate1(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate1().replace("%", "")));
                ajaxHandlerAction.setPostedDate2(dateUtility.convertToviewFormat(ajaxHandlerAction.getPostedDate2().replace("%", "")));
            }


//            if (columnCounter == 0) {//queryStringBuffer.append(" Where `tblRecRequirement`.`Country` like '"+userWorkCountry+"' ORDER BY date(`tblRecRequirement`.`DatePosted`),Country DESC"); ,tblRecRequirement.Country
//
//              //  queryStringBuffer.append(" Where `tblRecRequirement`.`Country` like '" + userWorkCountry + "' ");
//  queryStringBuffer.append(" Where `tblRecRequirement`.`Country` like '" + ajaxHandlerAction.getCountry() + "' ");
//
//            } else {
            // queryStringBuffer.append(" AND `tblRecRequirement`.`Country` like '" + userWorkCountry + "' ");
            if (!"-1".equals(ajaxHandlerAction.getCountry()) && ajaxHandlerAction.getCountry() != null) {
                //   System.out.println("ajaxHandlerAction.getCountry()----"+ajaxHandlerAction.getCountry());
                queryStringBuffer.append(" AND `tblRecRequirement`.`Country` like '" + ajaxHandlerAction.getCountry() + "' ");
                if (!"".equals(ajaxHandlerAction.getState()) && ajaxHandlerAction.getState() != null) {
                    queryStringBuffer.append(" AND `tblRecRequirement`.`state` like '" + ajaxHandlerAction.getState() + "' ");
                }
            }

            // httpServletRequest.getSession(false).setAttribute(ApplicationConstants.QUERY_STRING,queryStringBuffer.toString());



            if (!"-1".equals(ajaxHandlerAction.getPracticeid()) && ajaxHandlerAction.getPracticeid() != null) {
                // System.out.println("ajaxHandlerAction.getPracticeid()---" + ajaxHandlerAction.getPracticeid());
                queryStringBuffer.append("  AND tblRecRequirement.Practice like '" + ajaxHandlerAction.getPracticeid() + "' ");
            }
            if (ajaxHandlerAction.getRequirementId() != 0) {
                queryStringBuffer.append("  AND tblRecRequirement .Id =" + ajaxHandlerAction.getRequirementId() + " ");
            }
            if (ajaxHandlerAction.getPreSalesPerson() != null && !"".equals(ajaxHandlerAction.getPreSalesPerson())) {
                queryStringBuffer.append(" AND (tblRecRequirement.AssignToTechLead ='" + ajaxHandlerAction.getPreSalesPerson() + "' || tblRecRequirement.SecondaryTechLead ='" + ajaxHandlerAction.getPreSalesPerson() + "') ");
            }
            if (ajaxHandlerAction.getClientId() != null && !"".equals(ajaxHandlerAction.getClientId())) {
                queryStringBuffer.append("  AND tblRecRequirement .CustomerId =" + ajaxHandlerAction.getClientId());
            }
            queryStringBuffer.append(" GROUP BY tblRecRequirement.Id ORDER BY `tblRecRequirement`.`DatePosted` DESC Limit 200");
            //System.out.println("query-------" + queryStringBuffer.toString());

//                   System.out.println("ajaxHandlerAction.getStatus()===="+ajaxHandlerAction.getStatus());
            //     System.out.println("ajaxHandlerAction.getTitle()==="+ajaxHandlerAction.getTitle());


            httpServletRequest.getSession(false).setAttribute("REQ_ADMIN_SEARCH_QUERY", queryStringBuffer.toString());
            //System.out.println("REQ_SEARCH_QUERY --->"+REQ_SEARCH_QUERY);
                     /*
             *
             *End of where 
             */


            //  System.out.println("query String for List ---"+queryStringBuffer.toString());

            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryStringBuffer.toString());

            //System.err.println("Account Activities:"+queryString);
            while (resultSet.next()) {

                int resumeCount = resultSet.getInt("resumecount");
                int RequirementId = resultSet.getInt("RequirementId");

                int ConsultantId = resultSet.getInt("ConsultantId");

                String JobTitle = resultSet.getString("JobTitle");

                String ConsultantNAME = resultSet.getString("ConsultantNAME");

                String Location = resultSet.getString("Location");

                String status = resultSet.getString("status");

                String SubmittedDate = resultSet.getString("SubmittedDate");

                String AssignedDate = resultSet.getString("AssignedDate");


                int noofresumes = resultSet.getInt("noofresumes");

                String Recruiter = "-";
                if (resultSet.getString("Recruiter") != null || resultSet.getString("Recruiter") != "") {
                    Recruiter = resultSet.getString("Recruiter");
                }


                String SecondaryRecruiter = "-";
                if (resultSet.getString("SecondaryRecruiter") != null || resultSet.getString("SecondaryRecruiter") != "") {
                    SecondaryRecruiter = resultSet.getString("SecondaryRecruiter");
                }

                String PreSales = "-";
                if (resultSet.getString("PreSales") != null || resultSet.getString("PreSales") != "") {
                    PreSales = resultSet.getString("PreSales");
                }


                String Skills = resultSet.getString("Skills");



                i++;
                /*createdBy=resultSet.getString("CreatedById");
                count =resultSet.getInt("total");*/
                //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+status+"|"+datedue+"|"+contactId+"|"+accountId+"|"+"^";
                //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+status+"|"+datedue+"|"+"^";
                totalStream = totalStream + i + "|" + resumeCount + "|" + RequirementId + "|" + ConsultantId + "|" + JobTitle + "|" + ConsultantNAME + "|" + Location + "|" + status + "|" + SubmittedDate + "|" + AssignedDate + "|" + noofresumes + "|" + Recruiter + "|" + SecondaryRecruiter + "|" + PreSales + "|" + PreSales + "|" + Skills + "^";
                //  totalActivities=totalActivities+count;
            }
            stringBuffer.append(totalStream);
            stringBuffer.append("addto");

            stringBuffer.append(i);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.err.println("response string is"+stringBuffer.toString());
        return stringBuffer.toString();
    }

    public String searchpmoActivityAjaxList(HttpServletRequest httpServletRequest, AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {

        String totalStream = "";
        Statement statement = null;
        String query = "";

        ajaxHandlerAction.setLoginId((String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID));
       // boolean isPmoAccess = (Boolean) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.PMO_ACTIVITY_ACCESS);

        //    query = "SELECT tblProjects.ProjectName,tblPmoAuthors.AccountId,tblProjects.ProjectStartDate,tblProjects.STATUS, tblCrmAccount.NAME,tblPmoAuthors.ProjectId FROM tblPmoAuthors JOIN tblProjects ON (tblProjects.Id=tblPmoAuthors.ProjectId) JOIN tblCrmAccount ON (tblCrmAccount.Id = tblPmoAuthors.AccountId) WHERE tblPmoAuthors.AuthorId = '" + ajaxHandlerAction.getLoginId() + "'  AND tblPmoAuthors.STATUS =  'Active' ";
        query = "SELECT DISTINCT tblProjects.ProjectName,tblProjects.CustomerId AS AccountId,tblProjects.ProjectStartDate,tblProjects.STATUS, tblCrmAccount.NAME,tblProjects.Id AS ProjectId,tblProjects.PMO as PMO FROM tblProjects JOIN tblCrmAccount ON (tblCrmAccount.Id = tblProjects.CustomerId) LEFT JOIN tblProjectContacts ON (tblProjects.Id = tblProjectContacts.ProjectId ) WHERE 1=1 ";

        Map rolesMap = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_ROLES);
        if (rolesMap.containsValue("Admin") || httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_PMO_ACTIVITY_ACCESS).toString().equals("1") ) {
            if (ajaxHandlerAction.getPmoLoginId() != null && !"".equalsIgnoreCase(ajaxHandlerAction.getPmoLoginId())) {
                query = query + " AND tblProjects.PMO = '" + ajaxHandlerAction.getPmoLoginId() + "'";
            }
        } else {
            if (httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_IS_TEAM_LEAD).toString().equals("1") || httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_IS_USER_MANAGER).toString().equals("1")) {
                Map teamMap = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
                teamMap.put(ajaxHandlerAction.getLoginId(), httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_NAME).toString());

                if (!"".equalsIgnoreCase(ajaxHandlerAction.getPmoLoginId())) {
                    query = query + " AND tblProjects.PMO = '" + ajaxHandlerAction.getPmoLoginId() + "'";
                } else {
                    query = query + " AND tblProjects.PMO IN (" + DataSourceDataProvider.getInstance().getTeamLoginIdList(teamMap) + ") ";
                }


            } else {
                query = query + " AND tblProjects.PMO = '" + ajaxHandlerAction.getLoginId() + "'";
            }
        }



        if (!"".equalsIgnoreCase(ajaxHandlerAction.getCustomerName()) && !"-1".equalsIgnoreCase(ajaxHandlerAction.getCustomerName())) {
            query = query + " AND tblCrmAccount.Id = " + ajaxHandlerAction.getCustomerName() + " ";
        }

        if (ajaxHandlerAction.getProjectName() != null && !"".equals(ajaxHandlerAction.getProjectName()) && !"-1".equals(ajaxHandlerAction.getProjectName())) {
            query = query + "AND tblProjects.Id = " + ajaxHandlerAction.getProjectName() + " ";

        }
        if (!"".equalsIgnoreCase(ajaxHandlerAction.getStatus())) {
            query = query + " AND tblProjects.STATUS like '%" + ajaxHandlerAction.getStatus() + "%'";
        }

        if (!"".equalsIgnoreCase(ajaxHandlerAction.getProjectStartDate())) {
            ajaxHandlerAction.setProjectStartDate(DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getProjectStartDate()));
            query = query + " AND date(tblProjects.ProjectStartDate) like '%" + ajaxHandlerAction.getProjectStartDate() + "%'";

        }
        if (((!"".equals(ajaxHandlerAction.getPreAssignEmpId()))) && (ajaxHandlerAction.getPreAssignEmpId() != 0)) {

            query = query + " AND tblProjectContacts.ObjectId= " + ajaxHandlerAction.getPreAssignEmpId();

        }
        if (ajaxHandlerAction.getPracticeId() != null && !"".equalsIgnoreCase(ajaxHandlerAction.getPracticeId())) {
            query = query + " AND tblProjects.Practice = '" + ajaxHandlerAction.getPracticeId() + "'";
        }
        // query = query + " ORDER BY tblProjects.ProjectName LIMIT 200";
        query = query + " ORDER BY tblCrmAccount.NAME,tblProjects.ProjectName  LIMIT 150";
        try {

            System.out.println("Query -->" + query);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(query);


            while (resultSet.next()) {
                String ProjectId = resultSet.getString("ProjectId");

                String NAME = resultSet.getString("NAME");

                String ProjectName = resultSet.getString("ProjectName");

                String ProjectStartDate = resultSet.getString("ProjectStartDate");


                String status = resultSet.getString("status");
//PMO
                int AccountId = resultSet.getInt("AccountId");
                int resources = DataSourceDataProvider.getInstance().getProjectActiveResources(resultSet.getInt("ProjectId"));
                //  totalStream = totalStream + "|" + ProjectId + "|" + ProjectName +"|" + NAME + "|" + ProjectStartDate + "|" + resources + "|" + status + "|"+ resultSet.getString("PMO") + "|" + AccountId + "^";
                totalStream = totalStream + "|" + ProjectId + "|" + NAME + "|" + ProjectName + "|" + ProjectStartDate + "|" + resources + "|" + status + "|" + resultSet.getString("PMO") + "|" + AccountId + "^";

            }

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return totalStream;
    }

    public String getMyProjectsByAccountId(int accountId, String resourceType, String empId) throws ServiceLocatorException {
        StringBuffer projects = new StringBuffer();
        String projectName = null;
        int projectId = 0;


        //queryString = "SELECT distinct tblProjectContacts.ProjectId AS projectId,ProjectName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE AccountId="+accountId;
        //queryString = "SELECT distinct tblProjectContacts.ProjectId AS projectId,ProjectName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE AccountId=" + accountId + " and ObjectId=" + empId + " and tblProjects.Status='Active'";
        queryString = "SELECT DISTINCT tblProjectContacts.ProjectId AS projectId,ProjectName FROM tblProjectContacts "
                + "LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id)"
                + " WHERE AccountId=" + accountId + " AND ObjectId=" + empId + " AND tblProjects.STATUS='Active' "
                + "AND tblProjectContacts.STATUS='Active'";
        //System.out.println("queryString---->"+queryString);

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            projects.append("<xml version=\"1.0\">");
            projects.append("<PROJECTS>");
            projects.append("<USER projectId=\"-1\">--Please Select--</USER>");
            while (resultSet.next()) {
                projectId = resultSet.getInt("projectId");
                projectName = resultSet.getString("ProjectName");

                // projects.append(projectName);

                projects.append("<USER projectId=\"" + projectId + "\">");
                if (projectName.contains("&")) {
                    projectName = projectName.replace("&", "&amp;");
                }
                projects.append(projectName);
                projects.append("</USER>");

            }
            projects.append("</PROJECTS>");
            projects.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        //     System.out.println("Team List: "+projects.toString());
        return projects.toString();
    }
// Perf dashboard methods

    public String getTopPerformers(String startDate, String endDate, boolean isManagerInclude, String department) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String response = "";
        // String query = "SELECT HrComments FROM tblEmpReview WHERE Id =" + reviewId;
        // String query = "SELECT SkillSet FROM tblEmpStateHistory WHERE Id= "+currId+" AND EmpId="+empId;

        StringBuffer querStringBuffer = new StringBuffer();
        querStringBuffer.append("SELECT tblEmployee.Id AS Id,CONCAT(tblEmployee.FName,' ',tblEmployee.LName) AS EmpName,tblEmployee.PracticeId AS Region ,tblEmployee.TeamId AS Practice,");
        querStringBuffer.append("COUNT(tblEmpReview.Id)      AS ReviwCount,");
        querStringBuffer.append("tblEmployee.DepartmentId    AS DepartmentId,tblEmpReview.UserId         AS UserId,");
        querStringBuffer.append("tblEmployee.TitleTypeId     AS TitleTypeId , COUNT(tblEmpReview.Id) AS totalSubmitted ,");
        querStringBuffer.append("(SUM(IF((tblEmpReview.STATUS = 'Approved' AND tblEmpReview.HRStatus = 'Approved'), TLRating, 0)) +SUM(IF((tblEmpReview.STATUS = 'Approved' AND tblEmpReview.HRStatus = 'Approved'), HRRating, 0))) AS Score ,tblEmployee.isManager ,tblEmployee.isTeamLead ");
        querStringBuffer.append("FROM (tblEmployee LEFT JOIN tblEmpReview ");
        querStringBuffer.append("ON ((tblEmployee.LoginId = CONVERT(tblEmpReview.UserId USING utf8)))) ");

        querStringBuffer.append("WHERE ((tblEmpReview.ReviewDate >= '" + DateUtility.getInstance().convertStringToMySQLDate(startDate) + "') ");
        querStringBuffer.append("AND (tblEmpReview.ReviewDate <= '" + DateUtility.getInstance().convertStringToMySQLDate(endDate) + "')) AND tblEmpReview.STATUS!='Opened' ");


        if (department != null && !"".equals(department)) {
            if (department.equals("Development")) {
                querStringBuffer.append(" AND (DepartmentId='GDC' OR DepartmentId= 'SSG')");
            } else {
                querStringBuffer.append(" AND DepartmentId='" + department + "' ");
            }
        }

        //  System.out.println("isManagerInclude-->" + isManagerInclude);
        if (!isManagerInclude) {
            querStringBuffer.append(" AND (IsManager != 1 AND IsTeamLead != 1 ) ");
        }
        querStringBuffer.append("GROUP BY tblEmployee.Id ORDER BY Score DESC LIMIT 20");


        try {
            // System.out.println("Query-->" + querStringBuffer.toString());
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(querStringBuffer.toString());
            resultSet = preparedStatement.executeQuery();
            int i = 0;
            ArrayList alist = new ArrayList();
            while (resultSet.next()) {
                if (resultSet.getInt("totalSubmitted") != 0 && resultSet.getInt("Score") > 1) {
                    int score = resultSet.getInt("Score") / 2;
                    ReviewVTO reviewVTO = new ReviewVTO();

                    if (resultSet.getInt("isManager") == 1 || resultSet.getInt("isTeamLead") == 1) {

                        score += DataSourceDataProvider.getInstance().getScore(resultSet.getString("UserId"), startDate, endDate);
                    }
                    reviewVTO.setEmployeeName(resultSet.getString("EmpName"));
                    reviewVTO.setDesignation(resultSet.getString("TitleTypeId"));
                    reviewVTO.setDepartment(resultSet.getString("DepartmentId"));
                    reviewVTO.setScore(score);
                    reviewVTO.setRegion(resultSet.getString("Region"));
                    reviewVTO.setPractice(resultSet.getString("Practice"));
                    alist.add(reviewVTO);
                    //response = response+resultSet.getString("EmpName")+"#^$"+ resultSet.getString("TitleTypeId")+"#^$"+ resultSet.getString("DepartmentId")+"#^$"+i+"#^$"+ score+"*@!";

                }
            }
            Collections.sort(alist);
            for (Object obj : alist) {
                i++;
                ReviewVTO reviewVTO = (ReviewVTO) obj;
                if ("Sales".equals(department)) {
                    response = response + reviewVTO.getEmployeeName() + "#^$" + reviewVTO.getDesignation() + "#^$" + reviewVTO.getPractice() + "#^$" + reviewVTO.getRegion() + "#^$" + reviewVTO.getDepartment() + "#^$" + i + "#^$" + reviewVTO.getScore() + "*@!";
                } else {
                    response = response + reviewVTO.getEmployeeName() + "#^$" + reviewVTO.getDesignation() + "#^$" + reviewVTO.getDepartment() + "#^$" + i + "#^$" + reviewVTO.getScore() + "*@!";
                }
            }
            if (i == 0) {
                response = "no data";
            }

            //System.err.println("Result----"+sb);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        //  System.out.println("---------->" + response);
        return response;
    }

    public String getEmployeesForPerformers(String startDate, String endDate, boolean isManagerInclude, String department) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String response = "";
        // String query = "SELECT HrComments FROM tblEmpReview WHERE Id =" + reviewId;
        // String query = "SELECT SkillSet FROM tblEmpStateHistory WHERE Id= "+currId+" AND EmpId="+empId;

        StringBuffer querStringBuffer = new StringBuffer();
//        querStringBuffer.append("SELECT tblEmployee.Id AS Id,CONCAT(tblEmployee.FName,' ',tblEmployee.LName) AS EmpName,");
//        querStringBuffer.append("COUNT(tblEmpReview.Id)      AS ReviwCount,");
//        querStringBuffer.append("tblEmployee.DepartmentId    AS DepartmentId,tblEmpReview.UserId         AS UserId,");
//        querStringBuffer.append("tblEmployee.TitleTypeId     AS TitleTypeId , ");
//        querStringBuffer.append("(SUM(IF(tblEmpReview.STATUS = 'Approved', TLRating, 0))+SUM(IF(tblEmpReview.STATUS = 'Approved', HRRating, 0))) AS Score, tblEmployee.ReportsTo AS ReportingManager,");
//        querStringBuffer.append("SUM(CASE WHEN tblEmpReview.STATUS = 'Approved' THEN 1 ELSE 0 END) AS totalApproved,SUM(CASE WHEN tblEmpReview.STATUS = 'Opened' THEN 1 ELSE 0 END) AS totalPending ,SUM(CASE WHEN tblEmpReview.STATUS = 'Denied' THEN 1 ELSE 0 END) AS totalDenied ,COUNT(tblEmpReview.Id) AS totalSubmitted ,tblEmployee.isManager ,tblEmployee.isTeamLead ");
//        querStringBuffer.append("FROM (tblEmployee LEFT JOIN tblEmpReview ");
//        querStringBuffer.append("ON ((tblEmployee.LoginId = CONVERT(tblEmpReview.UserId USING utf8)))) ");
// 
//        querStringBuffer.append("WHERE CurStatus = 'Active' AND ((tblEmpReview.ReviewDate >= '" + DateUtility.getInstance().convertStringToMySQLDate(startDate) + "') ");
//        querStringBuffer.append("AND (tblEmpReview.ReviewDate <= '" + DateUtility.getInstance().convertStringToMySQLDate(endDate) + "')) ");
//
        //  System.out.println("isManagerInclude-->" + isManagerInclude);
////        if (!isManagerInclude) {
////            querStringBuffer.append(" AND (IsManager != 1 or IsTeamLead != 1 ) ");
////        }
//        querStringBuffer.append("GROUP BY tblEmployee.Id ORDER BY Score DESC LIMIT 20");
        querStringBuffer.append("SELECT tblEmployee.Id AS Id,CONCAT(tblEmployee.FName,' ',tblEmployee.LName) AS EmpName,COUNT(tblEmpReview.Id) AS ReviwCount,tblEmployee.PracticeId AS Region ,tblEmployee.TeamId AS Practice,");
        querStringBuffer.append("tblEmployee.DepartmentId AS DepartmentId,tblEmpReview.UserId  AS UserId,tblEmployee.TitleTypeId     AS TitleTypeId ,");
        querStringBuffer.append("(SUM(IF((tblEmpReview.STATUS = 'Approved' AND tblEmpReview.HRStatus = 'Approved'), TLRating, 0)) +SUM(IF((tblEmpReview.STATUS = 'Approved' AND tblEmpReview.HRStatus = 'Approved'), HRRating, 0))) AS Score,");
        querStringBuffer.append("tblEmployee.ReportsTo AS ReportingManager, SUM(CASE WHEN (tblEmpReview.STATUS = 'Approved' AND tblEmpReview.HRStatus = 'Approved')  THEN 1 ELSE 0 END) AS totalApproved,");
        querStringBuffer.append("SUM(CASE WHEN ((tblEmpReview.STATUS = 'Opened' AND tblEmpReview.HRStatus = 'Opened') OR (tblEmpReview.STATUS = 'Approved' AND tblEmpReview.HRStatus = 'Opened') OR (tblEmpReview.STATUS = 'Opened' AND tblEmpReview.HRStatus = 'Approved')) THEN 1 ELSE 0 END) AS totalPending ,");
        querStringBuffer.append("SUM(CASE WHEN (tblEmpReview.STATUS = 'Denied' OR  tblEmpReview.HRStatus = 'Denied') THEN 1 ELSE 0 END) AS totalDenied ,");
        querStringBuffer.append("COUNT(tblEmpReview.Id) AS totalSubmitted ,tblEmployee.isManager ,tblEmployee.isTeamLead ");

        querStringBuffer.append("FROM (tblEmployee LEFT JOIN tblEmpReview ");
        querStringBuffer.append("ON ((tblEmployee.LoginId = CONVERT(tblEmpReview.UserId USING utf8)))) ");

        querStringBuffer.append("WHERE CurStatus = 'Active' AND ((tblEmpReview.ReviewDate >= '" + DateUtility.getInstance().convertStringToMySQLDate(startDate) + "') ");
        querStringBuffer.append("AND (tblEmpReview.ReviewDate <= '" + DateUtility.getInstance().convertStringToMySQLDate(endDate) + "')) ");

        if (department != null && !"".equals(department)) {
            if (department.equals("Development")) {
                querStringBuffer.append(" AND (DepartmentId='GDC' OR DepartmentId= 'SSG')");
            } else {
                querStringBuffer.append(" AND DepartmentId='" + department + "' ");
            }
        }
        if (!isManagerInclude) {
            querStringBuffer.append(" AND (IsManager != 1 AND IsTeamLead != 1 ) ");
        }
        //querStringBuffer.append("GROUP BY tblEmployee.Id ORDER BY Score DESC LIMIT 20");
        querStringBuffer.append("GROUP BY tblEmployee.Id ORDER BY Score DESC");


        try {
            //  System.out.println("Query-->"+querStringBuffer.toString());
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(querStringBuffer.toString());
            resultSet = preparedStatement.executeQuery();
            int i = 0;




            ArrayList alist = new ArrayList();
            while (resultSet.next()) {
                if (resultSet.getInt("totalSubmitted") != 0 && resultSet.getInt("Score") > 1) {
                    int score = resultSet.getInt("Score") / 2;
                    ReviewVTO reviewVTO = new ReviewVTO();
                    if (isManagerInclude) {
                        if (resultSet.getInt("isManager") == 1 || resultSet.getInt("isTeamLead") == 1) {
                            // System.out.println("score of ===" + resultSet.getString("UserId"));
                            //     System.out.println("own score-->" + score);
                            score += DataSourceDataProvider.getInstance().getScore(resultSet.getString("UserId"), startDate, endDate);
                            //    System.out.println("own score2-->" + score);
                        }
                    } else {
                        i++;
                        reviewVTO.setRank(i);
                    }

                    double percent = ((double) (resultSet.getInt("totalApproved")) / resultSet.getInt("totalSubmitted")) * 100;
                    reviewVTO.setEmployeeName(resultSet.getString("EmpName"));
                    reviewVTO.setDesignation(resultSet.getString("TitleTypeId"));
                    reviewVTO.setDepartment(resultSet.getString("DepartmentId"));


                    reviewVTO.setReportingManager(resultSet.getString("ReportingManager"));
                    reviewVTO.setReviewsSubmitted(resultSet.getInt("totalSubmitted"));
                    reviewVTO.setReviewsApproved(resultSet.getInt("totalApproved"));
                    reviewVTO.setScore(score);
                    reviewVTO.setUserId(resultSet.getString("UserId"));
                    reviewVTO.setReviewsPending(resultSet.getInt("totalPending"));
                    reviewVTO.setReviewsRejected(resultSet.getInt("totalDenied"));
                    reviewVTO.setRegion(resultSet.getString("Region"));
                    reviewVTO.setPractice(resultSet.getString("Practice"));
                    reviewVTO.setReviewApprovalPercentage(Double.parseDouble(new DecimalFormat("##.##").format(percent)));
                    alist.add(reviewVTO);
                    //response = response+resultSet.getString("EmpName")+"#^$"+ resultSet.getString("TitleTypeId")+"#^$"+ resultSet.getString("DepartmentId")+"#^$"+i+"#^$"+ score+"*@!";

                }
            }

            if (isManagerInclude) {
                // System.out.println("test check");
                Collections.sort(alist);
                for (Object obj : alist) {
                    i++;
                    ReviewVTO reviewVTO = (ReviewVTO) obj;
                    reviewVTO.setRank(i);

                    if ("Sales".equals(department)) {
                        response = response + reviewVTO.getEmployeeName() + "#^$" + reviewVTO.getDesignation() + "#^$" + reviewVTO.getPractice() + "#^$" + reviewVTO.getRegion() + "#^$" + reviewVTO.getDepartment() + "#^$" + reviewVTO.getRank() + "#^$" + reviewVTO.getScore() + "#^$" + reviewVTO.getReportingManager() + "#^$" + reviewVTO.getReviewsSubmitted() + "#^$" + reviewVTO.getReviewsApproved() + "#^$" + reviewVTO.getReviewApprovalPercentage() + "*@!";
                    } else {
                        response = response + reviewVTO.getEmployeeName() + "#^$" + reviewVTO.getDesignation() + "#^$" + reviewVTO.getDepartment() + "#^$" + reviewVTO.getRank() + "#^$" + reviewVTO.getScore() + "#^$" + reviewVTO.getReportingManager() + "#^$" + reviewVTO.getReviewsSubmitted() + "#^$" + reviewVTO.getReviewsApproved() + "#^$" + reviewVTO.getReviewApprovalPercentage() + "*@!";
                    }
                    //response =  reviewVTO.getRank() + "#^$" + reviewVTO.getScore() + "#^$" + reviewVTO.getReportingManager() + "#^$" + reviewVTO.getReviewsSubmitted() + "#^$" + reviewVTO.getReviewsApproved() + "#^$" + reviewVTO.getReviewApprovalPercentage()+"#^$" +reviewVTO.getReviewsRejected()+"#^$" +reviewVTO.getReviewsPending(); 
                    if (i == 150) {
                        break;
                    }
                }


            } else {

                int count = 1;
                for (Object obj : alist) {
                    count++;
                    ReviewVTO reviewVTO = (ReviewVTO) obj;

//                    System.out.println("reviewVTO.getDesignation()  "+reviewVTO.getDesignation());
//                    System.out.println("reviewVTO.getDepartment()  ---"+reviewVTO.getDepartment());
//                    System.out.println("reviewVTO.getRank()  ---"+reviewVTO.getRank());
//                    System.out.println("reviewVTO.getScore()  ---"+reviewVTO.getScore());
//                    System.out.println("reviewVTO.getReportingManager()  ---"+reviewVTO.getReportingManager());
//                    System.out.println("reviewVTO.getReviewsSubmitted()  ---"+reviewVTO.getReviewsSubmitted());
//                    System.out.println("reviewVTO.getReviewsApproved()  ---"+reviewVTO.getReviewsApproved());
//                    System.out.println("reviewVTO.getReviewApprovalPercentage()  ---"+reviewVTO.getReviewApprovalPercentage());
                    if ("Sales".equals(department)) {
                        response = response + reviewVTO.getEmployeeName() + "#^$" + reviewVTO.getDesignation() + "#^$" + reviewVTO.getPractice() + "#^$" + reviewVTO.getRegion() + "#^$" + reviewVTO.getDepartment() + "#^$" + reviewVTO.getRank() + "#^$" + reviewVTO.getScore() + "#^$" + reviewVTO.getReportingManager() + "#^$" + reviewVTO.getReviewsSubmitted() + "#^$" + reviewVTO.getReviewsApproved() + "#^$" + reviewVTO.getReviewApprovalPercentage() + "*@!";
                    } else {
                        response = response + reviewVTO.getEmployeeName() + "#^$" + reviewVTO.getDesignation() + "#^$" + reviewVTO.getDepartment() + "#^$" + reviewVTO.getRank() + "#^$" + reviewVTO.getScore() + "#^$" + reviewVTO.getReportingManager() + "#^$" + reviewVTO.getReviewsSubmitted() + "#^$" + reviewVTO.getReviewsApproved() + "#^$" + reviewVTO.getReviewApprovalPercentage() + "*@!";
                    }
                    //response = response + resultSet.getString("EmpName") + "#^$" + resultSet.getString("TitleTypeId") + "#^$" + resultSet.getString("DepartmentId") + "#^$" + i + "#^$" + resultSet.getString("Score") + "#^$" + resultSet.getString("ReportingManager") + "#^$" + resultSet.getString("totalSubmitted") + "#^$" + resultSet.getString("totalApproved") + "#^$" + Double.parseDouble(new DecimalFormat("##.##").format(percent)) + "*@!";
                    if (count > 150) {
                        break;
                    }
                }
            }

            if (i == 0) {
                response = "no data";
            }

            //System.err.println("Result----"+sb);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        //System.out.println("---------->" + response);
        return response;
    }

    public String getPastReviewData(String loginId) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String response = "";
        // String query = "SELECT HrComments FROM tblEmpReview WHERE Id =" + reviewId;
        // String query = "SELECT SkillSet FROM tblEmpStateHistory WHERE Id= "+currId+" AND EmpId="+empId;

        StringBuffer querStringBuffer = new StringBuffer();
        querStringBuffer.append("SELECT tblEmpReview.ReviewDate,tblLkReviews.ReviewType,tblEmpReview.EmpComments,tblEmpReview.STATUS,tblEmpReview.HrSTATUS,(IF((tblEmpReview.STATUS = 'Approved' AND tblEmpReview.HRStatus = 'Approved'), TLRating, 0) +IF((tblEmpReview.STATUS = 'Approved' AND tblEmpReview.HRStatus = 'Approved'), HRRating, 0)) AS Points ,tblEmpReview.Approver1Date,");
        querStringBuffer.append("tblEmployee.ReportsTo AS ReportingManager FROM tblEmpReview left outer JOIN  tblEmployee ON tblEmployee.loginId=tblEmpReview.UserId");
        querStringBuffer.append(" LEFT OUTER JOIN  tblLkReviews ON tblLkReviews.Id=tblEmpReview.ReviewTypeId");
        querStringBuffer.append(" WHERE  tblEmpReview.UserId='" + loginId + "'");


        try {
            //System.out.println("Query-->"+querStringBuffer.toString());
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(querStringBuffer.toString());
            resultSet = preparedStatement.executeQuery();
            int i = 0;

            while (resultSet.next()) {
                i++;
                String ApproverDate = "";
                if (!"".equals(resultSet.getString("Approver1Date")) && resultSet.getString("Approver1Date") != null) {
                    ApproverDate = resultSet.getString("Approver1Date");
                }
                response += i + "#^$" + resultSet.getString("ReviewDate").split(" ")[0] + "#^$" + resultSet.getString("ReviewType") + "#^$" + resultSet.getString("EmpComments") + "#^$" + resultSet.getString("STATUS") + "#^$" + resultSet.getString("HrSTATUS") + "#^$" + (resultSet.getInt("Points") / 2) + "#^$" + ApproverDate + "#^$" + resultSet.getString("ReportingManager") + "*@!";


            }
            if (i == 0) {
                response = "no data";
            }

            //System.err.println("Result----"+sb);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        //  System.out.println("---------->" + response);
        return response;
    }

    public String getEmployeeReviewDetails(String startDate, String endDate, String userId, boolean isManager) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String response = "";
        // String query = "SELECT HrComments FROM tblEmpReview WHERE Id =" + reviewId;
        // String query = "SELECT SkillSet FROM tblEmpStateHistory WHERE Id= "+currId+" AND EmpId="+empId;

        StringBuffer querStringBuffer = new StringBuffer();
        querStringBuffer.append("SELECT tblEmployee.Id AS Id,CONCAT(tblEmployee.FName,' ',tblEmployee.LName) AS EmpName,COUNT(tblEmpReview.Id) AS ReviwCount,");
        querStringBuffer.append("tblEmployee.DepartmentId AS DepartmentId,tblEmpReview.UserId  AS UserId,tblEmployee.TitleTypeId     AS TitleTypeId ,");
        querStringBuffer.append("(SUM(IF((tblEmpReview.STATUS = 'Approved' AND tblEmpReview.HRStatus = 'Approved'), TLRating, 0)) +SUM(IF((tblEmpReview.STATUS = 'Approved' AND tblEmpReview.HRStatus = 'Approved'), HRRating, 0))) AS Score,");
        querStringBuffer.append("tblEmployee.ReportsTo AS ReportingManager, SUM(CASE WHEN (tblEmpReview.STATUS = 'Approved' AND tblEmpReview.HRStatus = 'Approved')  THEN 1 ELSE 0 END) AS totalApproved,");
        querStringBuffer.append("SUM(CASE WHEN ((tblEmpReview.STATUS = 'Opened' AND tblEmpReview.HRStatus = 'Opened') OR (tblEmpReview.STATUS = 'Approved' AND tblEmpReview.HRStatus = 'Opened') OR (tblEmpReview.STATUS = 'Opened' AND tblEmpReview.HRStatus = 'Approved')) THEN 1 ELSE 0 END) AS totalPending ,");
        querStringBuffer.append("SUM(CASE WHEN (tblEmpReview.STATUS = 'Denied' OR  tblEmpReview.HRStatus = 'Denied') THEN 1 ELSE 0 END) AS totalDenied ,");
        querStringBuffer.append("SUM(CASE WHEN (tblEmpReview.STATUS = 'Approved') THEN 1 ELSE 0 END) AS leadApproved ,");
        querStringBuffer.append("SUM(CASE WHEN (tblEmpReview.HRStatus = 'Approved') THEN 1 ELSE 0 END) AS hrApproved ,");
        querStringBuffer.append("SUM(CASE WHEN (tblEmpReview.STATUS = 'Denied') THEN 1 ELSE 0 END) AS leadDenied ,");
        querStringBuffer.append("SUM(CASE WHEN (tblEmpReview.HRStatus = 'Denied') THEN 1 ELSE 0 END) AS hrDenied ,");
        querStringBuffer.append("COUNT(tblEmpReview.Id) AS totalSubmitted ,tblEmployee.isManager ,tblEmployee.isTeamLead ");


        querStringBuffer.append("FROM (tblEmployee LEFT JOIN tblEmpReview ");
        querStringBuffer.append("ON ((tblEmployee.LoginId = CONVERT(tblEmpReview.UserId USING utf8)))) ");

        querStringBuffer.append("WHERE CurStatus = 'Active' AND ((tblEmpReview.ReviewDate >= '" + DateUtility.getInstance().convertStringToMySQLDate(startDate) + "') ");
        querStringBuffer.append("AND (tblEmpReview.ReviewDate <= '" + DateUtility.getInstance().convertStringToMySQLDate(endDate) + "')) ");

        querStringBuffer.append("GROUP BY tblEmployee.Id ORDER BY Score DESC");


        try {
            // System.out.println("Query-->"+querStringBuffer.toString());
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(querStringBuffer.toString());
            resultSet = preparedStatement.executeQuery();
            int i = 0;


            ArrayList alist = new ArrayList();
            while (resultSet.next()) {
                if (resultSet.getInt("totalSubmitted") != 0 && resultSet.getInt("Score") > 1) {
                    int score = resultSet.getInt("Score") / 2;
                    ReviewVTO reviewVTO = new ReviewVTO();
                    if (isManager) {
                        if (resultSet.getInt("isManager") == 1 || resultSet.getInt("isTeamLead") == 1) {
                            //   System.out.println("score of ===" + resultSet.getString("UserId"));
                            //   System.out.println("own score-->" + score);
                            score += DataSourceDataProvider.getInstance().getScore(resultSet.getString("UserId"), startDate, endDate);
                            //  System.out.println("own score2-->" + score);
                        }
                    } else {
                        i++;
                        reviewVTO.setRank(i);
                    }

                    double percent = ((double) (resultSet.getInt("totalApproved")) / resultSet.getInt("totalSubmitted")) * 100;
                    reviewVTO.setEmployeeName(resultSet.getString("EmpName"));
                    reviewVTO.setDesignation(resultSet.getString("TitleTypeId"));
                    reviewVTO.setDepartment(resultSet.getString("DepartmentId"));


                    reviewVTO.setReportingManager(resultSet.getString("ReportingManager"));
                    reviewVTO.setReviewsSubmitted(resultSet.getInt("totalSubmitted"));
                    reviewVTO.setReviewsApproved(resultSet.getInt("totalApproved"));
                    reviewVTO.setScore(score);
                    reviewVTO.setUserId(resultSet.getString("UserId"));
                    reviewVTO.setReviewsPending(resultSet.getInt("totalPending"));
                    reviewVTO.setReviewsRejected(resultSet.getInt("totalDenied"));
                    reviewVTO.setLeadReviewsApproved(resultSet.getInt("leadApproved"));
                    reviewVTO.setHrReviewsApproved(resultSet.getInt("hrApproved"));
                    reviewVTO.setLeadReviewsRejected(resultSet.getInt("leadDenied"));
                    reviewVTO.setHrReviewsRejected(resultSet.getInt("hrDenied"));
                    reviewVTO.setReviewApprovalPercentage(Double.parseDouble(new DecimalFormat("##.##").format(percent)));
                    alist.add(reviewVTO);
                    //response = response+resultSet.getString("EmpName")+"#^$"+ resultSet.getString("TitleTypeId")+"#^$"+ resultSet.getString("DepartmentId")+"#^$"+i+"#^$"+ score+"*@!";

                }
            }

            if (isManager) {
                //  System.out.println("test check");
                Collections.sort(alist);
                for (Object obj : alist) {
                    i++;
                    ReviewVTO reviewVTO = (ReviewVTO) obj;
                    reviewVTO.setRank(i);
                    if (userId.equals(reviewVTO.getUserId())) {
                        response = reviewVTO.getRank() + "#^$" + reviewVTO.getScore() + "#^$" + reviewVTO.getReportingManager() + "#^$" + reviewVTO.getReviewsSubmitted() + "#^$" + reviewVTO.getReviewsApproved() + "#^$" + reviewVTO.getReviewApprovalPercentage() + "#^$" + reviewVTO.getReviewsRejected() + "#^$" + reviewVTO.getReviewsPending() + "#^$" + reviewVTO.getLeadReviewsApproved() + "#^$" + reviewVTO.getHrReviewsApproved() + "#^$" + reviewVTO.getLeadReviewsRejected() + "#^$" + reviewVTO.getHrReviewsRejected();
                        break;
                    }
                }
            } else {
                for (Object obj : alist) {

                    ReviewVTO reviewVTO = (ReviewVTO) obj;
                    if (userId.equals(reviewVTO.getUserId())) {
//                    System.out.println("reviewVTO.getDesignation()  "+reviewVTO.getDesignation());
//                    System.out.println("reviewVTO.getDepartment()  ---"+reviewVTO.getDepartment());
//                    System.out.println("reviewVTO.getRank()  ---"+reviewVTO.getRank());
//                    System.out.println("reviewVTO.getScore()  ---"+reviewVTO.getScore());
//                    System.out.println("reviewVTO.getReportingManager()  ---"+reviewVTO.getReportingManager());
//                    System.out.println("reviewVTO.getReviewsSubmitted()  ---"+reviewVTO.getReviewsSubmitted());
//                    System.out.println("reviewVTO.getReviewsApproved()  ---"+reviewVTO.getReviewsApproved());
//                    System.out.println("reviewVTO.getReviewApprovalPercentage()  ---"+reviewVTO.getReviewApprovalPercentage());
                        response = reviewVTO.getRank() + "#^$" + reviewVTO.getScore() + "#^$" + reviewVTO.getReportingManager() + "#^$" + reviewVTO.getReviewsSubmitted() + "#^$" + reviewVTO.getReviewsApproved() + "#^$" + reviewVTO.getReviewApprovalPercentage() + "#^$" + reviewVTO.getReviewsRejected() + "#^$" + reviewVTO.getReviewsPending() + "#^$" + reviewVTO.getLeadReviewsApproved() + "#^$" + reviewVTO.getHrReviewsApproved() + "#^$" + reviewVTO.getLeadReviewsRejected() + "#^$" + reviewVTO.getHrReviewsRejected();
                        //response = response + resultSet.getString("EmpName") + "#^$" + resultSet.getString("TitleTypeId") + "#^$" + resultSet.getString("DepartmentId") + "#^$" + i + "#^$" + resultSet.getString("Score") + "#^$" + resultSet.getString("ReportingManager") + "#^$" + resultSet.getString("totalSubmitted") + "#^$" + resultSet.getString("totalApproved") + "#^$" + Double.parseDouble(new DecimalFormat("##.##").format(percent)) + "*@!";
                        break;
                    }
                }
            }
            if (i == 0) {
                response = "no data";
            }

            //System.err.println("Result----"+sb);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        //System.out.println("---------->" + response);
        return response;
    }

    public String getEmployeePastReviewData(String loginId, String startDate, String endDate) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String response = "";
        // String query = "SELECT HrComments FROM tblEmpReview WHERE Id =" + reviewId;
        // String query = "SELECT SkillSet FROM tblEmpStateHistory WHERE Id= "+currId+" AND EmpId="+empId;

        StringBuffer querStringBuffer = new StringBuffer();
        querStringBuffer.append("SELECT tblEmpReview.ReviewDate,tblLkReviews.ReviewType,tblEmpReview.EmpComments,tblEmpReview.STATUS,tblEmpReview.HrSTATUS,(IF((tblEmpReview.STATUS = 'Approved' AND tblEmpReview.HRStatus = 'Approved'), TLRating, 0) +IF((tblEmpReview.STATUS = 'Approved' AND tblEmpReview.HRStatus = 'Approved'), HRRating, 0)) AS Points ,tblEmpReview.Approver1Date,");
        querStringBuffer.append("tblEmployee.ReportsTo AS ReportingManager FROM tblEmpReview left outer JOIN  tblEmployee ON tblEmployee.loginId=tblEmpReview.UserId");
        querStringBuffer.append(" LEFT OUTER JOIN  tblLkReviews ON tblLkReviews.Id=tblEmpReview.ReviewTypeId");
        querStringBuffer.append(" WHERE ((tblEmpReview.ReviewDate >= '" + DateUtility.getInstance().convertStringToMySQLDate(startDate) + "') ");
        querStringBuffer.append("AND (tblEmpReview.ReviewDate <= '" + DateUtility.getInstance().convertStringToMySQLDate(endDate) + "')) AND tblEmpReview.UserId='" + loginId + "'");


        try {
            // System.out.println("querStringBuffer--->"+querStringBuffer.toString());
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(querStringBuffer.toString());
            resultSet = preparedStatement.executeQuery();
            int i = 0;

            while (resultSet.next()) {
                i++;
                String ApproverDate = "";
                if (!"".equals(resultSet.getString("Approver1Date")) && resultSet.getString("Approver1Date") != null) {
                    ApproverDate = resultSet.getString("Approver1Date");
                }
                response += i + "#^$" + resultSet.getString("ReviewDate").split(" ")[0] + "#^$" + resultSet.getString("ReviewType") + "#^$" + resultSet.getString("EmpComments") + "#^$" + resultSet.getString("STATUS") + "#^$" + resultSet.getString("HrSTATUS") + "#^$" + (resultSet.getInt("Points") / 2) + "#^$" + ApproverDate + "#^$" + resultSet.getString("ReportingManager") + "*@!";


            }
            if (i == 0) {
                response = "no data";
            }

            //System.err.println("Result----"+sb);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        //  System.out.println("---------->" + response);
        return response;
    }

    public String getAccountContactsDescription(int accId) throws ServiceLocatorException {
        String Description = null;

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement("SELECT Description FROM tblCrmAccount WHERE Id=" + accId);
            // System.out.println("SELECT Description FROM tblCrmAccount WHERE Id=" + accId);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                Description = resultSet.getString("Description");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return Description;
    }

    public String getEmpolyeeCount() throws ServiceLocatorException {
        Statement statement = null;
        String response = "";
        connection = ConnectionProvider.getInstance().getConnection();
        try {



            queryString = "SELECT country,COUNT(id) AS total,"
                    + "SUM(CASE WHEN DepartmentId='Operations' THEN 1 ELSE 0 END) AS Operations,"
                    + "SUM(CASE WHEN DepartmentId='Recruiting' THEN 1 ELSE 0 END) AS Recruiting,"
                    + "SUM(CASE WHEN DepartmentId='Sales' THEN 1 ELSE 0 END) AS Sales,"
                    + "SUM(CASE WHEN DepartmentId='Marketing' THEN 1 ELSE 0 END) AS Marketing,"
                    + "SUM(CASE WHEN DepartmentId='SSG' THEN 1 ELSE 0 END) AS SSG, "
                    + "SUM(CASE WHEN DepartmentId='GDC' THEN 1 ELSE 0 END) AS GDC, "
                    + "SUM(CASE WHEN DepartmentId='Executive Board' THEN 1 ELSE 0 END) AS ExecutiveBoard "
                    + "FROM tblEmployee WHERE (Country IS NOT NULL AND Country!='') AND CurStatus='Active' GROUP BY country ORDER BY Country DESC";


            //System.out.println("queryString---"+queryString);
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            int i = 0;
            while (resultSet.next()) {
                response = response + resultSet.getString("country") + "#^$";
                response = response + resultSet.getString("total") + "#^$";
                response = response + resultSet.getString("Operations") + "#^$";
                response = response + resultSet.getString("Recruiting") + "#^$";
                response = response + resultSet.getString("Sales") + "#^$";
                response = response + resultSet.getString("Marketing") + "#^$";
                response = response + resultSet.getString("SSG") + "#^$";
                response = response + resultSet.getString("GDC") + "#^$";
                response = response + resultSet.getString("ExecutiveBoard") + "#^$";
                int billing = DataSourceDataProvider.getInstance().getBillableResourcesCount(resultSet.getString("country"));
                response = response + billing + "*@!";

                i++;

            }


        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException se) {
                se.printStackTrace();
                throw new ServiceLocatorException(se);
            }
        }
        return response;
    }

    public String getRequirementCount(int pastMonths) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String response = "";
        // String query = "SELECT HrComments FROM tblEmpReview WHERE Id =" + reviewId;
        // String query = "SELECT SkillSet FROM tblEmpStateHistory WHERE Id= "+currId+" AND EmpId="+empId;
        try {
            String startDate = "";
            String endDate = DateUtility.getInstance().CurrentMonthLastDate();
            startDate = DateUtility.getInstance().getPastMonthsFirstDate(pastMonths - 1);
            StringBuffer querStringBuffer = new StringBuffer();
            querStringBuffer.append("SELECT Country,COUNT(id) AS total,SUM(CASE WHEN STATUS='Open' THEN 1 ELSE 0 END) AS OPENED,");
            querStringBuffer.append("SUM(CASE WHEN STATUS='InProgress' THEN 1 ELSE 0 END) AS InProgress,");
            querStringBuffer.append("SUM(CASE WHEN STATUS='Forecast' THEN 1 ELSE 0 END) AS Forecast,");
            querStringBuffer.append("SUM(CASE WHEN STATUS='Forecast' THEN 1 ELSE 0 END) AS Forecast,");
            querStringBuffer.append("SUM(CASE WHEN STATUS='lost' THEN 1 ELSE 0 END) AS lost,");
            querStringBuffer.append("SUM(CASE WHEN STATUS='Withdrawn' THEN 1 ELSE 0 END) AS Withdrawn,");
            querStringBuffer.append("SUM(CASE WHEN STATUS='Hold' THEN 1 ELSE 0 END) AS Hold,");
            querStringBuffer.append("SUM(CASE WHEN STATUS='won' THEN 1 ELSE 0 END) AS won ");
            querStringBuffer.append("FROM tblRecRequirement ");

            querStringBuffer.append("WHERE (Country IS NOT NULL AND Country!='') AND (DATE(DatePosted) >= '" + DateUtility.getInstance().convertStringToMySQLDate(startDate) + "') ");
            querStringBuffer.append("AND (DATE(DatePosted) <= '" + DateUtility.getInstance().convertStringToMySQLDate(endDate) + "') GROUP BY Country ORDER BY Country DESC");




            //  System.out.println("isManagerInclude-->" + isManagerInclude);




            //  System.out.println("Query-->" + querStringBuffer.toString());
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(querStringBuffer.toString());
            resultSet = preparedStatement.executeQuery();
            int i = 0;
            ArrayList alist = new ArrayList();
            while (resultSet.next()) {
                i = 1;
                response = response + resultSet.getString("Country") + "#^$" + resultSet.getString("total") + "#^$" + resultSet.getString("OPENED") + "#^$" + resultSet.getString("InProgress") + "#^$" + resultSet.getString("Forecast") + "#^$" + resultSet.getString("lost") + "#^$" + resultSet.getString("Withdrawn") + "#^$" + resultSet.getString("Hold") + "#^$" + resultSet.getString("won") + "*@!";
            }

            if (i == 0) {
                response = "no data";
            }

            //System.err.println("Result----"+sb);
        } catch (ParseException ex) {
            throw new ServiceLocatorException(ex);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //  System.err.print("Error :"+sql);
            }

        }
        //  System.out.println("---------->" + response);
        return response;
    }

    public String getGreenSheetCount(int pastMonths, boolean external) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String response = "";
        // String query = "SELECT HrComments FROM tblEmpReview WHERE Id =" + reviewId;
        // String query = "SELECT SkillSet FROM tblEmpStateHistory WHERE Id= "+currId+" AND EmpId="+empId;
        try {
            String startDate = "";
            String endDate = DateUtility.getInstance().CurrentMonthLastDate();
            startDate = DateUtility.getInstance().getPastMonthsFirstDate(pastMonths - 1);
            StringBuffer querStringBuffer = new StringBuffer();
            // System.out.println("external---"+external);
            querStringBuffer.append("SELECT Country,COUNT(DISTINCT Id) AS placements,");
            querStringBuffer.append("SUM(CASE WHEN UnitsRate IS NOT NULL THEN UnitsRate ELSE 0 END)*" + pastMonths + " AS UnitsRates,");
            querStringBuffer.append("SUM(CASE WHEN VenUnitRate IS NOT NULL THEN VenUnitRate ELSE 0 END)*" + pastMonths + " AS VenUnitRates,");
            querStringBuffer.append("SUM((CASE WHEN UnitsRate IS NOT NULL THEN UnitsRate ELSE 0 END)-(CASE WHEN VenUnitRate IS NOT NULL THEN VenUnitRate ELSE 0 END))*" + pastMonths + " AS Margin FROM tblGreensheets");
            querStringBuffer.append(" WHERE (STATUS='Created' OR STATUS='Renewal'  OR STATUS='Approved' OR STATUS='NotKnown')");
            querStringBuffer.append(" AND (Country='USA' OR Country='India') ");
            if (external) {
                querStringBuffer.append("AND VenUnitRate>0 ");
            } else {
                querStringBuffer.append("AND VenUnitRate=0 ");
            }
            querStringBuffer.append("AND (DATE(DateCreated) >= '" + DateUtility.getInstance().convertStringToMySQLDate(startDate) + "') ");
            querStringBuffer.append("AND (DATE(DateCreated) <= '" + DateUtility.getInstance().convertStringToMySQLDate(endDate) + "') GROUP BY Country ORDER BY Country DESC");




            //  System.out.println("isManagerInclude-->" + isManagerInclude);




            // System.out.println("Query-->" + querStringBuffer.toString());
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(querStringBuffer.toString());
            resultSet = preparedStatement.executeQuery();
            int i = 0;
            ArrayList alist = new ArrayList();
            double totalCost = 0.00;
            DecimalFormat decimalFormat = new DecimalFormat("0.00");
            while (resultSet.next()) {
                i = 1;
                if (external) {
                    response = response + resultSet.getString("Country") + "#^$" + resultSet.getString("placements") + "#^$" + decimalFormat.format(resultSet.getDouble("UnitsRates")) + " $#^$" + decimalFormat.format(resultSet.getDouble("VenUnitRates")) + " $#^$" + decimalFormat.format(resultSet.getDouble("Margin")) + " $*@!";
                } else {
                    response = response + resultSet.getString("Country") + "#^$" + resultSet.getString("placements") + "#^$" + decimalFormat.format(resultSet.getDouble("UnitsRates")) + " $*@!";
                }
                totalCost += resultSet.getDouble("Margin");
            }
            String tCost = decimalFormat.format(totalCost);

            if (i == 0) {
                response = "no data";
            } else {
                response += "addto" + tCost;
            }

            //System.err.println("Result----"+sb);
        } catch (ParseException ex) {
            throw new ServiceLocatorException(ex);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //  System.err.print("Error :"+sql);
            }

        }
        //  System.out.println("---------->" + response);
        return response;
    }

    public String getOpportunitiesCounts(int pastMonths) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String response = "";
        // System.out.println("getOpportunitiesCounts impl");
        // String query = "SELECT HrComments FROM tblEmpReview WHERE Id =" + reviewId;
        // String query = "SELECT SkillSet FROM tblEmpStateHistory WHERE Id= "+currId+" AND EmpId="+empId;
        try {
            String startDate = "";
            String endDate = DateUtility.getInstance().CurrentMonthLastDate();
            startDate = DateUtility.getInstance().getPastMonthsFirstDate(pastMonths - 1);
            //startDate="10/01/2011";
            StringBuffer querStringBuffer = new StringBuffer();
            querStringBuffer.append("SELECT tblCrmAccount.Region,COUNT(tblCrmOpportunity.Id) AS total,");
            querStringBuffer.append(" SUM(CASE WHEN tblCrmOpportunity.VALUE IS NOT NULL THEN tblCrmOpportunity.VALUE ELSE 0 END) AS val ");
            querStringBuffer.append("FROM tblCrmOpportunity JOIN tblCrmAccount ON tblCrmAccount.Id = tblCrmOpportunity.AccountId ");
            querStringBuffer.append("where (Region='Central' OR Region='West' OR Region='East' OR Region='Enterprise') AND ");
            querStringBuffer.append("  (DATE(DueDate) >= '" + DateUtility.getInstance().convertStringToMySQLDate(startDate) + "') ");
            querStringBuffer.append("AND (DATE(DueDate) <= '" + DateUtility.getInstance().convertStringToMySQLDate(endDate) + "') GROUP BY Region");




            //  System.out.println("isManagerInclude-->" + isManagerInclude);




            // System.out.println("Query-->" + querStringBuffer.toString());
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(querStringBuffer.toString());
            resultSet = preparedStatement.executeQuery();
            int i = 0;
            ArrayList alist = new ArrayList();
            double totalCost = 0.00;
            DecimalFormat decimalFormat = new DecimalFormat("0.00");
            while (resultSet.next()) {
                i = 1;
                response = response + resultSet.getString("Region") + "#^$" + resultSet.getString("total") + "#^$$" + decimalFormat.format(resultSet.getDouble("val")) + "*@!";
                totalCost += resultSet.getDouble("val");
            }
            String tCost = decimalFormat.format(totalCost);

            if (i == 0) {
                response = "no data";
            } else {
                response += "addto" + tCost;
            }

            //System.err.println("Result----"+sb);
        } catch (ParseException ex) {
            throw new ServiceLocatorException(ex);
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //  System.err.print("Error :"+sql);
            }

        }
        //  System.out.println("---------->" + response);
        return response;
    }

    public String getOpportunitiesCount(int pastMonths, String OpportunityState, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        //String qsTitle = "";
        stringBuffer = new StringBuffer();
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        //Map myTeamMembersMap = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
        //String myTeamMembers = getKeys(myTeamMembersMap,",");
        String response = "";
        String practice = "";

        /* if(curWorkCountry==null || curWorkCountry=="")
        curWorkCountry ="%";*/
        try {
            String dueStartDate = "";
            String dueEndDate = DateUtility.getInstance().CurrentMonthLastDate();
            dueStartDate = DateUtility.getInstance().getPastMonthsFirstDate(pastMonths - 1);
            // dueStartDate="10/01/2011";
            StringBuffer querStringBuffer = new StringBuffer();
            querStringBuffer.append("SELECT tblCrmOpportunity.Id,tblCrmAccount.NAME,tblCrmOpportunity.Title,tblCrmOpportunity.VALUE,tblCrmAccount.Region,");
            querStringBuffer.append("DATE(tblCrmOpportunity.DueDate) AS DueDate,tblCrmOpportunity.Practice AS Practice,tblCrmOpportunity.CreatedBy,tblCrmOpportunity.State FROM tblCrmOpportunity ");
            querStringBuffer.append("JOIN tblCrmAccount ON tblCrmAccount.Id = tblCrmOpportunity.AccountId ");
            querStringBuffer.append("where (Region='Central' OR Region='West' OR Region='East' OR Region='Enterprise') AND ");
            querStringBuffer.append("  (DATE(DueDate) >= '" + DateUtility.getInstance().convertStringToMySQLDate(dueStartDate) + "') ");
            querStringBuffer.append("AND (DATE(DueDate) <= '" + DateUtility.getInstance().convertStringToMySQLDate(dueEndDate) + "')  AND tblCrmOpportunity.State='" + OpportunityState + "' ORDER BY Region,NAME,tblCrmOpportunity.DueDate DESC");
            // System.out.println("Query-->" + querStringBuffer.toString());
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(querStringBuffer.toString());
            resultSet = preparedStatement.executeQuery();

            double totalCost = 0.00;
            int i = 0;
            DecimalFormat decimalFormat = new DecimalFormat("0.00");
            while (resultSet.next()) {
                if (!"".equals(resultSet.getString("Practice")) && resultSet.getString("Practice") != null) {
                    practice = resultSet.getString("Practice");

                } else {
                    practice = "-";
                }
                i += 1;
                response = response + resultSet.getString("Id") + "#^$" + i + "#^$" + resultSet.getString("NAME") + "#^$" + resultSet.getString("Title") + "#^$$ " + decimalFormat.format(resultSet.getDouble("VALUE")) + "#^$" + resultSet.getString("Region") + "#^$" + resultSet.getString("DueDate") + "#^$" + practice + "#^$" + resultSet.getString("State") + "*@!";
                totalCost += resultSet.getDouble("VALUE");
            }
            String tCost = decimalFormat.format(totalCost);

            if (i == 0) {
                response = "no data";
            } else {
                response += "addto" + tCost;
            }
            // System.out.println("stringBuffer.toString()-----"+response);
            /*consultantList = callableStatement.getString(5);
            stringBuffer.append(callableStatement.getString(5));
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getString(6));*/

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }



        return response;
    }

    public String getConsultantStatusDetails(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {
        StringBuffer requirementDetails = new StringBuffer();
        String projectName = null;
        int projectId = 0;

        queryString = "SELECT tblCrmAccount.NAME,tblRecRequirement.JobTitle,tblRecConsultantActivity.STATUS FROM tblRecConsultantActivity LEFT JOIN tblRecRequirement ON(tblRecConsultantActivity.RequirementId=tblRecRequirement.Id) LEFT JOIN tblCrmAccount ON (tblCrmAccount.Id = tblRecRequirement.CustomerId) LEFT JOIN tblRecConsultant ON (tblRecConsultant.Id=tblRecConsultantActivity.ConsultantId) WHERE (tblRecConsultantActivity.STATUS='Tech Screen Reject' OR tblRecConsultantActivity.STATUS='Tech Screen shotlisted') AND tblRecConsultantActivity.ConsultantId = " + ajaxHandlerAction.getConsultantId() + " AND tblRecConsultant.IsReject=1 ORDER BY tblRecConsultantActivity.LastModifiedDate";
//        queryString = "SELECT tblCrmAccount.NAME, tblRecRequirement.JobTitle, tblRecConsultantActivity.STATUS ";
//queryString = queryString + "FROM tblCrmAccount LEFT OUTER JOIN tblRecRequirement ON (tblCrmAccount.Id = tblRecRequirement.CustomerId)";
//queryString = queryString + "LEFT OUTER JOIN tblRec ON (tblRecRequirement.Id = tblRec.RequirementId)";
//queryString = queryString + "LEFT OUTER JOIN tblRecConsultantActivity ON (tblRec.ConsultantId = tblRecConsultantActivity.ConsultantId)";
//queryString = queryString + "WHERE tblRecConsultantActivity.ConsultantId = "+ajaxHandlerAction.getConsultantId()+" ORDER BY JobTitle,tblRec.modifiedBy DESC";


//queryString = queryString+" GROUP BY tblRecRequirement.Id ORDER BY DatePosted DESC";
        //System.out.println("queryString-->" + queryString);

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            int count = 1;
            while (resultSet.next()) {
//                 requirementDetails.append(count++);
//                requirementDetails.append("#^$");
                requirementDetails.append(resultSet.getString("NAME"));
                requirementDetails.append("#^$");
                requirementDetails.append(resultSet.getString("JobTitle"));
                requirementDetails.append("#^$");
                requirementDetails.append(resultSet.getString("STATUS"));


                requirementDetails.append("*@!");




                // sno++;
            }


        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        //     System.out.println("Team List: "+projects.toString());
        return requirementDetails.toString();

    }

    public String getSubmissionReport(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        StringBuffer requirementDetails = new StringBuffer();
        String projectName = null;
        int projectId = 0;

        queryString = "SELECT tblRecRequirement.Id AS ReQId,tblRecRequirement.JobTitle,NoResumes,DatePosted,"
                //                +"SUM(CASE WHEN tblRec.STATUS='Assigned' THEN 1 ELSE 0 END) AS Assigned,"
                //+"SUM(CASE WHEN tblRec.STATUS='Evaluation Reject' THEN 1 ELSE 0 END) AS EvaluationReject,"
                //+"SUM(CASE WHEN tblRec.STATUS='Tech Screen  - Phone' THEN 1 ELSE 0 END) AS TechScreenPhone,"
                //+"SUM(CASE WHEN tblRec.STATUS='Tech Screen  - Skype/F2F' THEN 1 ELSE 0 END) AS TechScreenSkype,"
                //+"SUM(CASE WHEN tblRec.STATUS='Face to Face' THEN 1 ELSE 0 END) AS FacetoFace,"
                //+"SUM(CASE WHEN tblRec.STATUS='Tech Screen shotlisted' THEN 1 ELSE 0 END) AS TechScreenshotlisted,"
                //+"SUM(CASE WHEN tblRec.STATUS='Tech Screen Reject' THEN 1 ELSE 0 END) AS TechScreenReject,"
                //+"SUM(CASE WHEN tblRec.STATUS='Submitted to Sales' THEN 1 ELSE 0 END) AS SubmittedtoSales,"
                //+"SUM(CASE WHEN tblRec.STATUS='Sales Accepted' THEN 1 ELSE 0 END) AS SalesAccepted,"
                //+"SUM(CASE WHEN tblRec.STATUS='Sales Reject' THEN 1 ELSE 0 END) AS SalesReject,"
                //+"SUM(CASE WHEN tblRec.STATUS='Client Submission' THEN 1 ELSE 0 END) AS ClientSubmission,"
                //+"SUM(CASE WHEN tblRec.STATUS='Client Reject' THEN 1 ELSE 0 END) AS ClientReject,"
                //+"SUM(CASE WHEN tblRec.STATUS='Client Interview' THEN 1 ELSE 0 END) AS ClientInterview,"
                //+"SUM(CASE WHEN tblRec.STATUS='Client Interview Reject' THEN 1 ELSE 0 END) AS ClientInterviewReject,"
                //+"SUM(CASE WHEN tblRec.STATUS='Offered' THEN 1 ELSE 0 END) AS Offered,"
                //+"SUM(CASE WHEN tblRec.STATUS='Not Joined' THEN 1 ELSE 0 END) AS NotJoined,"
                //+"SUM(CASE WHEN tblRec.STATUS='Joined' THEN 1 ELSE 0 END) AS Joined,"
                //+"SUM(CASE WHEN tblRec.STATUS='Dropped/Backout' THEN 1 ELSE 0 END) AS DroppedBackout,"
                //+"SUM(CASE WHEN tblRec.STATUS='Hold' THEN 1 ELSE 0 END) AS Hold,"
                + "COUNT(tblRec.Id) AS AppliedConut FROM tblRecRequirement LEFT OUTER JOIN tblRec ON tblRecRequirement.Id = tblRec.RequirementId WHERE 1=1  ";
        if (!"".equals(ajaxHandlerAction.getStartDate()) && !"".equals(ajaxHandlerAction.getEndDate())) {
            queryString = queryString + " AND  DatePosted>='" + DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getStartDate()) + "' AND DatePosted<='" + DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getEndDate()) + "' ";
        }
        if (!"".equals(ajaxHandlerAction.getPracticeid())) {
            queryString = queryString + " AND tblRecRequirement.Practice='" + ajaxHandlerAction.getPracticeid() + "' ";
        }
        if (!"".equals(ajaxHandlerAction.getStatus())) {
            queryString = queryString + " AND tblRecRequirement.STATUS='" + ajaxHandlerAction.getStatus() + "' ";
        }
        if (!"".equals(ajaxHandlerAction.getTechMgrId())) {
            queryString = queryString + " AND (tblRecRequirement.AssignToTechLead='" + ajaxHandlerAction.getTechMgrId() + "' OR tblRecRequirement.SecondaryTechLead='" + ajaxHandlerAction.getTechMgrId() + "') ";
        }
        if (!"".equals(ajaxHandlerAction.getClientId())) {
            queryString = queryString + " AND tblRecRequirement.CustomerId=" + ajaxHandlerAction.getClientId() + " ";
        }
        if (!"".equals(ajaxHandlerAction.getTeamLeadLoginId())) {
            //String employeeName = httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_USER_NAME).toString();
            String employeeName = DataSourceDataProvider.getInstance().getemployeenamebyloginId(ajaxHandlerAction.getTeamLeadLoginId());

            String empNamesList = "'" + employeeName + "'";


            if (!"".equals(ajaxHandlerAction.getRecruiterLoginId()) && !"All".equals(ajaxHandlerAction.getRecruiterLoginId())) {
                empNamesList = empNamesList + ",'" + DataSourceDataProvider.getInstance().getemployeenamebyloginId(ajaxHandlerAction.getRecruiterLoginId()) + "'";
                //System.out.println("if empNamesList" + empNamesList);
                queryString = queryString + "AND (tblRecRequirement.AssignedTo IN (" + empNamesList + ") OR tblRecRequirement.SecondaryRecruiter IN (" + empNamesList + ")) ";
            } else {

                Map teamMap = DataSourceDataProvider.getInstance().getMyTeamMembers(ajaxHandlerAction.getTeamLeadLoginId(), "Recruiting");
                empNamesList = empNamesList + "," + DataSourceDataProvider.getInstance().getTeamNamesList(teamMap);
                // System.out.println("else empNamesList" + empNamesList);
                queryString = queryString + "AND (tblRecRequirement.AssignedTo IN (" + empNamesList + ") OR tblRecRequirement.SecondaryRecruiter IN (" + empNamesList + ")) ";
            }

        }
        if (!"".equals(ajaxHandlerAction.getRegion()) && ajaxHandlerAction.getRegion() != null) {
            queryString = queryString + " AND tblRecRequirement.Region='" + ajaxHandlerAction.getRegion() + "' ";
        }
        if (!"".equals(ajaxHandlerAction.getModifiedStartDate()) && !"".equals(ajaxHandlerAction.getModifiedEndDate())) {
            queryString = queryString + " AND  tblRecRequirement.ModifiedDate>='" + DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getModifiedStartDate()) + "' AND tblRecRequirement.ModifiedDate<='" + DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getModifiedEndDate()) + "' ";
        }
        queryString = queryString + " GROUP BY tblRecRequirement.Id ORDER BY DatePosted DESC LIMIT 150";
        //System.out.println("queryString-->" + queryString);

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            int totalPositions = 0;
            while (resultSet.next()) {
                requirementDetails.append(resultSet.getInt("ReQId"));
                requirementDetails.append("#^$");
                requirementDetails.append(resultSet.getString("JobTitle"));
                requirementDetails.append("#^$");
                requirementDetails.append(resultSet.getString("NoResumes"));
                requirementDetails.append("#^$");
                requirementDetails.append(resultSet.getString("DatePosted").split("\\ ")[0]);

                requirementDetails.append("#^$");
                requirementDetails.append(DataSourceDataProvider.getInstance().getRecConsultantCountByStatus(resultSet.getInt("ReQId"), "Assigned"));
                requirementDetails.append("#^$");
                requirementDetails.append(DataSourceDataProvider.getInstance().getRecConsultantCountByStatus(resultSet.getInt("ReQId"), "Evaluation Reject"));
                requirementDetails.append("#^$");
                requirementDetails.append(DataSourceDataProvider.getInstance().getRecConsultantCountByStatus(resultSet.getInt("ReQId"), "Tech Screen  - Phone"));
                requirementDetails.append("#^$");
                requirementDetails.append(DataSourceDataProvider.getInstance().getRecConsultantCountByStatus(resultSet.getInt("ReQId"), "Tech Screen  - Skype/F2F"));
                requirementDetails.append("#^$");
                requirementDetails.append(DataSourceDataProvider.getInstance().getRecConsultantCountByStatus(resultSet.getInt("ReQId"), "Face to Face"));
                requirementDetails.append("#^$");
                requirementDetails.append(DataSourceDataProvider.getInstance().getRecConsultantCountByStatus(resultSet.getInt("ReQId"), "Tech Screen shotlisted"));
                requirementDetails.append("#^$");
                requirementDetails.append(DataSourceDataProvider.getInstance().getRecConsultantCountByStatus(resultSet.getInt("ReQId"), "Tech Screen Reject"));
                requirementDetails.append("#^$");
                requirementDetails.append(DataSourceDataProvider.getInstance().getRecConsultantCountByStatus(resultSet.getInt("ReQId"), "Submitted to Sales"));
                requirementDetails.append("#^$");
                requirementDetails.append(DataSourceDataProvider.getInstance().getRecConsultantCountByStatus(resultSet.getInt("ReQId"), "Sales Accepted"));
                requirementDetails.append("#^$");
                requirementDetails.append(DataSourceDataProvider.getInstance().getRecConsultantCountByStatus(resultSet.getInt("ReQId"), "Sales Reject"));
                requirementDetails.append("#^$");
                requirementDetails.append(DataSourceDataProvider.getInstance().getRecConsultantCountByStatus(resultSet.getInt("ReQId"), "Client Submission"));
                requirementDetails.append("#^$");
                requirementDetails.append(DataSourceDataProvider.getInstance().getRecConsultantCountByStatus(resultSet.getInt("ReQId"), "Client Reject"));
                requirementDetails.append("#^$");
                requirementDetails.append(DataSourceDataProvider.getInstance().getRecConsultantCountByStatus(resultSet.getInt("ReQId"), "Client Interview"));
                requirementDetails.append("#^$");
                requirementDetails.append(DataSourceDataProvider.getInstance().getRecConsultantCountByStatus(resultSet.getInt("ReQId"), "Client Interview Reject"));
                requirementDetails.append("#^$");
                requirementDetails.append(DataSourceDataProvider.getInstance().getRecConsultantCountByStatus(resultSet.getInt("ReQId"), "Offered"));
                requirementDetails.append("#^$");
                requirementDetails.append(DataSourceDataProvider.getInstance().getRecConsultantCountByStatus(resultSet.getInt("ReQId"), "Not Joined"));
                requirementDetails.append("#^$");
                requirementDetails.append(DataSourceDataProvider.getInstance().getRecConsultantCountByStatus(resultSet.getInt("ReQId"), "Joined"));
                requirementDetails.append("#^$");
                requirementDetails.append(DataSourceDataProvider.getInstance().getRecConsultantCountByStatus(resultSet.getInt("ReQId"), "Dropped/Backout"));
                requirementDetails.append("#^$");
                requirementDetails.append(DataSourceDataProvider.getInstance().getRecConsultantCountByStatus(resultSet.getInt("ReQId"), "Hold"));

                //getRecConsultantCountByStatus
                requirementDetails.append("#^$");
                requirementDetails.append(resultSet.getString("AppliedConut"));
                requirementDetails.append("*@!");
                totalPositions = totalPositions + resultSet.getInt("NoResumes");



                // sno++;
            }

            requirementDetails.append("$$$");
            requirementDetails.append(totalPositions);
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        //     System.out.println("Team List: "+projects.toString());
        return requirementDetails.toString();

    }

    public String getConsultantListForRequirement(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {
        StringBuffer requirementDetails = new StringBuffer();
        String projectName = null;
        int projectId = 0;

        queryString = "SELECT tblRecRequirement.Practice AS Practice,tblRecRequirement.AssignToTechLead AS AssignToTechLead,tblCrmAccount.NAME AS AccountName,tblRecRequirement.JobTitle AS JobTitle,";
        queryString = queryString + " tblRecRequirement.NoResumes AS NoResumes,tblRecRequirement.DatePosted AS DatePosted,tblRecRequirement.STATUS AS ReqSTATUS,CONCAT(tblRecConsultant.FName,'.',tblRecConsultant.LName) AS ConsultantName,";
        queryString = queryString + " tblRecConsultant.Experience AS Experience,tblRec.STATUS AS ConsulatntSTATUS,tblRec.CreatedDate AS SubmittedDate,tblRec.CreatedBy,tblRecRequirement.AssignedTo AS TeamLead,tblRecRequirement.SecondaryRecruiter AS Recruiter,";
        queryString = queryString + " tblRec.Comments AS Remarks FROM tblRecRequirement ";
        queryString = queryString + " LEFT OUTER JOIN tblRec ON (tblRecRequirement.Id = tblRec.RequirementId ) ";
        queryString = queryString + " LEFT OUTER JOIN tblCrmAccount ON (tblCrmAccount.Id = tblRecRequirement.CustomerId ) ";
        queryString = queryString + " LEFT OUTER JOIN tblRecConsultant ON tblRec.ConsultantId = tblRecConsultant.Id  WHERE  tblRecRequirement.Id = " + ajaxHandlerAction.getRequirementId();

//queryString = queryString+" GROUP BY tblRecRequirement.Id ORDER BY DatePosted DESC";
        // System.out.println("queryString-->" + queryString);

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            int count = 1;
            while (resultSet.next()) {
                requirementDetails.append(count++);
                requirementDetails.append("#^$");

                String Practice = "";
                String AssignToTechLead = "";
                String AccountName = "";
                String JobTitle = "";
                String NoResumes = "";
                String ReqSTATUS = "";
                String ConsultantName = "";
                String Experience = "";
                String ConsulatntSTATUS = "";
                String createdBy = "";
                String TeamLead = "";
                String Recruiter = "";
                String Remarks = "";
                if (resultSet.getString("Practice") != null) {
                    Practice = resultSet.getString("Practice");
                }
                if (resultSet.getString("AssignToTechLead") != null) {
                    AssignToTechLead = resultSet.getString("AssignToTechLead");
                }
                if (resultSet.getString("AccountName") != null) {
                    AccountName = resultSet.getString("AccountName");
                }
                if (resultSet.getString("JobTitle") != null) {
                    JobTitle = resultSet.getString("JobTitle");
                }
                if (resultSet.getString("NoResumes") != null) {
                    NoResumes = resultSet.getString("NoResumes");
                }
                if (resultSet.getString("ReqSTATUS") != null) {
                    ReqSTATUS = resultSet.getString("ReqSTATUS");
                }
                if (resultSet.getString("ConsultantName") != null) {
                    ConsultantName = resultSet.getString("ConsultantName");
                }
                if (resultSet.getString("Experience") != null) {
                    Experience = resultSet.getString("Experience");
                }
                if (resultSet.getString("ConsulatntSTATUS") != null) {
                    ConsulatntSTATUS = resultSet.getString("ConsulatntSTATUS");
                }
                if (resultSet.getString("TeamLead") != null) {
                    TeamLead = resultSet.getString("TeamLead");
                }
                if (resultSet.getString("CreatedBy") != null) {
                    createdBy = DataSourceDataProvider.getInstance().getemployeenamebyloginId(resultSet.getString("CreatedBy"));
                }
                if (resultSet.getString("Recruiter") != null) {
                    Recruiter = resultSet.getString("Recruiter");
                }
                if (resultSet.getString("Remarks") != null) {
                    Remarks = resultSet.getString("Remarks");
                }

                requirementDetails.append(Practice);
                requirementDetails.append("#^$");
                requirementDetails.append(AssignToTechLead);
                requirementDetails.append("#^$");
                requirementDetails.append(AccountName);
                requirementDetails.append("#^$");
                requirementDetails.append(JobTitle);
                requirementDetails.append("#^$");
                requirementDetails.append(NoResumes);
                requirementDetails.append("#^$");
                requirementDetails.append(resultSet.getString("DatePosted").split("\\ ")[0]);
                requirementDetails.append("#^$");
                requirementDetails.append(ReqSTATUS);
                requirementDetails.append("#^$");
                requirementDetails.append(ConsultantName);
                requirementDetails.append("#^$");
                requirementDetails.append(Experience);
                requirementDetails.append("#^$");
                requirementDetails.append(ConsulatntSTATUS);
                requirementDetails.append("#^$");
                requirementDetails.append(resultSet.getString("SubmittedDate").split("\\ ")[0]);
                requirementDetails.append("#^$");
                requirementDetails.append(createdBy);
                requirementDetails.append("#^$");
                requirementDetails.append(TeamLead);
                requirementDetails.append("#^$");
                requirementDetails.append(Recruiter);
                requirementDetails.append("#^$");
                requirementDetails.append(Remarks);

                requirementDetails.append("*@!");




                // sno++;
            }


        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        //     System.out.println("Team List: "+projects.toString());
        return requirementDetails.toString();

    }

    public String popupTechRatingsWindow(int Id) throws ServiceLocatorException {
        String result = "";
        String queryString = "";

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();

            queryString = "SELECT Skill1,Rating1,Skill2,Rating2,Skill3,Rating3,Skill4,Rating4,Skill5,Rating5,Skill6,Rating6,Skill7,Rating7,Skill8,Rating8,Skill9,Rating9,Skill10,Rating10,TechnicalSkills,DomainSkills,CommunicationSkills  FROM tblRecConsultantActivity WHERE Id = " + Id;
            // System.out.println("queryString---" + queryString);
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                for (int i = 1; i < 20; i = i + 2) {
                    // System.out.println("resultSet.getString(" + i + ")--" + resultSet.getString(i));
                    if (!resultSet.getString(i).equals("")) {
                        result += "<tr><td>" + resultSet.getString(i) + "</td><td>" + resultSet.getString(i + 1) + "</td></tr>";
                    }
                }
                result += "<tr><td>Technical Skills</td><td>" + resultSet.getString("TechnicalSkills") + "</td></tr>";
                result += "<tr><td>Domain Skills</td><td>" + resultSet.getString("DomainSkills") + "</td></tr>";
                result += "<tr><td>Communication Skills</td><td>" + resultSet.getString("CommunicationSkills") + "</td></tr>";
                //  System.out.println("ModifiedDate------>"+createdDate);
            }
            //   System.out.println("result--" + result);

        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return result;
    }

    public String getMyTeam(String loginId, String departmentName) throws ServiceLocatorException {
        // StringBuffer projects  = new StringBuffer();
        StringBuffer employees = new StringBuffer();
        //  String projectName = null;
        String empName = null;
        // int projectId=0;
        String empId;
        // Map primaryMap = DataSourceDataProvider.getInstance().getCustomerTeamMap(Integer.parseInt(reportsToId));

        //queryString = "SELECT distinct tblProjectContacts.ProjectId AS projectId,ProjectName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE AccountId="+accountId;

        //System.out.println("teamtype ajax-->"+teamType+"-->"+reportsToId);
        try {

            //  Map secondaryMap = DataSourceDataProvider.getInstance().getCustomerSecondaryTeamMap(Integer.parseInt(reportsToId));
            Map myTeamMap = DataSourceDataProvider.getInstance().getMyTeamMembers(loginId, departmentName);

            Iterator entries = myTeamMap.entrySet().iterator();
            employees.append("<xml version=\"1.0\">");
            //   projects.append("<PROJECTS>");
            employees.append("<EMPLOYEES>");
            //projects.append("<USER projectId=\"-1\">--Please Select--</USER>");
            //  employees.append("<USER empId=\"-1\">--Please Select--</USER>");
            employees.append("<USER empId=\"All\">All</USER>");
            while (entries.hasNext()) {
                Map.Entry entry = (Map.Entry) entries.next();
                // empId = Integer.parseInt((String)entry.getKey());
                //empId = (String) entry.getKey();
                empId = (String) entry.getKey();
                empName = (String) entry.getValue();
                employees.append("<USER empId=\"" + empId + "\">");
                if (empName.contains("&")) {
                    empName = empName.replace("&", "&amp;");
                }
                employees.append(empName);
                employees.append("</USER>");
            }
            employees.append("</EMPLOYEES>");
            employees.append("</xml>");



//System.out.println("employees-->"+employees.toString());
            //  System.out.println("queryString-->"+queryString);

        } catch (Exception ex) {

            ex.printStackTrace();
        }

        //     System.out.println("Team List: "+projects.toString());
        return employees.toString();
    }

    public String getRequirementStatusReport(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        StringBuffer requirementDetails = new StringBuffer();
        String response = "";
        queryString = "SELECT Country,COUNT(id) AS total,SUM(CASE WHEN STATUS='Open' THEN 1 ELSE 0 END) AS OPENED,"
                + "SUM(CASE WHEN STATUS='InProgress' THEN 1 ELSE 0 END) AS InProgress,"
                + "SUM(CASE WHEN STATUS='Forecast' THEN 1 ELSE 0 END) AS Forecast,"
                + "SUM(CASE WHEN STATUS='Forecast' THEN 1 ELSE 0 END) AS Forecast,"
                + "SUM(CASE WHEN STATUS='lost' THEN 1 ELSE 0 END) AS lost,"
                + "SUM(CASE WHEN STATUS='Withdrawn' THEN 1 ELSE 0 END) AS Withdrawn,"
                + "SUM(CASE WHEN STATUS='Hold' THEN 1 ELSE 0 END) AS Hold,"
                + "SUM(CASE WHEN STATUS='won' THEN 1 ELSE 0 END) AS won "
                + "FROM tblRecRequirement WHERE (Country IS NOT NULL AND Country!='') ";
        if (!"".equals(ajaxHandlerAction.getStartDate()) && !"".equals(ajaxHandlerAction.getEndDate())) {
            queryString = queryString + " AND  DatePosted>='" + DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getStartDate()) + "' AND DatePosted<='" + DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getEndDate()) + "' ";
        }
        if (!"".equals(ajaxHandlerAction.getPracticeid())) {
            queryString = queryString + " AND tblRecRequirement.Practice='" + ajaxHandlerAction.getPracticeid() + "' ";
        }
        if (!"".equals(ajaxHandlerAction.getStatus())) {
            queryString = queryString + " AND tblRecRequirement.STATUS='" + ajaxHandlerAction.getStatus() + "' ";
        }
        if (!"".equals(ajaxHandlerAction.getTechMgrId())) {
            queryString = queryString + " AND (tblRecRequirement.AssignToTechLead='" + ajaxHandlerAction.getTechMgrId() + "' OR tblRecRequirement.SecondaryTechLead='" + ajaxHandlerAction.getTechMgrId() + "') ";
        }
        if (!"".equals(ajaxHandlerAction.getClientId())) {
            queryString = queryString + " AND tblRecRequirement.CustomerId=" + ajaxHandlerAction.getClientId() + " ";
        }
        if (!"".equals(ajaxHandlerAction.getTeamLeadLoginId())) {
            //String employeeName = httpServletRequest.getSession().getAttribute(ApplicationConstants.SESSION_USER_NAME).toString();
            String employeeName = DataSourceDataProvider.getInstance().getemployeenamebyloginId(ajaxHandlerAction.getTeamLeadLoginId());

            String empNamesList = "'" + employeeName + "'";


            if (!"".equals(ajaxHandlerAction.getRecruiterLoginId()) && !"All".equals(ajaxHandlerAction.getRecruiterLoginId())) {
                empNamesList = empNamesList + ",'" + DataSourceDataProvider.getInstance().getemployeenamebyloginId(ajaxHandlerAction.getRecruiterLoginId()) + "'";
                // System.out.println("if empNamesList" + empNamesList);
                queryString = queryString + "AND (tblRecRequirement.AssignedTo IN (" + empNamesList + ") OR tblRecRequirement.SecondaryRecruiter IN (" + empNamesList + ")) ";
            } else {

                Map teamMap = DataSourceDataProvider.getInstance().getMyTeamMembers(ajaxHandlerAction.getTeamLeadLoginId(), "Recruiting");
                empNamesList = empNamesList + "," + DataSourceDataProvider.getInstance().getTeamNamesList(teamMap);
                // System.out.println("else empNamesList" + empNamesList);
                queryString = queryString + "AND (tblRecRequirement.AssignedTo IN (" + empNamesList + ") OR tblRecRequirement.SecondaryRecruiter IN (" + empNamesList + ")) ";
            }

        }
        if (!"".equals(ajaxHandlerAction.getRegion()) && ajaxHandlerAction.getRegion() != null) {
            queryString = queryString + " AND tblRecRequirement.Region='" + ajaxHandlerAction.getRegion() + "' ";
        }
        if (!"".equals(ajaxHandlerAction.getModifiedStartDate()) && !"".equals(ajaxHandlerAction.getModifiedEndDate())) {
            queryString = queryString + " AND  tblRecRequirement.ModifiedDate>='" + DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getModifiedStartDate()) + "' AND tblRecRequirement.ModifiedDate<='" + DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getModifiedEndDate()) + "' ";
        }
        queryString = queryString + " GROUP BY Country ORDER BY Country DESC ";
        //System.out.println("queryString-->" + queryString);

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            int i = 0;
            int total = 0;
            while (resultSet.next()) {
                i = 1;
                total += resultSet.getInt("total");
                response = response + resultSet.getString("Country") + "#^$" + resultSet.getString("total") + "#^$" + resultSet.getString("OPENED") + "#^$" + resultSet.getString("InProgress") + "#^$" + resultSet.getString("Forecast") + "#^$" + resultSet.getString("lost") + "#^$" + resultSet.getString("Withdrawn") + "#^$" + resultSet.getString("Hold") + "#^$" + resultSet.getString("won") + "*@!";
            }

            if (i == 0) {
                response = "no data";
            } else {
                response += "$$$" + total;
            }


        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        return response;

    }

    //  public String getAccountsByPriorities(String teamMemberId, String teamName, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
   /* public String getAccountsByPriorities(String teamMemberId, String teamName, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        //String qsTitle = "";
        DateUtility dateutility = new DateUtility();
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String createdBy = "";
        String totalStream = "";
        int i = 1;
        String responseString = "";
        boolean isDataAvailable = false;
        // String teamName="";
        String departmentId = "";
        Map teamMembers = new TreeMap();
        String myTeamMembers = "";
        
        int isSingle = 0;
        DataSourceDataProvider dataSourceDataProvider = null;

        try {
            TreeMap roles = (TreeMap) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_ROLES);
            // System.out.println("teamMemberId----->"+teamMemberId);
            //  System.out.println("teamName----->"+teamName);
            String tempTeamMemberId = teamMemberId;
            /*  if (roles.containsValue("Admin")) {
            //  System.out.println("in role admin");
            
            // System.out.println("teamMemberId----->"+teamMemberId);
            //System.out.println("teamName----->"+teamName);
            if (teamMemberId.equals("-1") && teamName.length() >= 2) {
            teamMemberId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            
            
            departmentId = dataSourceDataProvider.getInstance().getDepartmentName(teamMemberId);
            // System.out.println("departmentId----->"+departmentId);
            teamMembers = dataSourceDataProvider.getInstance().getMyTeamMembers(teamMemberId, departmentId);
            if (teamMembers.size() > 0) {
            myTeamMembers = getKeys(teamMembers, ",");
            } else {
            myTeamMembers = "'" + teamMemberId + "'";
            }
            isSingle++;
            // System.out.println("myTeamMembers admin----->"+myTeamMembers);
            // teamName=DataSourceDataProvider.getInstance().getTeamNameByUserId(teamMemberId);
            } else {
            //teamName = DataSourceDataProvider.getInstance().getTeamNameByUserId(teamMemberId);
            myTeamMembers = myTeamMembers + teamMemberId;
            }
            } else {
            
            if (teamMemberId.equals("-1")) {
            
            teamMemberId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            
            
            departmentId = dataSourceDataProvider.getInstance().getDepartmentName(teamMemberId);
            // System.out.println("departmentId----->"+departmentId);
            teamMembers = dataSourceDataProvider.getInstance().getMyTeamMembers(teamMemberId, departmentId);
            myTeamMembers = getKeys(teamMembers, ",");
            //myTeamMembers=myTeamMembers+teamMemberId;
            if (teamMembers.size() > 0) {
            myTeamMembers = myTeamMembers + ",'" + teamMemberId + "'";
            } else {
            myTeamMembers = "'" + teamMemberId + "'";
            }
            
            isSingle++;
            //System.out.println("myTeamMembers----->"+myTeamMembers);
            //teamName = DataSourceDataProvider.getInstance().getTeamNameByUserId(teamMemberId);
            } else {
            
            // teamName = DataSourceDataProvider.getInstance().getTeamNameByUserId(teamMemberId);
            myTeamMembers = myTeamMembers + teamMemberId;
            //System.out.println("myTeamMembers2----->"+myTeamMembers);
            }
            //System.out.println("myTeamMembers2----->"+myTeamMembers);
            }
             
            Map myTeamMembersMap = new HashMap();
            if (teamMemberId.equals("-1")) {
                accountService = ServiceLocator.getAccountService();

                String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
//                if (loginId.equals("plokam")) {
//                    myTeamMembersMap = (accountService.getAllSalesTeamExceptAccountTeam(new TreeMap()));
//                } else {
//                    myTeamMembersMap = ((Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP));
//                }
                myTeamMembersMap = ((Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP));
                myTeamMembersMap.put(loginId, loginId);
                myTeamMembers = DataSourceDataProvider.getInstance().getTeamLoginIdList(myTeamMembersMap);
            } else {
                myTeamMembers = "'" + teamMemberId + "'";
            }


            // System.out.println("teamName-->" + teamName);


            queryString = "SELECT DISTINCT tblCrmAccount.Id AS AccountId,tblCrmAccount.Name "
                    + "AS AccountName,tblCrmAccount.B2BPriority,tblCrmAccount.BPMPriority,tblCrmAccount.MainPriority,"
                    + "tblCrmAccount.SAPPriority,tblCrmAccount.ECOMPriority,tblCrmAccount.QAPriority,tblCrmAccount.DateLastActivity AS DateLastActivity,tblCrmAccountTeam.TeamMemberId FROM tblCrmAccount "
                    + "LEFT JOIN tblCrmAccountTeam ON (tblCrmAccount.Id = tblCrmAccountTeam.AccountId) "
                    + "WHERE ";
            /*  if (myTeamMembers.contains(",") || isSingle > 0) {

            // System.out.println("contains-->");  

            queryString = queryString + "tblCrmAccountTeam.TeamMemberId IN (" + myTeamMembers + ")";

            queryString = queryString + " ORDER BY ";
            if (teamName.equalsIgnoreCase("B2B")) {
                queryString = queryString + " tblCrmAccount.B2BPriority=0,tblCrmAccount.B2BPriority  ";

            }

            if (teamName.equalsIgnoreCase("BPM")) {
                queryString = queryString + "  tblCrmAccount.BPMPriority=0,tblCrmAccount.BPMPriority   ";

            }

            if (teamName.equalsIgnoreCase("E-Commerce")) {
                queryString = queryString + "  tblCrmAccount.ECOMPriority=0,tblCrmAccount.ECOMPriority   ";

            }
            if (teamName.equalsIgnoreCase("SAP")) {
                queryString = queryString + " tblCrmAccount.SAPPriority=0,tblCrmAccount.SAPPriority   ";

            }
            if (teamName.equalsIgnoreCase("QA")) {
                queryString = queryString + " tblCrmAccount.QAPriority=0,tblCrmAccount.QAPriority    ";
                // + "ORDER BY `tblCrmAccount`.`QAPriority` LIMIT 50";
            }
            if (teamName.equalsIgnoreCase("Main")) {
                queryString = queryString + " tblCrmAccount.MainPriority=0,tblCrmAccount.MainPriority    ";
            }
            // queryString = queryString + " AND `tblCrmAccount`.`MainPriority` >0  ";
            queryString = queryString + "  LIMIT 200";
            /* } else {
            //System.out.println("not contains-->");  
            queryString = queryString + " (tblCrmAccountTeam.TeamMemberId IN ('" + myTeamMembers + "') Or tblCrmAccountTeam.TeamMemberId IN ('" + teamMemberId + "') )";
            queryString = queryString + " ORDER BY ";
            if (teamName.equalsIgnoreCase("B2B")) {
            queryString = queryString + " tblCrmAccount.B2BPriority=0,tblCrmAccount.B2BPriority  ";
            
            }
            
            if (teamName.equalsIgnoreCase("BPM")) {
            queryString = queryString + "  tblCrmAccount.BPMPriority=0,tblCrmAccount.BPMPriority   ";
            
            }
            
            if (teamName.equalsIgnoreCase("E-Commerce")) {
            queryString = queryString + "  tblCrmAccount.ECOMPriority=0,tblCrmAccount.ECOMPriority   ";
            
            }
            if (teamName.equalsIgnoreCase("SAP")) {
            queryString = queryString + " tblCrmAccount.SAPPriority=0,tblCrmAccount.SAPPriority   ";
            
            }
            if (teamName.equalsIgnoreCase("QA")) {
            queryString = queryString + " ,tblCrmAccount.QAPriority=0,tblCrmAccount.QAPriority    ";
            // + "ORDER BY `tblCrmAccount`.`QAPriority` LIMIT 50";
            }
            if (teamName.equalsIgnoreCase("Main")) {
            queryString = queryString + " tblCrmAccount.MainPriority=0,tblCrmAccount.MainPriority    ";
            }
            // queryString = queryString + " AND `tblCrmAccount`.`MainPriority` >0  ";
            queryString = queryString + ",tblCrmAccount.Name  LIMIT 200";
            }
            // System.out.println("query--"+queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            while (resultSet.next()) {
                int accountId = resultSet.getInt("AccountId");
                String dbTeamMemberId = resultSet.getString("TeamMemberId");

                responseString = responseString + i + "|";
                responseString = responseString + resultSet.getInt("AccountId") + "|";
                responseString = responseString + resultSet.getString("AccountName") + "|";
                if (teamName.equalsIgnoreCase("B2B")) {
                    responseString = responseString + resultSet.getInt("B2BPriority") + "|";
                }
                if (teamName.equalsIgnoreCase("BPM")) {
                    responseString = responseString + resultSet.getInt("BPMPriority") + "|";
                }
                if (teamName.equalsIgnoreCase("SAP")) {
                    responseString = responseString + resultSet.getInt("SAPPriority") + "|";
                }
                if (teamName.equalsIgnoreCase("E-Commerce")) {
                    responseString = responseString + resultSet.getInt("ECOMPriority") + "|";
                }
                if (teamName.equalsIgnoreCase("QA")) {
                    responseString = responseString + resultSet.getInt("QAPriority") + "|";
                }
                if (teamName.equalsIgnoreCase("Main")) {
                    responseString = responseString + resultSet.getInt("MainPriority") + "|";
                }
                //   if (tempTeamMemberId.equals("-1")) {
                responseString = responseString + dbTeamMemberId + "|";
                // }
//                if (teamMemberId.equals(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString())) {
//                    if (resultSet.getString("DateLastActivity") != null) {
//
//                        responseString = responseString + resultSet.getString("DateLastActivity").substring(0, 10) + "^";
//                        //System.out.println("responseString2---->"+responseString);
//                    } else {
//                        responseString = responseString + "-" + "^";
//                    }
//                } else {

                responseString = responseString + dataSourceDataProvider.getInstance().getdateLastActivityById(dbTeamMemberId, accountId);
                // System.out.println("responseString---->"+responseString);

                // }

                //   System.out.println("date---->"+responseString);
                i++;
                isDataAvailable = true;
            }

            if (!isDataAvailable) {
                responseString = "no data";
            }

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        //System.out.println("responseString-->"+responseString);
        return responseString;
    }*/
 public String getAccountsByPriorities(String teamMemberId, String teamName, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        //String qsTitle = "";
        DateUtility dateutility = new DateUtility();
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String createdBy = "";
        String totalStream = "";
        int i = 1;
        String responseString = "";
        boolean isDataAvailable = false;
        // String teamName="";
        String departmentId = "";
        Map teamMembers = new TreeMap();
        String myTeamMembers = "";
          CallableStatement callableStatement = null;
        /*  String fromdate="";
        String todate="";
        String strFormat = "MM/dd/yyyy";*/
        int isSingle = 0;
        DataSourceDataProvider dataSourceDataProvider = null;

        try {
            TreeMap roles = (TreeMap) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_ROLES);
             String titleType = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE);
                  String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            // System.out.println("teamMemberId----->"+teamMemberId);
            //  System.out.println("teamName----->"+teamName);
            String tempTeamMemberId = teamMemberId;
           
         //   System.out.println("teamMemberId is----->"+teamMemberId);
         
            Map myTeamMembersMap = new HashMap();
            if (teamMemberId.equals("-1")) {
             //   System.out.println("in if of all case");
                accountService = ServiceLocator.getAccountService();

           
//                if (loginId.equals("plokam")) {
//                    myTeamMembersMap = (accountService.getAllSalesTeamExceptAccountTeam(new TreeMap()));
//                } else {
//                    myTeamMembersMap = ((Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP));
//                }
                
                     // System.out.println("titleType is---->"+titleType);
                       if(titleType.equals("BDM")){
                        //   System.out.println("bdm people");
                           String empId =  httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_ID).toString();
                           myTeamMembersMap=DataSourceDataProvider.getInstance().getBdmAssociateList(empId);
                             myTeamMembersMap.put(loginId, loginId);
                              myTeamMembers = DataSourceDataProvider.getInstance().getTeamLoginIdList(myTeamMembersMap);
                          //    System.out.println("myTeamMembers is----->"+myTeamMembers);
                       }
                       else{
                          // System.out.println("non bdm people");
                             myTeamMembersMap = ((Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP));
                myTeamMembersMap.put(loginId, loginId);
                myTeamMembers = DataSourceDataProvider.getInstance().getTeamLoginIdList(myTeamMembersMap);
          //      System.out.println("myTeamMembers is----->"+myTeamMembers);
                       }
              
            } else {
              //  System.out.println("in else case");
                myTeamMembers = "'" + teamMemberId + "'";
            }


           //  System.out.println("teamName-->" + myTeamMembers);

            connection = ConnectionProvider.getInstance().getConnection();
                 if(!titleType.equals("BDM")){
                     System.out.println("in false case");
                        queryString = "SELECT DISTINCT tblCrmAccount.Id AS AccountId,tblCrmAccount.Name "
                    + "AS AccountName,tblCrmAccount.B2BPriority,tblCrmAccount.BPMPriority,tblCrmAccount.MainPriority,"
                    + "tblCrmAccount.SAPPriority,tblCrmAccount.ECOMPriority,tblCrmAccount.QAPriority,tblCrmAccount.DateLastActivity AS DateLastActivity,tblCrmAccountTeam.TeamMemberId FROM tblCrmAccount "
                    + "LEFT JOIN tblCrmAccountTeam ON (tblCrmAccount.Id = tblCrmAccountTeam.AccountId) "
                    + "WHERE ";
            /*  if (myTeamMembers.contains(",") || isSingle > 0) {*/

            // System.out.println("contains-->");  
 
      queryString = queryString + "tblCrmAccountTeam.TeamMemberId IN (" + myTeamMembers + ")";

           

            queryString = queryString + " ORDER BY ";
            if (teamName.equalsIgnoreCase("B2B")) {
                queryString = queryString + " tblCrmAccount.B2BPriority=0,tblCrmAccount.B2BPriority  ";

            }

            if (teamName.equalsIgnoreCase("BPM")) {
                queryString = queryString + "  tblCrmAccount.BPMPriority=0,tblCrmAccount.BPMPriority   ";

            }

            if (teamName.equalsIgnoreCase("E-Commerce")) {
                queryString = queryString + "  tblCrmAccount.ECOMPriority=0,tblCrmAccount.ECOMPriority   ";

            }
            if (teamName.equalsIgnoreCase("SAP")) {
                queryString = queryString + " tblCrmAccount.SAPPriority=0,tblCrmAccount.SAPPriority   ";

            }
            if (teamName.equalsIgnoreCase("QA")) {
                queryString = queryString + " tblCrmAccount.QAPriority=0,tblCrmAccount.QAPriority    ";
                // + "ORDER BY `tblCrmAccount`.`QAPriority` LIMIT 50";
            }
            if (teamName.equalsIgnoreCase("Main")) {
                queryString = queryString + " tblCrmAccount.MainPriority=0,tblCrmAccount.MainPriority    ";
            }
            // queryString = queryString + " AND `tblCrmAccount`.`MainPriority` >0  ";
            queryString = queryString + "  LIMIT 200";
                 //  System.out.println("query--"+queryString);
                  statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            while (resultSet.next()) {
                int accountId = resultSet.getInt("AccountId");
                String dbTeamMemberId = resultSet.getString("TeamMemberId");

                responseString = responseString + i + "|";
                responseString = responseString + resultSet.getInt("AccountId") + "|";
                responseString = responseString + resultSet.getString("AccountName") + "|";
                if (teamName.equalsIgnoreCase("B2B")) {
                    responseString = responseString + resultSet.getInt("B2BPriority") + "|";
                }
                if (teamName.equalsIgnoreCase("BPM")) {
                    responseString = responseString + resultSet.getInt("BPMPriority") + "|";
                }
                if (teamName.equalsIgnoreCase("SAP")) {
                    responseString = responseString + resultSet.getInt("SAPPriority") + "|";
                }
                if (teamName.equalsIgnoreCase("E-Commerce")) {
                    responseString = responseString + resultSet.getInt("ECOMPriority") + "|";
                }
                if (teamName.equalsIgnoreCase("QA")) {
                    responseString = responseString + resultSet.getInt("QAPriority") + "|";
                }
                if (teamName.equalsIgnoreCase("Main")) {
                    responseString = responseString + resultSet.getInt("MainPriority") + "|";
                }
                //   if (tempTeamMemberId.equals("-1")) {
                responseString = responseString + dbTeamMemberId + "|";
                // }
//                if (teamMemberId.equals(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString())) {
//                    if (resultSet.getString("DateLastActivity") != null) {
//
//                        responseString = responseString + resultSet.getString("DateLastActivity").substring(0, 10) + "^";
//                        //System.out.println("responseString2---->"+responseString);
//                    } else {
//                        responseString = responseString + "-" + "^";
//                    }
//                } else {

                responseString = responseString + dataSourceDataProvider.getInstance().getdateLastActivityById(dbTeamMemberId, accountId);
                i++;
                isDataAvailable = true;
            }

            if (!isDataAvailable) {
                responseString = "no data";
            }
                 
                 }
           
                 
                   if(titleType.equals("BDM")){
                  //     System.out.println("in true case");
                       callableStatement = connection.prepareCall("{call spBdmAccountsListByPriority(?,?,?,?)}");
            // callableStatement.setString(1, spParameter);
       myTeamMembers=myTeamMembers.replaceAll("'", "");
                    //   System.out.println("myTeamMembers---->"+myTeamMembers);
            callableStatement.setString(1, myTeamMembers);
                    //   System.out.println("myTeamMembers---->"+myTeamMembers);
            callableStatement.setString(2, teamName);
                    //   System.out.println("teamName---->"+teamName);
            callableStatement.setString(3, loginId);
                   //    System.out.println("loginId---->"+loginId);
            callableStatement.registerOutParameter(4, Types.VARCHAR);
            

            callableStatement.executeQuery();
            String response=callableStatement.getString(4);
                //       System.out.println("response...."+response);
 stringBuffer.delete(0, stringBuffer.length());
            stringBuffer.append(callableStatement.getString(4));
         //   System.out.println("stringBuffer is---->"+stringBuffer.toString());
         //   System.out.println("stringBuffer is---->"+stringBuffer.toString());
                  
                   StringBuffer newString = new StringBuffer();
            if (!stringBuffer.toString().equals("Input String Length is Zero")) {
                // stringBuffer= stringBuffer.reverse();

                String data[] = stringBuffer.toString().split("\\^");
                if (data.length >= 1) {
                    for (i = data.length - 1; i >= 0; i--) {
                        newString.append(data[i] + "^");
                    }
                    String newadata[] = newString.toString().split("\\^");
                    String newInfo[];
                    List reportsList = new ArrayList();
                    for (i = 0; i < newadata.length; i++) {
                        // newInfo = newadata[i].split("\\|");
                        // reportsList.add(newadata[i].substring(newadata[i].indexOf('|')+1));
                        reportsList.add(newadata[i]);
                        //reportsMap.put(newInfo[1], newInfo[0]+"");
                    }
                    Collections.sort(reportsList);
                    StringBuffer finalData = new StringBuffer();
                    for (i = 0; i < reportsList.size(); i++) {
                        finalData.append((i + 1) + "|" + reportsList.get(i).toString() + "^");

                    }


                    stringBuffer = finalData;
                  //  System.out.println("finalData---->"+finalData);
                    responseString=stringBuffer.toString();
             //       System.out.println("responseString---->"+responseString);
                 //    System.out.println("newString-->"+stringBuffer);
                } else {
                    stringBuffer = new StringBuffer(1 + "|" + stringBuffer.toString());
                }

            }
                   }
                 
                 
                 

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        //System.out.println("responseString-->"+responseString);
        return responseString;
    }
    /*public String getBDMDashboardInfo(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        Connection connection = null;
        CallableStatement callableStatement = null;
        String activityDetails = "";
        int i = 0;
        String myTeamMembers = "";
        Map teamMembers = new TreeMap();
        //System.err.println(days+"Diff in Dyas...");
        try {
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            String endDate = DateUtility.getInstance().getDateByMonthYear(ajaxHandlerAction.getToMonth(), ajaxHandlerAction.getToYear());
            String startDate = DateUtility.getInstance().getDateLastMonthsByMonthYear(ajaxHandlerAction.getFromMonth(), ajaxHandlerAction.getFromYear(), 0);
//            System.out.println("startDate--->" + startDate);
//            System.out.println("endDate--->" + endDate);
//            System.out.println("accountId--->" + ajaxHandlerAction.getAccountId());
//            System.out.println("loginId--->" + loginId);
            String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(loginId);
            teamMembers = DataSourceDataProvider.getInstance().getMyTeamMembers(loginId, departmentId);
            Map myTeamMembersMap = new HashMap();
            myTeamMembersMap = ((Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP));
            myTeamMembersMap.put(loginId, loginId);
            myTeamMembers = DataSourceDataProvider.getInstance().getTeamLoginIdList(myTeamMembersMap);
//            if (teamMembers.size() > 0) {
//                myTeamMembers = getKeys(teamMembers, ",") + ",'" + loginId + "'";
//            } else {
//                myTeamMembers = "'" + loginId + "'";
//            }
            myTeamMembers = myTeamMembers.replaceAll("'", "");
            //System.out.println(myTeamMembers);
            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spBDEDashboardInfo(?,?,?,?,?,?,?,?)}");

            callableStatement.setDate(1, DateUtility.getInstance().getMysqlDate(startDate));
            callableStatement.setDate(2, DateUtility.getInstance().getMysqlDate(endDate));
            if (ajaxHandlerAction.getAccountId() == 0) {
                callableStatement.setString(3, "%%");
            } else {
                callableStatement.setString(3, ajaxHandlerAction.getAccountId() + "%");
            }
            callableStatement.setString(4, myTeamMembers);
            callableStatement.registerOutParameter(5, Types.VARCHAR);
            callableStatement.registerOutParameter(6, Types.VARCHAR);
            callableStatement.registerOutParameter(7, Types.VARCHAR);
            callableStatement.registerOutParameter(8, Types.VARCHAR);

            int updatedRows = callableStatement.executeUpdate();
            String accountStatus = callableStatement.getString(5);
            String oppertunitiesCount = callableStatement.getString(6);
            String requirementCount = callableStatement.getString(7);
            String greenSheetCount = callableStatement.getString(8);
//            System.out.println("accountStatus--->" + accountStatus);
//            System.out.println("oppertunitiesCount--->" + oppertunitiesCount);
//            System.out.println("requirementCount--->" + requirementCount);
//            System.out.println("greenSheetCount--->" + greenSheetCount);
            stringBuffer.append(accountStatus);
            stringBuffer.append("Addedto");
            stringBuffer.append(oppertunitiesCount);
            stringBuffer.append("Addedto");
            stringBuffer.append(requirementCount);
            stringBuffer.append("Addedto");
            stringBuffer.append(greenSheetCount);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {

                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return stringBuffer.toString();
    }*/
public String getBDMDashboardInfo(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        Connection connection = null;
        CallableStatement callableStatement = null;
        String activityDetails = "";
        int i = 0;
        String myTeamMembers = "";
        Map teamMembers = new TreeMap();
        //System.err.println(days+"Diff in Dyas...");
        try {
            //System.out.println("ajaxHandlerAction.getIncludeTeam()---->"+ajaxHandlerAction.getIncludeTeam());
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            String endDate = DateUtility.getInstance().getDateByMonthYear(ajaxHandlerAction.getToMonth(), ajaxHandlerAction.getToYear());
            String startDate = DateUtility.getInstance().getDateLastMonthsByMonthYear(ajaxHandlerAction.getFromMonth(), ajaxHandlerAction.getFromYear(), 0);
              String titleType = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE);
//            System.out.println("startDate--->" + startDate);
//            System.out.println("endDate--->" + endDate);
//            System.out.println("accountId--->" + ajaxHandlerAction.getAccountId());
//            System.out.println("loginId--->" + loginId);
            String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(loginId);
            teamMembers = DataSourceDataProvider.getInstance().getMyTeamMembers(loginId, departmentId);
            Map myTeamMembersMap = new HashMap();
          
                     // System.out.println("titleType is---->"+titleType);
                    if(titleType.equals("BDM")){
                       // System.out.println("in bdm case");
                            String empId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_ID).toString();   
                        //    System.out.println("empId is------->"+empId);
                         myTeamMembersMap = DataSourceDataProvider.getInstance().getBdmAssociateList(empId);
                        //  System.out.println("getMyTeamMembers() in if case----->"+myTeamMembersMap);
                    }
                    else{
                        myTeamMembersMap = ((Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP));
                       //  System.out.println("getMyTeamMembers() in else case----->"+myTeamMembersMap);
                        
                    }
            
            myTeamMembersMap.put(loginId, loginId);
          //  System.out.println("myTeamMembersMap----->"+myTeamMembersMap);
            myTeamMembers = DataSourceDataProvider.getInstance().getTeamLoginIdList(myTeamMembersMap);
           // System.out.println("myTeamMembers is---->"+myTeamMembers);
//            if (teamMembers.size() > 0) {
//                myTeamMembers = getKeys(teamMembers, ",") + ",'" + loginId + "'";
//            } else {
//                myTeamMembers = "'" + loginId + "'";
//            }
            myTeamMembers = myTeamMembers.replaceAll("'", "");
           // System.out.println(myTeamMembers);
            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spBDEDashboardInfo(?,?,?,?,?,?,?,?,?,?)}");

            callableStatement.setDate(1, DateUtility.getInstance().getMysqlDate(startDate));
           // System.out.println("DateUtility.getInstance().getMysqlDate(startDate)---->"+DateUtility.getInstance().getMysqlDate(startDate));
            callableStatement.setDate(2, DateUtility.getInstance().getMysqlDate(endDate));
           // System.out.println("DateUtility.getInstance().getMysqlDate(endDate)---->"+DateUtility.getInstance().getMysqlDate(endDate));
            if (ajaxHandlerAction.getAccountId() == 0) {
                callableStatement.setString(3, "%%");
              //  System.out.println("getAccountId()--->"+ajaxHandlerAction.getAccountId());
            } else {
                callableStatement.setString(3, ajaxHandlerAction.getAccountId() + "%");
              //  System.out.println("ajaxHandlerAction.getAccountId()%----->"+ajaxHandlerAction.getAccountId() + "%");
            }
            callableStatement.setString(4, myTeamMembers);
          //  System.out.println("myTeamMembers---->"+myTeamMembers);
            callableStatement.setString(5, titleType);
            callableStatement.setString(6, loginId);
           
            callableStatement.registerOutParameter(7, Types.VARCHAR);
            callableStatement.registerOutParameter(8, Types.VARCHAR);
            callableStatement.registerOutParameter(9, Types.VARCHAR);
            callableStatement.registerOutParameter(10, Types.VARCHAR);

            int updatedRows = callableStatement.executeUpdate();
            String accountStatus = callableStatement.getString(7);
            String oppertunitiesCount = callableStatement.getString(8);
            String requirementCount = callableStatement.getString(9);
            String greenSheetCount = callableStatement.getString(10);
//            System.out.println("accountStatus--->" + accountStatus);
//            System.out.println("oppertunitiesCount--->" + oppertunitiesCount);
//            System.out.println("requirementCount--->" + requirementCount);
//            System.out.println("greenSheetCount--->" + greenSheetCount);
            stringBuffer.append(accountStatus);
            stringBuffer.append("Addedto");
            stringBuffer.append(oppertunitiesCount);
            stringBuffer.append("Addedto");
            stringBuffer.append(requirementCount);
            stringBuffer.append("Addedto");
            stringBuffer.append(greenSheetCount);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {

                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return stringBuffer.toString();
    }
    public String getAccountNamesList(String query) throws ServiceLocatorException {
        boolean isGetting = false;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        StringBuffer sb = new StringBuffer();
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();

            int count = 0;
            sb.append("<xml version=\"1.0\">");
            sb.append("<ACCOUNTNAMES>");
            while (resultSet.next()) {
                sb.append("<ACCOUNTNAME><VALID>true</VALID>");
                sb.append("<ID>" + resultSet.getInt(1) + "</ID>");
                sb.append("<ACCNAME>" + resultSet.getString(2).replaceAll("&", "&amp;") + "</ACCNAME>");

                sb.append("</ACCOUNTNAME>");
                isGetting = true;
                count++;
            }
            if (!isGetting) {
                //sb.append("<CONSULTANTS>" + sb.toString() + "</CONSULTANTS>");
                //} else {
                isGetting = false;
                //nothing to show
                //  response.setStatus(HttpServletResponse.SC_NO_CONTENT);
                sb.append("<ACCOUNTNAME><VALID>false</VALID></ACCOUNTNAME>");
            }
            sb.append("</ACCOUNTNAMES>");
            sb.append("</xml>");
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        // System.out.println(sb.toString());
        return sb.toString();
    }

    public String getBDMDashboardRevenueInfo(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        Connection connection = null;
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        String responseString = "";
        String myTeamMembers = "";
        Map teamMembers = new TreeMap();

        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            String endDate = DateUtility.getInstance().getDateByMonthYear(ajaxHandlerAction.getToMonth(), ajaxHandlerAction.getToYear());
            String startDate = DateUtility.getInstance().getDateLastMonthsByMonthYear(ajaxHandlerAction.getFromMonth(), ajaxHandlerAction.getFromYear(), 0);
//            System.out.println("startDate--->" + startDate);
//            System.out.println("endDate--->" + endDate);
//            System.out.println("loginId--->" + loginId);
            connection = ConnectionProvider.getInstance().getConnection();
            // String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(loginId);
            //  teamMembers = DataSourceDataProvider.getInstance().getMyTeamMembers(loginId, departmentId);
//            if (teamMembers.size() > 0) {
//                myTeamMembers = getKeys(teamMembers, ",") + ",'" + loginId + "'";
//            } else {
//                myTeamMembers = "'" + loginId + "'";
//            }
            Map myTeamMembersMap = new HashMap();
            myTeamMembersMap = ((Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP));
            myTeamMembersMap.put(loginId, loginId);
            myTeamMembers = DataSourceDataProvider.getInstance().getTeamLoginIdList(myTeamMembersMap);

            queryString = " SELECT SUM(CASE WHEN (tblGreensheets.UnitsRate IS NOT NULL AND PoType='Services') THEN tblGreensheets.UnitsRate ELSE 0 END) AS Services,"
                    + "SUM(CASE WHEN (tblGreensheets.CustomerPrice IS NOT NULL AND PoType='FixedBid') THEN tblGreensheets.CustomerPrice ELSE 0 END) AS FixedBid,"
                    + "SUM(CASE WHEN (tblGreensheets.ProfitAmt IS NOT NULL AND PoType='Software') THEN tblGreensheets.ProfitAmt ELSE 0 END) AS Software,"
                    + " MONTH(tblGreensheets.DateCreated) AS months,YEAR(tblGreensheets.DateCreated) AS years "
                    + "FROM tblGreensheets LEFT JOIN tblCrmAccount ON(tblGreensheets.ConsultantId=tblCrmAccount.Id) LEFT JOIN tblCrmAccountTeam ON (tblCrmAccount.Id = tblCrmAccountTeam.AccountId) "
                    + "WHERE tblCrmAccountTeam.TeamMemberId IN (" + myTeamMembers + ")  AND (DATE(tblGreensheets.DateCreated)>='" + DateUtility.getInstance().getMysqlDate(startDate) + "' AND  DATE(tblGreensheets.DateCreated)<='" + DateUtility.getInstance().getMysqlDate(endDate) + "') ";
            if (ajaxHandlerAction.getAccountId() == 0) {
                queryString = queryString + "AND tblCrmAccount.Id LIKE '%%'";
            } else {
                queryString = queryString + "AND tblCrmAccount.Id LIKE '" + ajaxHandlerAction.getAccountId() + "%'";

            }
            queryString = queryString + " GROUP BY  YEAR(tblGreensheets.DateCreated),MONTH(tblGreensheets.DateCreated)";



            // System.out.println("queryString---" + queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            while (resultSet.next()) {
                responseString = responseString + resultSet.getInt("Services") + "#^$";
                responseString = responseString + resultSet.getInt("FixedBid") + "#^$";
                responseString = responseString + resultSet.getInt("Software") + "#^$";
                responseString = responseString + DateUtility.getInstance().getMonthNamebyMonthNumber(resultSet.getString("months")) + " " + resultSet.getString("years") + "*@!";

            }
            if (responseString.equals("")) {
                responseString = "addto0";
            }
            //System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public String getBDMDashboardOppertunitiesInfo(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        Connection connection = null;
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        String responseString = "";
        String myTeamMembers = "";
        Map teamMembers = new TreeMap();

        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            String endDate = DateUtility.getInstance().getDateByMonthYear(ajaxHandlerAction.getToMonth(), ajaxHandlerAction.getToYear());
            String startDate = DateUtility.getInstance().getDateLastMonthsByMonthYear(ajaxHandlerAction.getFromMonth(), ajaxHandlerAction.getFromYear(), 0);
//            System.out.println("startDate--->" + startDate);
//            System.out.println("endDate--->" + endDate);
//            System.out.println("loginId--->" + loginId);
            connection = ConnectionProvider.getInstance().getConnection();
//            String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(loginId);
//            teamMembers = DataSourceDataProvider.getInstance().getMyTeamMembers(loginId, departmentId);
//            if (teamMembers.size() > 0) {
//                myTeamMembers = getKeys(teamMembers, ",") + ",'" + loginId + "'";
//            } else {
//                myTeamMembers = "'" + loginId + "'";
//            }
            Map myTeamMembersMap = new HashMap();
            myTeamMembersMap = ((Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP));
            myTeamMembersMap.put(loginId, loginId);
            myTeamMembers = DataSourceDataProvider.getInstance().getTeamLoginIdList(myTeamMembersMap);
            queryString = " SELECT COUNT(tblCrmOpportunity.Id) AS oppertunityCount,MONTH(tblCrmOpportunity.CreatedDate) AS months,YEAR(tblCrmOpportunity.CreatedDate) AS years "
                    + "FROM tblCrmOpportunity LEFT JOIN tblCrmAccount ON(tblCrmOpportunity.AccountId=tblCrmAccount.Id) LEFT JOIN tblCrmAccountTeam ON (tblCrmAccount.Id = tblCrmAccountTeam.AccountId) "
                    + "WHERE tblCrmAccountTeam.TeamMemberId IN (" + myTeamMembers + ")  AND (DATE(tblCrmOpportunity.CreatedDate)>='" + DateUtility.getInstance().getMysqlDate(startDate) + "' AND  DATE(tblCrmOpportunity.CreatedDate)<='" + DateUtility.getInstance().getMysqlDate(endDate) + "') ";
            if (ajaxHandlerAction.getAccountId() == 0) {
                queryString = queryString + "AND tblCrmAccount.Id LIKE '%%'";
            } else {
                queryString = queryString + "AND tblCrmAccount.Id LIKE '" + ajaxHandlerAction.getAccountId() + "%'";

            }
            queryString = queryString + " GROUP BY  YEAR(tblCrmOpportunity.CreatedDate),MONTH(tblCrmOpportunity.CreatedDate)";


            //System.out.println("queryString---" + queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            while (resultSet.next()) {
                responseString = responseString + resultSet.getInt("oppertunityCount") + "#^$";
                responseString = responseString + DateUtility.getInstance().getMonthNamebyMonthNumber(resultSet.getString("months")) + " " + resultSet.getString("years") + "*@!";
            }
            if (responseString.equals("")) {
                responseString = "addto0";
            }
            //System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

   /* public String getOpportunitesByPractice(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        Connection connection = null;
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        String responseString = "";
        String myTeamMembers = "";
        Map teamMembers = new TreeMap();

        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            String endDate = DateUtility.getInstance().getDateByMonthYear(ajaxHandlerAction.getToMonth(), ajaxHandlerAction.getToYear());
            String startDate = DateUtility.getInstance().getDateLastMonthsByMonthYear(ajaxHandlerAction.getFromMonth(), ajaxHandlerAction.getFromYear(), 0);
//            System.out.println("startDate--->" + startDate);
//            System.out.println("endDate--->" + endDate);
//            System.out.println("loginId--->" + loginId);
            connection = ConnectionProvider.getInstance().getConnection();
//            String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(loginId);
//            teamMembers = DataSourceDataProvider.getInstance().getMyTeamMembers(loginId, departmentId);
//            if (teamMembers.size() > 0) {
//                myTeamMembers = getKeys(teamMembers, ",") + ",'" + loginId + "'";
//            } else {
//                myTeamMembers = "'" + loginId + "'";
//            }
            Map myTeamMembersMap = new HashMap();
            myTeamMembersMap = ((Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP));
            myTeamMembersMap.put(loginId, loginId);
            myTeamMembers = DataSourceDataProvider.getInstance().getTeamLoginIdList(myTeamMembersMap);
            queryString = "SELECT COUNT(distinct(tblCrmOpportunity.Id)) AS total,tblCrmOpportunity.TYPE AS TYPE"
                    + " FROM tblCrmOpportunity LEFT JOIN tblCrmAccount ON (tblCrmOpportunity.AccountId=tblCrmAccount.Id) "
                    + " LEFT JOIN tblCrmAccountTeam ON (tblCrmAccount.Id =tblCrmAccountTeam.AccountId)  "
                    + " LEFT JOIN tblCrmAddress ON (tblCrmAddress.Id = tblCrmAccount.PrimaryAddressId)  "
                    + " LEFT JOIN tblCrmAccountDetails ON ( tblCrmAccountDetails.AccountId = tblCrmAccount.Id)   "
                    + " WHERE tblCrmAccountTeam.TeamMemberId IN  (" + myTeamMembers + ") AND "
                    + "(DATE(tblCrmOpportunity.CreatedDate)>='" + DateUtility.getInstance().getMysqlDate(startDate) + "' AND  "
                    + "DATE(tblCrmOpportunity.CreatedDate)<='" + DateUtility.getInstance().getMysqlDate(endDate) + "') ";

//            if (!"".equals(ajaxHandlerAction.getPracticeName())) {
//                queryString = queryString + "AND tblCrmOpportunity.Practice LIKE '" + ajaxHandlerAction.getPracticeName() + "%'";
//            }
            queryString = queryString + "  ";
            queryString = queryString + " GROUP BY tblCrmOpportunity.Type";



            // System.out.println("queryString---" + queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            while (resultSet.next()) {
                responseString = responseString + resultSet.getString("Type") + "#^$";
                responseString = responseString + resultSet.getInt("total") + "*@!";

            }
            if (responseString.equals("")) {
                responseString = "addto0";
            }
            //System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }*/
public String getOpportunitesByPractice(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
     //   System.out.println("in getOpportunitesByPractice() of service impl");
        stringBuffer = new StringBuffer();
        Connection connection = null;
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        String responseString = "";
        String myTeamMembers = "";
        Map teamMembers = new TreeMap();
 CallableStatement callableStatement = null;
        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
              String titleType = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE);
            String endDate = DateUtility.getInstance().getDateByMonthYear(ajaxHandlerAction.getToMonth(), ajaxHandlerAction.getToYear());
            String startDate = DateUtility.getInstance().getDateLastMonthsByMonthYear(ajaxHandlerAction.getFromMonth(), ajaxHandlerAction.getFromYear(), 0);
//            System.out.println("startDate--->" + startDate);
//            System.out.println("endDate--->" + endDate);
          
            connection = ConnectionProvider.getInstance().getConnection();
//            String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(loginId);
//            teamMembers = DataSourceDataProvider.getInstance().getMyTeamMembers(loginId, departmentId);
//            if (teamMembers.size() > 0) {
//                myTeamMembers = getKeys(teamMembers, ",") + ",'" + loginId + "'";
//            } else {
//                myTeamMembers = "'" + loginId + "'";
//            }
            Map myTeamMembersMap = new HashMap();
          
            if(titleType.equals("BDM")){
                String empId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_ID).toString();  
                myTeamMembersMap = DataSourceDataProvider.getInstance().getBdmAssociateList(empId);
              //   System.out.println("myTeamMembersMap in if case is---->"+myTeamMembersMap);
            }
            else{
       myTeamMembersMap = ((Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP));
            //    System.out.println("myTeamMembersMap in else case is---->"+myTeamMembersMap);
}
         
            myTeamMembersMap.put(loginId, loginId);
            myTeamMembers = DataSourceDataProvider.getInstance().getTeamLoginIdList(myTeamMembersMap);
         //   System.out.println("myTeamMembers is----------->"+myTeamMembers);
            if(!titleType.equals("BDM")){
            queryString = "SELECT COUNT(distinct(tblCrmOpportunity.Id)) AS total,tblCrmOpportunity.TYPE AS TYPE"
                    + " FROM tblCrmOpportunity LEFT JOIN tblCrmAccount ON (tblCrmOpportunity.AccountId=tblCrmAccount.Id) "
                    + " LEFT JOIN tblCrmAccountTeam ON (tblCrmAccount.Id =tblCrmAccountTeam.AccountId)  "
                    + " LEFT JOIN tblCrmAddress ON (tblCrmAddress.Id = tblCrmAccount.PrimaryAddressId)  "
                    + " LEFT JOIN tblCrmAccountDetails ON ( tblCrmAccountDetails.AccountId = tblCrmAccount.Id)   "
//                    + " WHERE tblCrmAccountTeam.TeamMemberId IN  (" + myTeamMembers + ") AND "
                    +  " WHERE (DATE(tblCrmOpportunity.CreatedDate)>='" + DateUtility.getInstance().getMysqlDate(startDate) + "' AND  "
                    + "DATE(tblCrmOpportunity.CreatedDate)<='" + DateUtility.getInstance().getMysqlDate(endDate) + "') AND ";

//            if (!"".equals(ajaxHandlerAction.getPracticeName())) {
//                queryString = queryString + "AND tblCrmOpportunity.Practice LIKE '" + ajaxHandlerAction.getPracticeName() + "%'";
//            }
             
//                  queryString = queryString + " tblCrmOpportunity.CreatedBy IN  (" + myTeamMembers + ") ";
             
            
                  queryString = queryString + " tblCrmAccountTeam.TeamMemberId IN  (" + myTeamMembers + ") ";
             
            queryString = queryString + "  ";
            queryString = queryString + " GROUP BY tblCrmOpportunity.Type";



           //  System.out.println("queryString---" + queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            while (resultSet.next()) {
                responseString = responseString + resultSet.getString("Type") + "#^$";
                responseString = responseString + resultSet.getInt("total") + "*@!";

            }
            
            }
            
            
           
            
            
         if(titleType.equals("BDM")){
         //    System.out.println("in BDM case");
                connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spBDMOppurtunitiesByPractice(?,?,?,?,?,?,?)}");

            callableStatement.setDate(1, DateUtility.getInstance().getMysqlDate(startDate));
          //  System.out.println("DateUtility.getInstance().getMysqlDate(startDate)---->"+DateUtility.getInstance().getMysqlDate(startDate));
            callableStatement.setDate(2, DateUtility.getInstance().getMysqlDate(endDate));
         //   System.out.println("DateUtility.getInstance().getMysqlDate(endDate)---->"+DateUtility.getInstance().getMysqlDate(endDate));
//            if (ajaxHandlerAction.getAccountId() == 0) {
//                callableStatement.setString(3, "%%");
//                System.out.println("getAccountId()--->"+ajaxHandlerAction.getAccountId());
//            } else {
//                callableStatement.setString(3, ajaxHandlerAction.getAccountId() + "%");
//                System.out.println("ajaxHandlerAction.getAccountId()%----->"+ajaxHandlerAction.getAccountId() + "%");
//            }
            //  System.out.println("myTeamMembers before is----->"+myTeamMembers);
            myTeamMembers=myTeamMembers.replaceAll("'", "");
          //   System.out.println("myTeamMembers after is----->"+myTeamMembers);
            callableStatement.setString(3, myTeamMembers);
         //   System.out.println("myTeamMembers---->"+myTeamMembers);
            callableStatement.setString(4, loginId);
            callableStatement.registerOutParameter(5, Types.VARCHAR);
            callableStatement.registerOutParameter(6, Types.VARCHAR);
            callableStatement.registerOutParameter(7, Types.VARCHAR);
           
            int updatedRows = callableStatement.executeUpdate();
            stringBuffer.append(callableStatement.getString(5));
           //  System.out.println("stringBuffer.toString()------->"+stringBuffer.toString());
          responseString= callableStatement.getString(5);
           
         //   System.out.println("responseString--->" + responseString);
             
         }   
            
            if (responseString.equals("")) {
                responseString = "addto0";
            }
            //System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

   /* public String getRequirementsByPractice(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        Connection connection = null;
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        String responseString = "";
        String myTeamMembers = "";
        Map teamMembers = new TreeMap();

        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            String endDate = DateUtility.getInstance().getDateByMonthYear(ajaxHandlerAction.getToMonth(), ajaxHandlerAction.getToYear());
            String startDate = DateUtility.getInstance().getDateLastMonthsByMonthYear(ajaxHandlerAction.getFromMonth(), ajaxHandlerAction.getFromYear(), 0);
//            System.out.println("startDate--->" + startDate);
//            System.out.println("endDate--->" + endDate);
//            System.out.println("loginId--->" + loginId);
            connection = ConnectionProvider.getInstance().getConnection();
//            String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(loginId);
//            teamMembers = DataSourceDataProvider.getInstance().getMyTeamMembers(loginId, departmentId);
//            if (teamMembers.size() > 0) {
//                myTeamMembers = getKeys(teamMembers, ",") + ",'" + loginId + "'";
//            } else {
//                myTeamMembers = "'" + loginId + "'";
//            }
            Map myTeamMembersMap = new HashMap();
            myTeamMembersMap = ((Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP));
            myTeamMembersMap.put(loginId, loginId);
            myTeamMembers = DataSourceDataProvider.getInstance().getTeamLoginIdList(myTeamMembersMap);
            queryString = "SELECT COUNT(DISTINCT tblRecRequirement.Id) AS requirements,tblRecRequirement.Practice AS Practice"
                    + " FROM tblRecRequirement LEFT JOIN tblCrmAccountTeam ON "
                    + "(tblRecRequirement.CustomerId=tblCrmAccountTeam.AccountId) "
                    + "WHERE tblRecRequirement.CreatedBy IN (" + myTeamMembers + ") AND "
                    + "(DATE(tblRecRequirement.DatePosted)>='" + DateUtility.getInstance().getMysqlDate(startDate) + "' AND  "
                    + "DATE(tblRecRequirement.DatePosted)<='" + DateUtility.getInstance().getMysqlDate(endDate) + "') AND "
                    + "Practice NOT LIKE '-1' ";


//            if (!" ".equals(ajaxHandlerAction.getPracticeName())) {
//                queryString = queryString + "AND tblRecRequirement.Practice LIKE '" + ajaxHandlerAction.getPracticeName() + "%'";
//            }
            queryString = queryString + " GROUP BY Practice";



            // System.out.println("queryString---" + queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            while (resultSet.next()) {
                responseString = responseString + resultSet.getString("Practice") + "#^$";
                responseString = responseString + resultSet.getInt("requirements") + "*@!";

            }
            if (responseString.equals("")) {
                responseString = "addto0";
            }
            //System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }*/

    /*public String getgreenSheetsDetailsByPractice(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        Connection connection = null;
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        String responseString = "";
        String myTeamMembers = "";
        Map teamMembers = new TreeMap();

        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            String endDate = DateUtility.getInstance().getDateByMonthYear(ajaxHandlerAction.getToMonth(), ajaxHandlerAction.getToYear());
            String startDate = DateUtility.getInstance().getDateLastMonthsByMonthYear(ajaxHandlerAction.getFromMonth(), ajaxHandlerAction.getFromYear(), 0);
//            System.out.println("startDate--->" + startDate);
//            System.out.println("endDate--->" + endDate);
//            System.out.println("loginId--->" + loginId);
            connection = ConnectionProvider.getInstance().getConnection();
//            String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(loginId);
//            teamMembers = DataSourceDataProvider.getInstance().getMyTeamMembers(loginId, departmentId);
//            if (teamMembers.size() > 0) {
//                myTeamMembers = getKeys(teamMembers, ",") + ",'" + loginId + "'";
//            } else {
//                myTeamMembers = "'" + loginId + "'";
//            }
            Map myTeamMembersMap = new HashMap();
            myTeamMembersMap = ((Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP));
            myTeamMembersMap.put(loginId, loginId);
            myTeamMembers = DataSourceDataProvider.getInstance().getTeamLoginIdList(myTeamMembersMap);
            queryString = "SELECT tblGreensheets.PoType,COUNT(DISTINCT tblGreensheets.Id) AS greenSheetCount "
                    + "FROM tblGreensheets LEFT JOIN tblCrmAccountTeam ON "
                    + "(tblGreensheets.ConsultantId=tblCrmAccountTeam.AccountId) "
                    + "WHERE tblGreensheets.RecordType=1 and tblGreensheets.CreatedBy IN (" + myTeamMembers + ") AND "
                    + "(DATE(tblGreensheets.DateCreated)>='" + DateUtility.getInstance().getMysqlDate(startDate) + "' AND"
                    + " DATE(tblGreensheets.DateCreated)<='" + DateUtility.getInstance().getMysqlDate(endDate) + "')  "
                    + " GROUP BY  tblGreensheets.PoType ";

            // System.out.println("green countqueryString---" + queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            while (resultSet.next()) {
                responseString = responseString + resultSet.getString("PoType") + "#^$";
                responseString = responseString + resultSet.getInt("greenSheetCount") + "*@!";

            }
            if (responseString.equals("")) {
                responseString = "addto0";
            }

            // System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }*/
public String getRequirementsByPractice(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        Connection connection = null;
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        String responseString = "";
        String myTeamMembers = "";
        Map teamMembers = new TreeMap();
 CallableStatement callableStatement = null;
        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            String titleType = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE);
            String endDate = DateUtility.getInstance().getDateByMonthYear(ajaxHandlerAction.getToMonth(), ajaxHandlerAction.getToYear());
            String startDate = DateUtility.getInstance().getDateLastMonthsByMonthYear(ajaxHandlerAction.getFromMonth(), ajaxHandlerAction.getFromYear(), 0);
//            System.out.println("startDate--->" + startDate);
//            System.out.println("endDate--->" + endDate);
          
            connection = ConnectionProvider.getInstance().getConnection();
//            String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(loginId);
//            teamMembers = DataSourceDataProvider.getInstance().getMyTeamMembers(loginId, departmentId);
//            if (teamMembers.size() > 0) {
//                myTeamMembers = getKeys(teamMembers, ",") + ",'" + loginId + "'";
//            } else {
//                myTeamMembers = "'" + loginId + "'";
//            }
            Map myTeamMembersMap = new HashMap();
            
            if(titleType.equals("BDM")){
                String empId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_ID).toString();  
                myTeamMembersMap = DataSourceDataProvider.getInstance().getBdmAssociateList(empId);
               //  System.out.println("myTeamMembersMap in if case is---->"+myTeamMembersMap);
            }
            else{
       myTeamMembersMap = ((Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP));
              //  System.out.println("myTeamMembersMap in else case is---->"+myTeamMembersMap);
}
         
            myTeamMembersMap.put(loginId, loginId);
            myTeamMembers = DataSourceDataProvider.getInstance().getTeamLoginIdList(myTeamMembersMap);
           // System.out.println("myTeamMembers is----------->"+myTeamMembers);
//            myTeamMembersMap = ((Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP));
//            myTeamMembersMap.put(loginId, loginId);
//            myTeamMembers = DataSourceDataProvider.getInstance().getTeamLoginIdList(myTeamMembersMap);
          if(!titleType.equals("BDM")){
            queryString = "SELECT COUNT(DISTINCT tblRecRequirement.Id) AS requirements,tblRecRequirement.Practice AS Practice"
                    + " FROM tblRecRequirement LEFT JOIN tblCrmAccountTeam ON "
                    + "(tblRecRequirement.CustomerId=tblCrmAccountTeam.AccountId) "
                    + "WHERE tblRecRequirement.CreatedBy IN (" + myTeamMembers + ") AND "
                    + "(DATE(tblRecRequirement.DatePosted)>='" + DateUtility.getInstance().getMysqlDate(startDate) + "' AND  "
                    + "DATE(tblRecRequirement.DatePosted)<='" + DateUtility.getInstance().getMysqlDate(endDate) + "') AND "
                    + "Practice NOT LIKE '-1' ";


//            if (!" ".equals(ajaxHandlerAction.getPracticeName())) {
//                queryString = queryString + "AND tblRecRequirement.Practice LIKE '" + ajaxHandlerAction.getPracticeName() + "%'";
//            }
            queryString = queryString + " GROUP BY Practice";



           //  System.out.println("queryString---" + queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            while (resultSet.next()) {
                responseString = responseString + resultSet.getString("Practice") + "#^$";
                responseString = responseString + resultSet.getInt("requirements") + "*@!";

            }
          }
          
          
          
          if(titleType.equals("BDM")){
           //  System.out.println("in BDM case");
                connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spBDMOppurtunitiesByPractice(?,?,?,?,?,?,?)}");

            callableStatement.setDate(1, DateUtility.getInstance().getMysqlDate(startDate));
          //  System.out.println("DateUtility.getInstance().getMysqlDate(startDate)---->"+DateUtility.getInstance().getMysqlDate(startDate));
            callableStatement.setDate(2, DateUtility.getInstance().getMysqlDate(endDate));
          //  System.out.println("DateUtility.getInstance().getMysqlDate(endDate)---->"+DateUtility.getInstance().getMysqlDate(endDate));
//            if (ajaxHandlerAction.getAccountId() == 0) {
//                callableStatement.setString(3, "%%");
//                System.out.println("getAccountId()--->"+ajaxHandlerAction.getAccountId());
//            } else {
//                callableStatement.setString(3, ajaxHandlerAction.getAccountId() + "%");
//                System.out.println("ajaxHandlerAction.getAccountId()%----->"+ajaxHandlerAction.getAccountId() + "%");
//            }
          //    System.out.println("myTeamMembers before is----->"+myTeamMembers);
            myTeamMembers=myTeamMembers.replaceAll("'", "");
          //   System.out.println("myTeamMembers after is----->"+myTeamMembers);
            callableStatement.setString(3, myTeamMembers);
          //  System.out.println("myTeamMembers---->"+myTeamMembers);
            callableStatement.setString(4, loginId);
            callableStatement.registerOutParameter(5, Types.VARCHAR);
            callableStatement.registerOutParameter(6, Types.VARCHAR);
            callableStatement.registerOutParameter(7, Types.VARCHAR);
           
            int updatedRows = callableStatement.executeUpdate();
            stringBuffer.append(callableStatement.getString(6));
            // System.out.println("stringBuffer.toString()------->"+stringBuffer.toString());
          responseString= callableStatement.getString(6);
           
          //  System.out.println("responseString--->" + responseString);
             
         }
            if (responseString.equals("")) {
                responseString = "addto0";
            }
            //System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

public String getgreenSheetsDetailsByPractice(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        Connection connection = null;
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        String responseString = "";
        String myTeamMembers = "";
        Map teamMembers = new TreeMap();
CallableStatement callableStatement = null;
        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
             String titleType = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE);
            String endDate = DateUtility.getInstance().getDateByMonthYear(ajaxHandlerAction.getToMonth(), ajaxHandlerAction.getToYear());
            String startDate = DateUtility.getInstance().getDateLastMonthsByMonthYear(ajaxHandlerAction.getFromMonth(), ajaxHandlerAction.getFromYear(), 0);
//            System.out.println("startDate--->" + startDate);
//            System.out.println("endDate--->" + endDate);
  
            connection = ConnectionProvider.getInstance().getConnection();
//            String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(loginId);
//            teamMembers = DataSourceDataProvider.getInstance().getMyTeamMembers(loginId, departmentId);
//            if (teamMembers.size() > 0) {
//                myTeamMembers = getKeys(teamMembers, ",") + ",'" + loginId + "'";
//            } else {
//                myTeamMembers = "'" + loginId + "'";
//            }
            Map myTeamMembersMap = new HashMap();
           if(titleType.equals("BDM")){
                String empId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_ID).toString();  
                myTeamMembersMap = DataSourceDataProvider.getInstance().getBdmAssociateList(empId);
             //    System.out.println("myTeamMembersMap in if case is---->"+myTeamMembersMap);
            }
            else{
       myTeamMembersMap = ((Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP));
            //    System.out.println("myTeamMembersMap in else case is---->"+myTeamMembersMap);
}
         
            myTeamMembersMap.put(loginId, loginId);
            myTeamMembers = DataSourceDataProvider.getInstance().getTeamLoginIdList(myTeamMembersMap);
         //   System.out.println("myTeamMembers is----------->"+myTeamMembers);
            if(!titleType.equals("BDM")){
            queryString = "SELECT tblGreensheets.PoType,COUNT(DISTINCT tblGreensheets.Id) AS greenSheetCount "
                    + "FROM tblGreensheets LEFT JOIN tblCrmAccountTeam ON "
                    + "(tblGreensheets.ConsultantId=tblCrmAccountTeam.AccountId) "
                    + "WHERE tblGreensheets.RecordType=1 and tblGreensheets.CreatedBy IN (" + myTeamMembers + ") AND "
                    + "(DATE(tblGreensheets.DateCreated)>='" + DateUtility.getInstance().getMysqlDate(startDate) + "' AND"
                    + " DATE(tblGreensheets.DateCreated)<='" + DateUtility.getInstance().getMysqlDate(endDate) + "')  "
                    + " GROUP BY  tblGreensheets.PoType ";

           //  System.out.println("green countqueryString---" + queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            while (resultSet.next()) {
                responseString = responseString + resultSet.getString("PoType") + "#^$";
                responseString = responseString + resultSet.getInt("greenSheetCount") + "*@!";
            }
            }
            
           
            
           if(titleType.equals("BDM")){
           //  System.out.println("in BDM case");
                connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spBDMOppurtunitiesByPractice(?,?,?,?,?,?,?)}");

            callableStatement.setDate(1, DateUtility.getInstance().getMysqlDate(startDate));
         //   System.out.println("DateUtility.getInstance().getMysqlDate(startDate)---->"+DateUtility.getInstance().getMysqlDate(startDate));
            callableStatement.setDate(2, DateUtility.getInstance().getMysqlDate(endDate));
         //   System.out.println("DateUtility.getInstance().getMysqlDate(endDate)---->"+DateUtility.getInstance().getMysqlDate(endDate));
//            if (ajaxHandlerAction.getAccountId() == 0) {
//                callableStatement.setString(3, "%%");
//                System.out.println("getAccountId()--->"+ajaxHandlerAction.getAccountId());
//            } else {
//                callableStatement.setString(3, ajaxHandlerAction.getAccountId() + "%");
//                System.out.println("ajaxHandlerAction.getAccountId()%----->"+ajaxHandlerAction.getAccountId() + "%");
//            }
           //   System.out.println("myTeamMembers before is----->"+myTeamMembers);
            myTeamMembers=myTeamMembers.replaceAll("'", "");
          //   System.out.println("myTeamMembers after is----->"+myTeamMembers);
            callableStatement.setString(3, myTeamMembers);
            System.out.println("myTeamMembers---->"+myTeamMembers);
            callableStatement.setString(4, loginId);
            callableStatement.registerOutParameter(5, Types.VARCHAR);
            callableStatement.registerOutParameter(6, Types.VARCHAR);
            callableStatement.registerOutParameter(7, Types.VARCHAR);
           
            int updatedRows = callableStatement.executeUpdate();
            stringBuffer.append(callableStatement.getString(7));
          //   System.out.println("stringBuffer.toString()------->"+stringBuffer.toString());
          responseString= callableStatement.getString(7);
           
         //   System.out.println("responseString--->" + responseString);
             
         } 
            
            
            
            if (responseString.equals("")) {
                responseString = "addto0";
            }

            // System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

   /* public String getOpportunitiesDetailsByPractice(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        Connection connection = null;
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        String responseString = "";
        String myTeamMembers = "";
        Map teamMembers = new TreeMap();

        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            String endDate = DateUtility.getInstance().getDateByMonthYear(ajaxHandlerAction.getToMonth(), ajaxHandlerAction.getToYear());
            String startDate = DateUtility.getInstance().getDateLastMonthsByMonthYear(ajaxHandlerAction.getFromMonth(), ajaxHandlerAction.getFromYear(), 0);
//            System.out.println("startDate--->" + startDate);
//            System.out.println("endDate--->" + endDate);
//            System.out.println("loginId--->" + loginId);
            connection = ConnectionProvider.getInstance().getConnection();
//            String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(loginId);
//            teamMembers = DataSourceDataProvider.getInstance().getMyTeamMembers(loginId, departmentId);
//            if (teamMembers.size() > 0) {
//                myTeamMembers = getKeys(teamMembers, ",") + ",'" + loginId + "'";
//            } else {
//                myTeamMembers = "'" + loginId + "'";
//            }
            Map myTeamMembersMap = new HashMap();
            myTeamMembersMap = ((Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP));
            myTeamMembersMap.put(loginId, loginId);
            myTeamMembers = DataSourceDataProvider.getInstance().getTeamLoginIdList(myTeamMembersMap);
            queryString = "SELECT distinct(tblCrmOpportunity.id),tblCrmOpportunity.Title,CASE WHEN tblCrmAccount.NAME IS NOT NULL THEN tblCrmAccount.NAME ELSE '' END AS AccountName,tblCrmOpportunity.CreatedBy,"
                    + "DATE(tblCrmOpportunity.CreatedDate) AS CreatedDate,DATE(tblCrmOpportunity.DueDate) AS  DueDate,tblCrmAddress.state,tblCrmOpportunity.Practice "
                    + " FROM tblCrmOpportunity LEFT JOIN tblCrmAccount ON (tblCrmOpportunity.AccountId=tblCrmAccount.Id) "
                    + " LEFT JOIN tblCrmAccountTeam ON (tblCrmAccount.Id =tblCrmAccountTeam.AccountId)  "
                    + " LEFT JOIN tblCrmAddress ON (tblCrmAddress.Id = tblCrmAccount.PrimaryAddressId)  "
                    + " LEFT JOIN tblCrmAccountDetails ON ( tblCrmAccountDetails.AccountId = tblCrmAccount.Id)   "
                    + " WHERE tblCrmAccountTeam.TeamMemberId IN  (" + myTeamMembers + ") AND "
                    + "(DATE(tblCrmOpportunity.CreatedDate)>='" + DateUtility.getInstance().getMysqlDate(startDate) + "' AND  "
                    + "DATE(tblCrmOpportunity.CreatedDate)<='" + DateUtility.getInstance().getMysqlDate(endDate) + "') ";
            if (!" ".equals(ajaxHandlerAction.getPracticeName())) {
                queryString = queryString + "AND tblCrmOpportunity.Type LIKE '" + ajaxHandlerAction.getPracticeName() + "%'";
            }
            queryString = queryString + "  ORDER BY tblCrmAccountTeam.TeamMemberId asc,tblCrmAccount.state asc,tblCrmAccount.NAME asc,tblCrmOpportunity.DueDate DESC  limit 250";



//            queryString = "SELECT  tblCrmOpportunity.id,tblCrmOpportunity.Title,CASE WHEN tblCrmAccount.NAME IS NOT NULL THEN tblCrmAccount.NAME ELSE '' END AS AccountName,tblCrmOpportunity.CreatedBy,"
//                    + "DATE(tblCrmOpportunity.CreatedDate) AS CreatedDate,DATE(tblCrmOpportunity.DueDate) AS  DueDate,tblCrmAccount.state FROM tblCrmOpportunity "
//                    + " LEFT JOIN tblCrmAccount ON (tblCrmAccount.Id = tblCrmOpportunity.AccountId) "
//                    + " WHERE tblCrmOpportunity.CreatedBy IN  (" + myTeamMembers + ") AND "
//                    + "(DATE(tblCrmOpportunity.CreatedDate)>='" + DateUtility.getInstance().getMysqlDate(startDate) + "' AND  "
//                    + "DATE(tblCrmOpportunity.CreatedDate)<='" + DateUtility.getInstance().getMysqlDate(endDate) + "') ";
//            if (!" ".equals(ajaxHandlerAction.getPracticeName())) {
//                queryString = queryString + "AND tblCrmOpportunity.Type LIKE '" + ajaxHandlerAction.getPracticeName() + "%'";
//            }
//            queryString = queryString + "  ORDER BY tblCrmOpportunity.CreatedBy,tblCrmAccount.state,tblCrmAccount.NAME,tblCrmOpportunity.DueDate DESC  limit 250";
//



            //System.out.println("queryString---" + queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            int count = 0;
            while (resultSet.next()) {
                count++;
                responseString = responseString + count + "#^$";
                responseString = responseString + resultSet.getString("CreatedBy") + "#^$";
                responseString = responseString + resultSet.getString("AccountName") + "#^$";
                responseString = responseString + resultSet.getString("Title") + "#^$";
                responseString = responseString + resultSet.getString("Practice") + "#^$";
                responseString = responseString + resultSet.getString("state") + "#^$";

                if (resultSet.getString("CreatedDate") == null) {
                    responseString = responseString + "_" + "#^$";
                } else {
                    responseString = responseString + resultSet.getString("CreatedDate").substring(0, 10) + "#^$";
                }
                if (resultSet.getString("DueDate") == null) {
                    responseString = responseString + "_" + "*@!";
                } else {
                    responseString = responseString + resultSet.getString("DueDate").substring(0, 10) + "*@!";
                }



            }
            if (responseString.equals("")) {
                responseString = "addto0";
            }

            //System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }*/
 public String getOpportunitiesDetailsByPractice(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        Connection connection = null;
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        String responseString = "";
        String myTeamMembers = "";
        Map teamMembers = new TreeMap();
CallableStatement callableStatement = null;
        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            String endDate = DateUtility.getInstance().getDateByMonthYear(ajaxHandlerAction.getToMonth(), ajaxHandlerAction.getToYear());
            String startDate = DateUtility.getInstance().getDateLastMonthsByMonthYear(ajaxHandlerAction.getFromMonth(), ajaxHandlerAction.getFromYear(), 0);
             String titleType = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE);
                 String empId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_ID).toString();  
//            System.out.println("startDate--->" + startDate);
//            System.out.println("endDate--->" + endDate);
          
            connection = ConnectionProvider.getInstance().getConnection();
//            String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(loginId);
//            teamMembers = DataSourceDataProvider.getInstance().getMyTeamMembers(loginId, departmentId);
//            if (teamMembers.size() > 0) {
//                myTeamMembers = getKeys(teamMembers, ",") + ",'" + loginId + "'";
//            } else {
//                myTeamMembers = "'" + loginId + "'";
//            }
               Map myTeamMembersMap = new HashMap();
                    if(titleType.equals("BDM")){
                         
                         myTeamMembersMap = DataSourceDataProvider.getInstance().getBdmAssociateList(empId);
                    }
                    else{
                          myTeamMembersMap = ((Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP));
                    }
          
            myTeamMembersMap.put(loginId, loginId);
            myTeamMembers = DataSourceDataProvider.getInstance().getTeamLoginIdList(myTeamMembersMap);
             if(!titleType.equals("BDM")){
            queryString = "SELECT distinct(tblCrmOpportunity.id),tblCrmOpportunity.Title,CASE WHEN tblCrmAccount.NAME IS NOT NULL THEN tblCrmAccount.NAME ELSE '' END AS AccountName,tblCrmOpportunity.CreatedBy,"
                    + "DATE(tblCrmOpportunity.CreatedDate) AS CreatedDate,DATE(tblCrmOpportunity.DueDate) AS  DueDate,tblCrmAddress.state,tblCrmOpportunity.Practice "
                    + " FROM tblCrmOpportunity LEFT JOIN tblCrmAccount ON (tblCrmOpportunity.AccountId=tblCrmAccount.Id) "
                    + " LEFT JOIN tblCrmAccountTeam ON (tblCrmAccount.Id =tblCrmAccountTeam.AccountId)  "
                    + " LEFT JOIN tblCrmAddress ON (tblCrmAddress.Id = tblCrmAccount.PrimaryAddressId)  "
                    + " LEFT JOIN tblCrmAccountDetails ON ( tblCrmAccountDetails.AccountId = tblCrmAccount.Id)   "
//                    + " WHERE tblCrmAccountTeam.TeamMemberId IN  (" + myTeamMembers + ") AND "
                    + " WHERE (DATE(tblCrmOpportunity.CreatedDate)>='" + DateUtility.getInstance().getMysqlDate(startDate) + "' AND  "
                    + "DATE(tblCrmOpportunity.CreatedDate)<='" + DateUtility.getInstance().getMysqlDate(endDate) + "') ";
            
//            
//            if(titleType.equals("BDM")){
//                 queryString = queryString + " AND tblCrmOpportunity.CreatedBy IN  (" + myTeamMembers + ")  ";
//            }
//            else{
                queryString = queryString + " AND tblCrmAccountTeam.TeamMemberId IN  (" + myTeamMembers + ")  ";
//            }
            
            if (!" ".equals(ajaxHandlerAction.getPracticeName())) {
                queryString = queryString + "AND tblCrmOpportunity.Type LIKE '" + ajaxHandlerAction.getPracticeName() + "%'";
            }
            queryString = queryString + "  ORDER BY tblCrmAccountTeam.TeamMemberId asc,tblCrmAccount.state asc,tblCrmAccount.NAME asc,tblCrmOpportunity.DueDate DESC  limit 250";



//            queryString = "SELECT  tblCrmOpportunity.id,tblCrmOpportunity.Title,CASE WHEN tblCrmAccount.NAME IS NOT NULL THEN tblCrmAccount.NAME ELSE '' END AS AccountName,tblCrmOpportunity.CreatedBy,"
//                    + "DATE(tblCrmOpportunity.CreatedDate) AS CreatedDate,DATE(tblCrmOpportunity.DueDate) AS  DueDate,tblCrmAccount.state FROM tblCrmOpportunity "
//                    + " LEFT JOIN tblCrmAccount ON (tblCrmAccount.Id = tblCrmOpportunity.AccountId) "
//                    + " WHERE tblCrmOpportunity.CreatedBy IN  (" + myTeamMembers + ") AND "
//                    + "(DATE(tblCrmOpportunity.CreatedDate)>='" + DateUtility.getInstance().getMysqlDate(startDate) + "' AND  "
//                    + "DATE(tblCrmOpportunity.CreatedDate)<='" + DateUtility.getInstance().getMysqlDate(endDate) + "') ";
//            if (!" ".equals(ajaxHandlerAction.getPracticeName())) {
//                queryString = queryString + "AND tblCrmOpportunity.Type LIKE '" + ajaxHandlerAction.getPracticeName() + "%'";
//            }
//            queryString = queryString + "  ORDER BY tblCrmOpportunity.CreatedBy,tblCrmAccount.state,tblCrmAccount.NAME,tblCrmOpportunity.DueDate DESC  limit 250";
//



         //   System.out.println("queryString---in impl of first oppurtunities piechart" + queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            int count = 0;
            while (resultSet.next()) {
                count++;
                responseString = responseString + count + "#^$";
                responseString = responseString + resultSet.getString("CreatedBy") + "#^$";
                responseString = responseString + resultSet.getString("AccountName") + "#^$";
                responseString = responseString + resultSet.getString("Title") + "#^$";
                responseString = responseString + resultSet.getString("Practice") + "#^$";
                responseString = responseString + resultSet.getString("state") + "#^$";

                if (resultSet.getString("CreatedDate") == null) {
                    responseString = responseString + "_" + "#^$";
                } else {
                    responseString = responseString + resultSet.getString("CreatedDate").substring(0, 10) + "#^$";
                }
                if (resultSet.getString("DueDate") == null) {
                    responseString = responseString + "_" + "*@!";
                } else {
                    responseString = responseString + resultSet.getString("DueDate").substring(0, 10) + "*@!";
                }



            }
             }
             
             
             
             
             
             
              if(titleType.equals("BDM")){
                  
                  
             //      System.out.println("in BDM case");
                connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spBDMIndividualOpprDetails(?,?,?,?,?,?,?,?)}");

            callableStatement.setDate(1, DateUtility.getInstance().getMysqlDate(startDate));
          //  System.out.println("DateUtility.getInstance().getMysqlDate(startDate)---->"+DateUtility.getInstance().getMysqlDate(startDate));
            callableStatement.setDate(2, DateUtility.getInstance().getMysqlDate(endDate));
         //   System.out.println("DateUtility.getInstance().getMysqlDate(endDate)---->"+DateUtility.getInstance().getMysqlDate(endDate));
//            if (ajaxHandlerAction.getAccountId() == 0) {
//                callableStatement.setString(3, "%%");
//                System.out.println("getAccountId()--->"+ajaxHandlerAction.getAccountId());
//            } else {
//                callableStatement.setString(3, ajaxHandlerAction.getAccountId() + "%");
//                System.out.println("ajaxHandlerAction.getAccountId()%----->"+ajaxHandlerAction.getAccountId() + "%");
//            }
          //    System.out.println("myTeamMembers before is----->"+myTeamMembers);
            myTeamMembers=myTeamMembers.replaceAll("'", "");
         //    System.out.println("myTeamMembers after is----->"+myTeamMembers);
            callableStatement.setString(3, myTeamMembers);
       //     System.out.println("myTeamMembers---->"+myTeamMembers);
            callableStatement.setString(4, loginId);
                  System.out.println("---->"+ajaxHandlerAction.getPracticeName());
              if (!" ".equals(ajaxHandlerAction.getPracticeName())) {
                  callableStatement.setString(5, ajaxHandlerAction.getPracticeName());
              }
              else{
                  callableStatement.setString(5,"%");
              }
            callableStatement.registerOutParameter(6, Types.VARCHAR);
            callableStatement.registerOutParameter(7, Types.VARCHAR);
            callableStatement.registerOutParameter(8, Types.VARCHAR);
           
            int updatedRows = callableStatement.executeUpdate();
            stringBuffer.append(callableStatement.getString(6));
          //   System.out.println("stringBuffer.toString()------->"+stringBuffer.toString());
          responseString= callableStatement.getString(6);
           
         //   System.out.println("responseString--->" + responseString);
                  
              }
            if (responseString.equals("")) {
                responseString = "addto0";
            }

            //System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }
   /* public String getRequirementDetailsByPractice(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        Connection connection = null;
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        String responseString = "";
        String myTeamMembers = "";
        Map teamMembers = new TreeMap();

        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            String endDate = DateUtility.getInstance().getDateByMonthYear(ajaxHandlerAction.getToMonth(), ajaxHandlerAction.getToYear());
            String startDate = DateUtility.getInstance().getDateLastMonthsByMonthYear(ajaxHandlerAction.getFromMonth(), ajaxHandlerAction.getFromYear(), 0);
//            System.out.println("startDate--->" + startDate);
//            System.out.println("endDate--->" + endDate);
//            System.out.println("loginId--->" + loginId);
            connection = ConnectionProvider.getInstance().getConnection();
            String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(loginId);
            teamMembers = DataSourceDataProvider.getInstance().getMyTeamMembers(loginId, departmentId);
            if (teamMembers.size() > 0) {
                myTeamMembers = getKeys(teamMembers, ",") + ",'" + loginId + "'";
            } else {
                myTeamMembers = "'" + loginId + "'";
            }

            queryString = "SELECT DISTINCT tblRecRequirement.Id,JobTitle,CASE WHEN tblCrmAccount.NAME IS NOT NULL THEN tblCrmAccount.NAME ELSE '' END AS  AccountName,tblRecRequirement.STATUS,tblRecRequirement.CreatedBy,DATE(DatePosted) AS CreatedDate,DATE(ClosedDate) AS ClosedDate "
                    + " FROM tblRecRequirement LEFT JOIN  tblCrmAccountTeam ON (tblRecRequirement.CustomerId=tblCrmAccountTeam.AccountId) LEFT JOIN tblCrmAccount ON (tblCrmAccount.Id = tblCrmAccountTeam.AccountId)  WHERE "
                    + "tblRecRequirement.CreatedBy IN (" + myTeamMembers + ") AND "
                    + "(DATE(tblRecRequirement.DatePosted)>='" + DateUtility.getInstance().getMysqlDate(startDate) + "' AND "
                    + " DATE(tblRecRequirement.DatePosted)<='" + DateUtility.getInstance().getMysqlDate(endDate) + "') AND "
                    + "tblRecRequirement.Practice NOT LIKE '-1' ";

            if (!" ".equals(ajaxHandlerAction.getPracticeName())) {
                queryString = queryString + "AND tblRecRequirement.Practice LIKE '" + ajaxHandlerAction.getPracticeName() + "%'";
            }
            queryString += "  ORDER BY tblRecRequirement.CreatedBy asc,tblCrmAccount.NAME asc,CreatedDate DESC  limit 250";




            // System.out.println("queryString---" + queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            int count = 0;
            while (resultSet.next()) {
                count++;
                responseString = responseString + count + "#^$";
                responseString = responseString + resultSet.getString("CreatedBy") + "#^$";
                responseString = responseString + resultSet.getString("AccountName") + "#^$";
                responseString = responseString + resultSet.getString("JobTitle") + "#^$";

                responseString = responseString + resultSet.getString("STATUS") + "#^$";

                if (resultSet.getString("CreatedDate") == null) {
                    responseString = responseString + "_" + "#^$";
                } else {
                    responseString = responseString + resultSet.getString("CreatedDate").substring(0, 10) + "#^$";
                }
                if (resultSet.getString("ClosedDate") == null) {
                    responseString = responseString + "_" + "*@!";
                } else {
                    responseString = responseString + resultSet.getString("ClosedDate").substring(0, 10) + "*@!";
                }



            }
            if (responseString.equals("")) {
                responseString = "addto0";
            }

            // System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }*/
 public String getRequirementDetailsByPractice(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        Connection connection = null;
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        String responseString = "";
        String myTeamMembers = "";
        Map teamMembers = new TreeMap();
CallableStatement callableStatement = null;
        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            String endDate = DateUtility.getInstance().getDateByMonthYear(ajaxHandlerAction.getToMonth(), ajaxHandlerAction.getToYear());
            String startDate = DateUtility.getInstance().getDateLastMonthsByMonthYear(ajaxHandlerAction.getFromMonth(), ajaxHandlerAction.getFromYear(), 0);
            String titleType = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE);
                 String empId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_ID).toString(); 
//            System.out.println("startDate--->" + startDate);
//            System.out.println("endDate--->" + endDate);
         
            connection = ConnectionProvider.getInstance().getConnection();
            
            if(titleType.equals("BDM")){
                         
                         teamMembers = DataSourceDataProvider.getInstance().getBdmAssociateList(empId);
                    }
            else{
                 String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(loginId);
            teamMembers = DataSourceDataProvider.getInstance().getMyTeamMembers(loginId, departmentId);
            }
           
            if (teamMembers.size() > 0) {
                myTeamMembers = getKeys(teamMembers, ",") + ",'" + loginId + "'";
            } else {
                myTeamMembers = "'" + loginId + "'";
            }
 if(!titleType.equals("BDM")){
            queryString = "SELECT DISTINCT tblRecRequirement.Id,JobTitle,CASE WHEN tblCrmAccount.NAME IS NOT NULL THEN tblCrmAccount.NAME ELSE '' END AS  AccountName,tblRecRequirement.STATUS,tblRecRequirement.CreatedBy,DATE(DatePosted) AS CreatedDate,DATE(ClosedDate) AS ClosedDate "
                    + " FROM tblRecRequirement LEFT JOIN  tblCrmAccountTeam ON (tblRecRequirement.CustomerId=tblCrmAccountTeam.AccountId) LEFT JOIN tblCrmAccount ON (tblCrmAccount.Id = tblCrmAccountTeam.AccountId)  WHERE "
                    + "tblRecRequirement.CreatedBy IN (" + myTeamMembers + ") AND "
                    + "(DATE(tblRecRequirement.DatePosted)>='" + DateUtility.getInstance().getMysqlDate(startDate) + "' AND "
                    + " DATE(tblRecRequirement.DatePosted)<='" + DateUtility.getInstance().getMysqlDate(endDate) + "') AND "
                    + "tblRecRequirement.Practice NOT LIKE '-1' ";

            if (!" ".equals(ajaxHandlerAction.getPracticeName())) {
                queryString = queryString + "AND tblRecRequirement.Practice LIKE '" + ajaxHandlerAction.getPracticeName() + "%'";
            }
            queryString += "  ORDER BY tblRecRequirement.CreatedBy asc,tblCrmAccount.NAME asc,CreatedDate DESC  limit 250";




        //     System.out.println("queryString---in impl of second requirement pie chart" + queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            int count = 0;
            while (resultSet.next()) {
                count++;
                responseString = responseString + count + "#^$";
                responseString = responseString + resultSet.getString("CreatedBy") + "#^$";
                responseString = responseString + resultSet.getString("AccountName") + "#^$";
                responseString = responseString + resultSet.getString("JobTitle") + "#^$";

                responseString = responseString + resultSet.getString("STATUS") + "#^$";

                if (resultSet.getString("CreatedDate") == null) {
                    responseString = responseString + "_" + "#^$";
                } else {
                    responseString = responseString + resultSet.getString("CreatedDate").substring(0, 10) + "#^$";
                }
                if (resultSet.getString("ClosedDate") == null) {
                    responseString = responseString + "_" + "*@!";
                } else {
                    responseString = responseString + resultSet.getString("ClosedDate").substring(0, 10) + "*@!";
                }


            }
            }
 
 
  if(titleType.equals("BDM")){
   //    System.out.println("in BDM case");
                connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spBDMIndividualOpprDetails(?,?,?,?,?,?,?,?)}");

            callableStatement.setDate(1, DateUtility.getInstance().getMysqlDate(startDate));
          //  System.out.println("DateUtility.getInstance().getMysqlDate(startDate)---->"+DateUtility.getInstance().getMysqlDate(startDate));
            callableStatement.setDate(2, DateUtility.getInstance().getMysqlDate(endDate));
         //   System.out.println("DateUtility.getInstance().getMysqlDate(endDate)---->"+DateUtility.getInstance().getMysqlDate(endDate));
//            if (ajaxHandlerAction.getAccountId() == 0) {
//                callableStatement.setString(3, "%%");
//                System.out.println("getAccountId()--->"+ajaxHandlerAction.getAccountId());
//            } else {
//                callableStatement.setString(3, ajaxHandlerAction.getAccountId() + "%");
//                System.out.println("ajaxHandlerAction.getAccountId()%----->"+ajaxHandlerAction.getAccountId() + "%");
//            }
       //       System.out.println("myTeamMembers before is----->"+myTeamMembers);
            myTeamMembers=myTeamMembers.replaceAll("'", "");
         //    System.out.println("myTeamMembers after is----->"+myTeamMembers);
            callableStatement.setString(3, myTeamMembers);
         //   System.out.println("myTeamMembers---->"+myTeamMembers);
            callableStatement.setString(4, loginId);
                  System.out.println("---->"+ajaxHandlerAction.getPracticeName());
             if (!" ".equals(ajaxHandlerAction.getPracticeName())) {
                  callableStatement.setString(5, ajaxHandlerAction.getPracticeName());
              }
              else{
                  callableStatement.setString(5,"%");
              }
            callableStatement.registerOutParameter(6, Types.VARCHAR);
            callableStatement.registerOutParameter(7, Types.VARCHAR);
            callableStatement.registerOutParameter(8, Types.VARCHAR);
           
            int updatedRows = callableStatement.executeUpdate();
            stringBuffer.append(callableStatement.getString(7));
        //     System.out.println("stringBuffer.toString()------->"+stringBuffer.toString());
          responseString= callableStatement.getString(7);
           
            System.out.println("responseString--->" + responseString);
  }
            if (responseString.equals("")) {
                responseString = "addto0";
            }

            // System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }
    /*public String getGreenSheetDetailsByPractice(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        Connection connection = null;
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        String responseString = "";
        String myTeamMembers = "";
        Map teamMembers = new TreeMap();

        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            String endDate = DateUtility.getInstance().getDateByMonthYear(ajaxHandlerAction.getToMonth(), ajaxHandlerAction.getToYear());
            String startDate = DateUtility.getInstance().getDateLastMonthsByMonthYear(ajaxHandlerAction.getFromMonth(), ajaxHandlerAction.getFromYear(), 0);
//            System.out.println("startDate--->" + startDate);
//            System.out.println("endDate--->" + endDate);
//            System.out.println("loginId--->" + loginId);
            connection = ConnectionProvider.getInstance().getConnection();
            String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(loginId);
            teamMembers = DataSourceDataProvider.getInstance().getMyTeamMembers(loginId, departmentId);
            if (teamMembers.size() > 0) {
                myTeamMembers = getKeys(teamMembers, ",") + ",'" + loginId + "'";
            } else {
                myTeamMembers = "'" + loginId + "'";
            }

            queryString = "SELECT DISTINCT tblGreensheets.Id,CONCAT(tblGreensheets.FirstName,'',tblGreensheets.MiddleName,'',tblGreensheets.LastName) AS consultantName,CASE WHEN tblCrmAccount.NAME IS NOT NULL THEN tblCrmAccount.NAME ELSE '' END AS NAME,tblGreensheets.POStatus,tblGreensheets.PoType,"
                    + "tblGreensheets.CreatedBy,DATE(tblGreensheets.DateCreated) AS DateCreated,tblGreensheets.UnitsRate FROM tblGreensheets"
                    + " LEFT JOIN tblCrmAccount ON(tblGreensheets.ConsultantId=tblCrmAccount.Id)"
                    + " LEFT JOIN tblCrmAccountTeam ON (tblCrmAccount.Id = tblCrmAccountTeam.AccountId) "
                    + " WHERE tblGreensheets.RecordType=1 and tblGreensheets.CreatedBy IN (" + myTeamMembers + ") AND "
                    + "(DATE(tblGreensheets.DateCreated)>='" + DateUtility.getInstance().getMysqlDate(startDate) + "' AND "
                    + "DATE(tblGreensheets.DateCreated)<='" + DateUtility.getInstance().getMysqlDate(endDate) + "') ";
            if (!"".equals(ajaxHandlerAction.getPoType())) {
                queryString = queryString + "AND tblGreensheets.PoType LIKE '" + ajaxHandlerAction.getPoType() + "%'";
            }
            queryString += " ORDER BY tblGreensheets.CreatedBy asc,tblCrmAccount.NAME ASC,DateCreated DESC limit 250";


            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            double totalCount = 0.0;
            int count = 0;
            while (resultSet.next()) {
                count++;
                responseString = responseString + count + "#^$";
                //     responseString = responseString + resultSet.getInt("AccountId") + "#^$";
                responseString = responseString + resultSet.getString("CreatedBy") + "#^$";
                responseString = responseString + resultSet.getString("POStatus") + "#^$";
                responseString = responseString + resultSet.getString("PoType") + "#^$";
                responseString = responseString + resultSet.getString("NAME") + "#^$";
                responseString = responseString + resultSet.getString("consultantName") + "#^$";
                responseString = responseString + resultSet.getString("UnitsRate") + "#^$";

                totalCount += resultSet.getDouble("UnitsRate");

                if (resultSet.getString("DateCreated") == null) {
                    responseString = responseString + "_" + "*@!";
                } else {
                    responseString = responseString + resultSet.getString("DateCreated").substring(0, 10) + "*@!";
                }


            }

            responseString += "addto0" + (int) totalCount;


            //System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }*/
 public String getGreenSheetDetailsByPractice(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        Connection connection = null;
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        String responseString = "";
        String myTeamMembers = "";
        Map teamMembers = new TreeMap();
CallableStatement callableStatement=null;
        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            String endDate = DateUtility.getInstance().getDateByMonthYear(ajaxHandlerAction.getToMonth(), ajaxHandlerAction.getToYear());
            String startDate = DateUtility.getInstance().getDateLastMonthsByMonthYear(ajaxHandlerAction.getFromMonth(), ajaxHandlerAction.getFromYear(), 0);
            
            String titleType = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE);
                 String empId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_ID).toString(); 
//            System.out.println("startDate--->" + startDate);
//            System.out.println("endDate--->" + endDate);
          
            connection = ConnectionProvider.getInstance().getConnection();
            if(titleType.equals("BDM")){
                         
                         teamMembers = DataSourceDataProvider.getInstance().getBdmAssociateList(empId);
                    }
            else{
                 String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(loginId);
            teamMembers = DataSourceDataProvider.getInstance().getMyTeamMembers(loginId, departmentId);
            }
           
            if (teamMembers.size() > 0) {
                myTeamMembers = getKeys(teamMembers, ",") + ",'" + loginId + "'";
            } else {
                myTeamMembers = "'" + loginId + "'";
            }
 if(!titleType.equals("BDM")){
            queryString = "SELECT DISTINCT tblGreensheets.Id,CONCAT(tblGreensheets.FirstName,'',tblGreensheets.MiddleName,'',tblGreensheets.LastName) AS consultantName,CASE WHEN tblCrmAccount.NAME IS NOT NULL THEN tblCrmAccount.NAME ELSE '' END AS NAME,tblGreensheets.POStatus,tblGreensheets.PoType,"
                    + "tblGreensheets.CreatedBy,DATE(tblGreensheets.DateCreated) AS DateCreated,tblGreensheets.UnitsRate FROM tblGreensheets"
                    + " LEFT JOIN tblCrmAccount ON(tblGreensheets.ConsultantId=tblCrmAccount.Id)"
                    + " LEFT JOIN tblCrmAccountTeam ON (tblCrmAccount.Id = tblCrmAccountTeam.AccountId) "
                    + " WHERE tblGreensheets.RecordType=1 and tblGreensheets.CreatedBy IN (" + myTeamMembers + ") AND "
                    + "(DATE(tblGreensheets.DateCreated)>='" + DateUtility.getInstance().getMysqlDate(startDate) + "' AND "
                    + "DATE(tblGreensheets.DateCreated)<='" + DateUtility.getInstance().getMysqlDate(endDate) + "') ";
            if (!"".equals(ajaxHandlerAction.getPoType())) {
                queryString = queryString + "AND tblGreensheets.PoType LIKE '" + ajaxHandlerAction.getPoType() + "%'";
            }
            queryString += " ORDER BY tblGreensheets.CreatedBy asc,tblCrmAccount.NAME ASC,DateCreated DESC limit 250";


            
            
           // System.out.println("queryString -----in impl of third greensheets---->"+queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            double totalCount = 0.0;
            int count = 0;
            while (resultSet.next()) {
                count++;
                responseString = responseString + count + "#^$";
                //     responseString = responseString + resultSet.getInt("AccountId") + "#^$";
                responseString = responseString + resultSet.getString("CreatedBy") + "#^$";
                responseString = responseString + resultSet.getString("POStatus") + "#^$";
                responseString = responseString + resultSet.getString("PoType") + "#^$";
                responseString = responseString + resultSet.getString("NAME") + "#^$";
                responseString = responseString + resultSet.getString("consultantName") + "#^$";
                responseString = responseString + resultSet.getString("UnitsRate") + "#^$";

                totalCount += resultSet.getDouble("UnitsRate");

                if (resultSet.getString("DateCreated") == null) {
                    responseString = responseString + "_" + "*@!";
                } else {
                    responseString = responseString + resultSet.getString("DateCreated").substring(0, 10) + "*@!";
                }


            }

            responseString += "addto0" + (int) totalCount;

 }
 
 
 
 
  if(titleType.equals("BDM")){
    //   System.out.println("in BDM case");
                connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spBDMIndividualOpprDetails(?,?,?,?,?,?,?,?)}");

            callableStatement.setDate(1, DateUtility.getInstance().getMysqlDate(startDate));
        //    System.out.println("DateUtility.getInstance().getMysqlDate(startDate)---->"+DateUtility.getInstance().getMysqlDate(startDate));
            callableStatement.setDate(2, DateUtility.getInstance().getMysqlDate(endDate));
         //   System.out.println("DateUtility.getInstance().getMysqlDate(endDate)---->"+DateUtility.getInstance().getMysqlDate(endDate));
//            if (ajaxHandlerAction.getAccountId() == 0) {
//                callableStatement.setString(3, "%%");
//                System.out.println("getAccountId()--->"+ajaxHandlerAction.getAccountId());
//            } else {
//                callableStatement.setString(3, ajaxHandlerAction.getAccountId() + "%");
//                System.out.println("ajaxHandlerAction.getAccountId()%----->"+ajaxHandlerAction.getAccountId() + "%");
//            }
            //  System.out.println("myTeamMembers before is----->"+myTeamMembers);
            myTeamMembers=myTeamMembers.replaceAll("'", "");
          //   System.out.println("myTeamMembers after is----->"+myTeamMembers);
            callableStatement.setString(3, myTeamMembers);
         //   System.out.println("myTeamMembers---->"+myTeamMembers);
            callableStatement.setString(4, loginId);
                //  System.out.println("---->"+ajaxHandlerAction.getPoType());
            if (!"".equals(ajaxHandlerAction.getPoType())) {
                  callableStatement.setString(5, ajaxHandlerAction.getPoType());
              }
              else{
                  callableStatement.setString(5,"%");
              }
            callableStatement.registerOutParameter(6, Types.VARCHAR);
            callableStatement.registerOutParameter(7, Types.VARCHAR);
            callableStatement.registerOutParameter(8, Types.VARCHAR);
           
            int updatedRows = callableStatement.executeUpdate();
            stringBuffer.append(callableStatement.getString(8));
           //  System.out.println("stringBuffer.toString()------->"+stringBuffer.toString());
          responseString= callableStatement.getString(8);
           
          //  System.out.println("responseString--->" + responseString);
            responseString += "addto0" ;
  }
            //System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public String getaccountRenewalByTeamMember(String teamMemberId, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        Statement statement = null;
        String responseString = "";
        boolean isDataAvailable = false;
        Map teamMembers = new TreeMap();
        String myTeamMembers = "";
        int isSingle = 0;
        try {
            if (teamMemberId.equals("-1")) {
                teamMemberId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
                teamMembers = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
                myTeamMembers = getKeys(teamMembers, ",");
                if (teamMembers.size() > 0) {
                    myTeamMembers = myTeamMembers + ",'" + teamMemberId + "'";
                } else {
                    myTeamMembers = "'" + teamMemberId + "'";
                }
                isSingle++;
            } else {
                myTeamMembers = myTeamMembers + teamMemberId;
            }
            queryString = "SELECT TeamMemberId ,MONTHNAME(DateOfPPARenewal) AS MONTH,COUNT(TeamMemberId) AS RenewalsOfMonth  FROM vwRenewalAccounts WHERE TeamMemberId !='' AND YEAR(DateOfPPARenewal) LIKE YEAR(NOW()) AND ";
            if (myTeamMembers.contains(",") || isSingle > 0) {
                queryString = queryString + " TeamMemberId IN (" + myTeamMembers + ")";
                queryString = queryString + " GROUP BY TeamMemberId,MONTHNAME(DateOfPPARenewal) ORDER BY TeamMemberId,MONTH(DateOfPPARenewal)";
            } else {
                queryString = queryString + " TeamMemberId IN ('" + myTeamMembers + "') GROUP BY TeamMemberId,MONTHNAME(DateOfPPARenewal) ORDER BY TeamMemberId,MONTH(DateOfPPARenewal)";
            }
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            List list = new ArrayList();
            Map renewalMap = null;
            while (resultSet.next()) {
                renewalMap = new HashMap();
                renewalMap.put("TeamMemberId", resultSet.getString("TeamMemberId"));
                renewalMap.put("Month", resultSet.getString("Month"));
                renewalMap.put("RenewalsOfMonth", resultSet.getInt("RenewalsOfMonth"));
                list.add(renewalMap);
            }
            if (isSingle > 0) {
                int count = 1;
                for (Object key : teamMembers.keySet()) {
                    isDataAvailable = true;
                    String loginId = (String) key;
                    responseString = responseString + count + "|" + loginId;
                    for (Month renewalMonth : Month.values()) {
                        boolean monthExist = false;
                        for (Object temp : list) {
                            Map empMap = (Map) temp;
                            if (loginId.equals(empMap.get("TeamMemberId").toString()) && renewalMonth.name().equals(empMap.get("Month").toString())) {
                                responseString = responseString + "|" + empMap.get("RenewalsOfMonth").toString();
                                monthExist = true;
                                break;
                            }
                        }
                        if (!monthExist) {
                            responseString = responseString + "|" + 0;
                        }
                    }
                    responseString = responseString + "^";
                    count++;
                }

            } else {
                isDataAvailable = true;
                int count = 1;

                responseString = responseString + count + "|" + teamMemberId;
                for (Month renewalMonth : Month.values()) {
                    boolean monthExist = false;
                    for (Object temp : list) {
                        Map empMap = (Map) temp;
                        if (teamMemberId.equals(empMap.get("TeamMemberId").toString()) && renewalMonth.name().equals(empMap.get("Month").toString())) {
                            responseString = responseString + "|" + empMap.get("RenewalsOfMonth").toString();
                            monthExist = true;
                            break;
                        }
                    }
                    if (!monthExist) {
                        responseString = responseString + "|" + 0;
                    }
                }
                responseString = responseString + "^";
            }


            if (!isDataAvailable) {
                responseString = "no data";
            }

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }

        return responseString;
    }

    /*****************************************************
    UtiliZation Report 
     *****************************************************/
    public String getUtilizationReport(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        Connection connection = null;
        CallableStatement callableStatement = null;
        //  ResultSet resultSet = null;
        //boolean isDataAvailable = false;
        String responseString = "";
        int updatedRows;
        //int[] count=new int[5];

        String departmentId = ajaxHandlerAction.getDepartmentId();
        String practiceId = ajaxHandlerAction.getPracticeId();
        String country = ajaxHandlerAction.getCountry();
        String opsContactId = ajaxHandlerAction.getOpsContactId();

        if ("-1".equals(departmentId)) {
            departmentId = "%";
        }
        if ("-1".equals(practiceId) || "All".equals(practiceId)) {
            practiceId = "%";
        }
        if ("-1".equals(country)) {
            country = "%";
        }

        //   System.out.println("the values of departmentId " + departmentId + " practiceId " + practiceId + " country " + country + " opsContactId " + opsContactId);


        int i = 0;
        DataSourceDataProvider dataSourceDataProvider = null;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spUtilizationReport(?,?,?,?,?)}");
            callableStatement.setString(1, departmentId);
            callableStatement.setString(2, practiceId);
            callableStatement.setString(3, opsContactId);
            callableStatement.setString(4, country);
            callableStatement.registerOutParameter(5, java.sql.Types.VARCHAR);
            updatedRows = callableStatement.executeUpdate();
            responseString = callableStatement.getString(5);
            // System.out.println("response string is:->" + responseString);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        //System.out.println("responseString-->"+responseString);
        return responseString;
    }

    /*****************************************************
    end of UtiliZation Report
     *****************************************************/
    // public String getActivitySummaryByLoginId(String startDate, String endDate, String activityType, String recruiterName, HttpServletRequest httpServletRequest,int teamMemberCheck,String titleType ) throws ServiceLocatorException {
   /* public String getActivitySummaryByLoginId(String startDate, String endDate, String activityType, String recruiterName, HttpServletRequest httpServletRequest, int teamMemberCheck, String titleType, String campaignId) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            String empNamesList = "'" + recruiterName + "'";
            if (teamMemberCheck == 1) {
                String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(recruiterName);
                Map teamMap = DataSourceDataProvider.getInstance().getMyTeamMembers(recruiterName, departmentId);
                String teamKeys = getKeys(teamMap, ",");

                //if(empNamesList.equalsIgnoreCase(""))
                if (!"".equals(teamKeys)) {
                    empNamesList = getKeys(teamMap, ",");
                }
            }
            // empNamesList=empNamesList.replaceAll("'", "");
            /* queryString = "SELECT tblCrmActivity.ActivityType,tblCrmActivity.STATUS,tblCrmActivity.Priority,tblCrmActivity.DateDue,tblCrmActivity.AssignedById,tblCrmActivity.AssignedToId,tblCrmActivity.Description,DATE(tblCrmActivity.CreatedDate) AS CreatedDate,tblCrmActivity.Id as ActivityId FROM tblCrmAccountTeam LEFT OUTER JOIN tblCrmActivity ON (tblCrmAccountTeam.AccountId=tblCrmActivity.AccountId) WHERE  tblCrmActivity.CreatedById='" + recruiterName + "' ";
            
            if (!"".equals(startDate) && !"".equals(endDate)) {
            queryString = queryString + " and  DATE(tblCrmActivity.CreatedDate) >= DATE('" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)) + "') and  DATE(tblCrmActivity.CreatedDate) <= DATE('" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)) + "') ";
            }
            if (!"-1".equalsIgnoreCase(activityType)) {
            queryString = queryString + " and tblCrmActivity.ActivityType like '" + activityType + "' ";
            }
            queryString = queryString + "AND tblCrmActivity.ActivityType NOT IN('--Please Select--')  ORDER BY tblCrmActivity.CreatedDate DESC LIMIT 250";
             */

            /*   queryString = "SELECT DISTINCT tblCrmActivity.Id ,tblCrmActivity.ActivityType,tblCrmActivity.STATUS,tblCrmActivity.Priority,tblCrmActivity.DateDue,tblCrmActivity.AssignedById,tblCrmActivity.AssignedToId,tblCrmActivity.Description,DATE(tblCrmActivity.CreatedDate) AS CreatedDate,tblCrmActivity.Id as ActivityId,tblCrmActivity.CreatedById "
            + " FROM ((tblCrmActivity join tblCrmAccountTeam on (tblCrmAccountTeam.AccountId = tblCrmActivity.AccountId))  join tblCrmAccount on (`tblCrmAccount`.`Id` = `tblCrmAccountTeam`.`AccountId`)) WHERE  tblCrmActivity.CreatedById IN (" + empNamesList + ") ";
            if (!"".equals(startDate) && !"".equals(endDate)) {
            queryString = queryString + " and  DATE(tblCrmActivity.CreatedDate) >= DATE('" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)) + "') and  DATE(tblCrmActivity.CreatedDate) <= DATE('" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)) + "') ";
            }
            if (!"-1".equalsIgnoreCase(activityType)) {
            queryString = queryString + " and tblCrmActivity.ActivityType like '" + activityType + "' ";
            }
            queryString = queryString + "AND tblCrmActivity.ActivityType NOT IN('--Please Select--')  ORDER BY tblCrmActivity.CreatedDate DESC LIMIT 250";
             



            if (titleType != null && ("BDM".equalsIgnoreCase(titleType.trim()) || "Vice President".equalsIgnoreCase(titleType.trim()))) {
                queryString = "SELECT DISTINCT tblCrmActivity.Id ,tblCrmAccount.Name,tblCrmActivity.ActivityType,tblCrmActivity.ContactId,tblCrmActivity.STATUS,tblCrmActivity.Priority,tblCrmActivity.DateDue,tblCrmActivity.AssignedById,tblCrmActivity.AssignedToId,tblCrmActivity.Description,DATE(tblCrmActivity.CreatedDate) AS CreatedDate,tblCrmActivity.Id as ActivityId,tblCrmActivity.CreatedById "
                        + " FROM ((tblCrmActivity join tblCrmAccountTeam on (tblCrmAccountTeam.AccountId = tblCrmActivity.AccountId))  join tblCrmAccount on (`tblCrmAccount`.`Id` = `tblCrmAccountTeam`.`AccountId`)) WHERE   tblCrmAccountTeam.TeamMemberId  IN (" + empNamesList + ") ";
                if (!"".equals(startDate) && !"".equals(endDate)) {
                    queryString = queryString + " and  DATE(tblCrmActivity.CreatedDate) >= DATE('" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)) + "') and  DATE(tblCrmActivity.CreatedDate) <= DATE('" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)) + "') ";
                }
                if (!"-1".equalsIgnoreCase(activityType)) {
                    queryString = queryString + " and tblCrmActivity.ActivityType like '" + activityType + "' ";
                }
                queryString = queryString + "AND tblCrmActivity.ActivityType NOT IN('--Please Select--')  ORDER BY tblCrmActivity.CreatedDate DESC LIMIT 250";

            } else {
                queryString = "SELECT DISTINCT tblCrmActivity.Id ,tblCrmAccount.Name,tblCrmActivity.ActivityType,tblCrmActivity.ContactId,tblCrmActivity.STATUS,tblCrmActivity.Priority,tblCrmActivity.DateDue,tblCrmActivity.AssignedById,tblCrmActivity.AssignedToId,tblCrmActivity.Description,DATE(tblCrmActivity.CreatedDate) AS CreatedDate,tblCrmActivity.Id as ActivityId,tblCrmActivity.CreatedById "
                        + " FROM ((tblCrmActivity join tblCrmAccountTeam on (tblCrmAccountTeam.AccountId = tblCrmActivity.AccountId))  join tblCrmAccount on (`tblCrmAccount`.`Id` = `tblCrmAccountTeam`.`AccountId`)) WHERE  tblCrmActivity.CreatedById IN (" + empNamesList + ") ";
                if (!"".equals(startDate) && !"".equals(endDate)) {
                    queryString = queryString + " and  DATE(tblCrmActivity.CreatedDate) >= DATE('" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)) + "') and  DATE(tblCrmActivity.CreatedDate) <= DATE('" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)) + "') ";
                }
                if (!"-1".equalsIgnoreCase(activityType)) {
                    queryString = queryString + " and tblCrmActivity.ActivityType like '" + activityType + "' ";
                }
                if (!"".equalsIgnoreCase(campaignId)) {
                    queryString = queryString + " and tblCrmActivity.CampaignId = " + campaignId;
                }


                queryString = queryString + " AND tblCrmActivity.ActivityType NOT IN('--Please Select--')  ORDER BY tblCrmActivity.CreatedDate DESC LIMIT 250";
            }

            //System.out.println("queryString-->"+queryString);


            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            // String employeeName = DataSourceDataProvider.getInstance().getemployeenamebyloginId(recruiterName);

            String ContactNames = "-";
            while (resultSet.next()) {
                i++;
                if (!"".equals(resultSet.getString("ContactId"))) {
                    ContactNames = DataSourceDataProvider.getInstance().getContactNamesByIds(resultSet.getString("ContactId"));
                } else {
                    ContactNames = "-";
                }
                //activityDetails = activityDetails + i + "#^$" + employeeName + "#^$" + resultSet.getString("ActivityType") + "#^$" + resultSet.getString("STATUS") + "#^$" + resultSet.getString("Priority") + "#^$" + resultSet.getString("CreatedDate") + "#^$" + resultSet.getString("ActivityId") + "*@!";
                //   activityDetails = activityDetails + i + "#^$" + resultSet.getString("CreatedById") + "#^$" + resultSet.getString("ActivityType") + "#^$" + resultSet.getString("STATUS") + "#^$" + resultSet.getString("Priority") + "#^$" + resultSet.getString("CreatedDate") + "#^$" + resultSet.getString("ActivityId") + "*@!";
                activityDetails = activityDetails + i + "#^$" + resultSet.getString("Name") + "#^$" + resultSet.getString("CreatedById") + "#^$" + resultSet.getString("ActivityType") + "#^$" + resultSet.getString("STATUS") + "#^$" + resultSet.getString("Priority") + "#^$" + resultSet.getString("CreatedDate") + "#^$" + ContactNames + "#^$" + resultSet.getString("ActivityId") + "*@!";


            }

            stringBuffer.append(activityDetails);
            stringBuffer.append("addto");
            stringBuffer.append(i);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return stringBuffer.toString();
    }*/
public String getActivitySummaryByLoginId(String startDate, String endDate, String activityType, String recruiterName, HttpServletRequest httpServletRequest, int teamMemberCheck, String campaignId) throws ServiceLocatorException {
     //   System.out.println("getActivitySummaryByLoginId()---->");
        
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        Map teamMap;
        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
             String loginId=httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
             String titleType=httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE).toString();
            String empNamesList = "'" + recruiterName + "'";
            if (teamMemberCheck == 1) {
//                
//                String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(recruiterName);
//                Map teamMap = DataSourceDataProvider.getInstance().getMyTeamMembers(recruiterName, departmentId);
                 if(titleType.equals("BDM")){
                   
                       int empId= DataSourceDataProvider.getInstance().getEmpIdByLoginId(recruiterName);
               teamMap = DataSourceDataProvider.getInstance().getBdmAssociateList(Integer.toString(empId));
           //    System.out.println("teamMap in if case is----->"+teamMap);   
                }
                else{
                String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(recruiterName);
                teamMap = DataSourceDataProvider.getInstance().getMyTeamMembers(recruiterName, departmentId);
             //    System.out.println("teamMap in else case is----->"+teamMap);   
                }
                String teamKeys = getKeys(teamMap, ",");

                //if(empNamesList.equalsIgnoreCase(""))
                if (!"".equals(teamKeys)) {
                    empNamesList = getKeys(teamMap, ",");
                }
            }
            // empNamesList=empNamesList.replaceAll("'", "");
            /* queryString = "SELECT tblCrmActivity.ActivityType,tblCrmActivity.STATUS,tblCrmActivity.Priority,tblCrmActivity.DateDue,tblCrmActivity.AssignedById,tblCrmActivity.AssignedToId,tblCrmActivity.Description,DATE(tblCrmActivity.CreatedDate) AS CreatedDate,tblCrmActivity.Id as ActivityId FROM tblCrmAccountTeam LEFT OUTER JOIN tblCrmActivity ON (tblCrmAccountTeam.AccountId=tblCrmActivity.AccountId) WHERE  tblCrmActivity.CreatedById='" + recruiterName + "' ";
            
            if (!"".equals(startDate) && !"".equals(endDate)) {
            queryString = queryString + " and  DATE(tblCrmActivity.CreatedDate) >= DATE('" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)) + "') and  DATE(tblCrmActivity.CreatedDate) <= DATE('" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)) + "') ";
            }
            if (!"-1".equalsIgnoreCase(activityType)) {
            queryString = queryString + " and tblCrmActivity.ActivityType like '" + activityType + "' ";
            }
            queryString = queryString + "AND tblCrmActivity.ActivityType NOT IN('--Please Select--')  ORDER BY tblCrmActivity.CreatedDate DESC LIMIT 250";
             */

            /*   queryString = "SELECT DISTINCT tblCrmActivity.Id ,tblCrmActivity.ActivityType,tblCrmActivity.STATUS,tblCrmActivity.Priority,tblCrmActivity.DateDue,tblCrmActivity.AssignedById,tblCrmActivity.AssignedToId,tblCrmActivity.Description,DATE(tblCrmActivity.CreatedDate) AS CreatedDate,tblCrmActivity.Id as ActivityId,tblCrmActivity.CreatedById "
            + " FROM ((tblCrmActivity join tblCrmAccountTeam on (tblCrmAccountTeam.AccountId = tblCrmActivity.AccountId))  join tblCrmAccount on (`tblCrmAccount`.`Id` = `tblCrmAccountTeam`.`AccountId`)) WHERE  tblCrmActivity.CreatedById IN (" + empNamesList + ") ";
            if (!"".equals(startDate) && !"".equals(endDate)) {
            queryString = queryString + " and  DATE(tblCrmActivity.CreatedDate) >= DATE('" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)) + "') and  DATE(tblCrmActivity.CreatedDate) <= DATE('" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)) + "') ";
            }
            if (!"-1".equalsIgnoreCase(activityType)) {
            queryString = queryString + " and tblCrmActivity.ActivityType like '" + activityType + "' ";
            }
            queryString = queryString + "AND tblCrmActivity.ActivityType NOT IN('--Please Select--')  ORDER BY tblCrmActivity.CreatedDate DESC LIMIT 250";
             */

  connection = ConnectionProvider.getInstance().getConnection();

//            if (titleType != null && ("BDM".equalsIgnoreCase(titleType.trim()) || "Vice President".equalsIgnoreCase(titleType.trim()))) {
              
             if(titleType != null && titleType.equals("BDM")) {
             //    System.out.println("in bdm case of spBdmActivitySummaryDetails");
                  callableStatement = connection.prepareCall("{call spBdmActivitySummaryDetails(?,?,?,?,?,?,?)}");
             //    System.out.println("startDate---->"+startDate);
                           if (startDate != null && !"".equals(startDate)) {
            callableStatement.setString(1, DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)));
                           }
                           else{
                                callableStatement.setString(1,"%");
                           }
                   //    System.out.println("Start Date---->"+DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)));
                   //    System.out.println("endDate---->"+endDate);
                       if (endDate != null && !"".equals(endDate)) {
            callableStatement.setString(2,DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)));
                       }
                       else{
                             callableStatement.setString(2,"%");
                       }
                   //    System.out.println("End Date---->"+DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)));
             //    System.out.println("activityType is---->"+activityType);
                       if (!"-1".equalsIgnoreCase(activityType)) {
                 callableStatement.setString(3,activityType);
            }
            else{
                callableStatement.setString(3,"%");
            }
               //  System.out.println("activityType is--->"+activityType);
              //   System.out.println("campaignId ---->"+campaignId);
   if (!"".equalsIgnoreCase(campaignId)) {
        callableStatement.setString(4,campaignId);
   }
   else{
         callableStatement.setString(4,"%");
   }
              //   System.out.println("campaignId is---->"+campaignId);
                
             //    System.out.println("empNamesList---->"+empNamesList);
              empNamesList =   empNamesList.replaceAll("'", "");
              //   System.out.println("empNamesList---->"+empNamesList);
             callableStatement.setString(5,empNamesList);
              //   System.out.println("loginId---->"+loginId);
             callableStatement.setString(6,loginId);
                     //   System.out.println("loginId is---->"+loginId);
            callableStatement.registerOutParameter(7, Types.VARCHAR);
            

            callableStatement.executeUpdate();
           String response=callableStatement.getString(7);
                     //  System.out.println("response...."+response);
 stringBuffer.delete(0, stringBuffer.length());
            stringBuffer.append(callableStatement.getString(7));
       //   stringBuffer.append(response);
            
         //   System.out.println("stringBuffer is---->"+stringBuffer.toString());

 
            stringBuffer.append("addto");
            stringBuffer.append(i);
                   
           //         responseString=stringBuffer.toString();
              //      System.out.println("responseString---->"+responseString);
            }
             if (titleType != null && ("Vice President".equalsIgnoreCase(titleType.trim()))) {
                queryString = "SELECT DISTINCT tblCrmActivity.Id ,tblCrmAccount.Name,tblCrmActivity.ActivityType,tblCrmActivity.ContactId,tblCrmActivity.STATUS,tblCrmActivity.Priority,tblCrmActivity.DateDue,tblCrmActivity.AssignedById,tblCrmActivity.AssignedToId,tblCrmActivity.Description,DATE(tblCrmActivity.CreatedDate) AS CreatedDate,tblCrmActivity.Id as ActivityId,tblCrmActivity.CreatedById "
                        + " FROM ((tblCrmActivity join tblCrmAccountTeam on (tblCrmAccountTeam.AccountId = tblCrmActivity.AccountId))  join tblCrmAccount on (`tblCrmAccount`.`Id` = `tblCrmAccountTeam`.`AccountId`)) WHERE   tblCrmAccountTeam.TeamMemberId  IN (" + empNamesList + ") ";
                if (!"".equals(startDate) && !"".equals(endDate)) {
                    queryString = queryString + " and  DATE(tblCrmActivity.CreatedDate) >= DATE('" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)) + "') and  DATE(tblCrmActivity.CreatedDate) <= DATE('" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)) + "') ";
                }
                if (!"-1".equalsIgnoreCase(activityType)) {
                    queryString = queryString + " and tblCrmActivity.ActivityType like '" + activityType + "' ";
                }
                queryString = queryString + "AND tblCrmActivity.ActivityType NOT IN('--Please Select--')  ORDER BY tblCrmActivity.CreatedDate DESC LIMIT 250";

                
                
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            // String employeeName = DataSourceDataProvider.getInstance().getemployeenamebyloginId(recruiterName);

            String ContactNames = "-";
            while (resultSet.next()) {
             //   System.out.println("resultSet.getString(\"ContactId\")---->"+resultSet.getString("ContactId"));
                i++;
                if (!"".equals(resultSet.getString("ContactId")) && !"0".equals(resultSet.getString("ContactId"))) {
                  //  System.out.println("in if case ");
                    ContactNames = DataSourceDataProvider.getInstance().getContactNamesByIds(resultSet.getString("ContactId"));
                } else {
                    ContactNames = "-";
                }
            //    System.out.println("ContactNames--->"+ContactNames);
                //activityDetails = activityDetails + i + "#^$" + employeeName + "#^$" + resultSet.getString("ActivityType") + "#^$" + resultSet.getString("STATUS") + "#^$" + resultSet.getString("Priority") + "#^$" + resultSet.getString("CreatedDate") + "#^$" + resultSet.getString("ActivityId") + "*@!";
                //   activityDetails = activityDetails + i + "#^$" + resultSet.getString("CreatedById") + "#^$" + resultSet.getString("ActivityType") + "#^$" + resultSet.getString("STATUS") + "#^$" + resultSet.getString("Priority") + "#^$" + resultSet.getString("CreatedDate") + "#^$" + resultSet.getString("ActivityId") + "*@!";
                activityDetails = activityDetails + i + "#^$" + resultSet.getString("Name") + "#^$" + resultSet.getString("CreatedById") + "#^$" + resultSet.getString("ActivityType") + "#^$" + resultSet.getString("STATUS") + "#^$" + resultSet.getString("Priority") + "#^$" + resultSet.getString("CreatedDate") + "#^$" + ContactNames + "#^$" + resultSet.getString("ActivityId") + "*@!";


            }

            stringBuffer.append(activityDetails);
            stringBuffer.append("addto");
            stringBuffer.append(i);
            }
            if(!titleType.equals("BDM") && !("Vice President".equalsIgnoreCase(titleType.trim()))){
             //   System.out.println("empNamesList is---->"+empNamesList);
                queryString = "SELECT DISTINCT tblCrmActivity.Id ,tblCrmAccount.Name,tblCrmActivity.ActivityType,tblCrmActivity.ContactId,tblCrmActivity.STATUS,tblCrmActivity.Priority,tblCrmActivity.DateDue,tblCrmActivity.AssignedById,tblCrmActivity.AssignedToId,tblCrmActivity.Description,DATE(tblCrmActivity.CreatedDate) AS CreatedDate,tblCrmActivity.Id as ActivityId,tblCrmActivity.CreatedById "
                        + " FROM ((tblCrmActivity join tblCrmAccountTeam on (tblCrmAccountTeam.AccountId = tblCrmActivity.AccountId))  join tblCrmAccount on (`tblCrmAccount`.`Id` = `tblCrmAccountTeam`.`AccountId`)) WHERE  tblCrmActivity.CreatedById IN (" + empNamesList + ") ";
                if (!"".equals(startDate) && !"".equals(endDate)) {
                    queryString = queryString + " and  DATE(tblCrmActivity.CreatedDate) >= DATE('" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)) + "') and  DATE(tblCrmActivity.CreatedDate) <= DATE('" + DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(endDate)) + "') ";
                }
                if (!"-1".equalsIgnoreCase(activityType)) {
                    queryString = queryString + " and tblCrmActivity.ActivityType like '" + activityType + "' ";
                }
                if (!"".equalsIgnoreCase(campaignId)) {
                    queryString = queryString + " and tblCrmActivity.CampaignId = " + campaignId;
                }


                queryString = queryString + " AND tblCrmActivity.ActivityType NOT IN('--Please Select--')  ORDER BY tblCrmActivity.CreatedDate DESC LIMIT 250";
         
            
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            // String employeeName = DataSourceDataProvider.getInstance().getemployeenamebyloginId(recruiterName);

            String ContactNames = "-";
            while (resultSet.next()) {
               // System.out.println("resultSet.getString(\"ContactId\")---->"+resultSet.getString("ContactId"));
                i++;
                if (!"".equals(resultSet.getString("ContactId")) && !"0".equals(resultSet.getString("ContactId"))) {
                    //System.out.println("in if case ");
                    ContactNames = DataSourceDataProvider.getInstance().getContactNamesByIds(resultSet.getString("ContactId"));
                } else {
                    ContactNames = "-";
                }
             //   System.out.println("ContactNames--->"+ContactNames);
                //activityDetails = activityDetails + i + "#^$" + employeeName + "#^$" + resultSet.getString("ActivityType") + "#^$" + resultSet.getString("STATUS") + "#^$" + resultSet.getString("Priority") + "#^$" + resultSet.getString("CreatedDate") + "#^$" + resultSet.getString("ActivityId") + "*@!";
                //   activityDetails = activityDetails + i + "#^$" + resultSet.getString("CreatedById") + "#^$" + resultSet.getString("ActivityType") + "#^$" + resultSet.getString("STATUS") + "#^$" + resultSet.getString("Priority") + "#^$" + resultSet.getString("CreatedDate") + "#^$" + resultSet.getString("ActivityId") + "*@!";
                activityDetails = activityDetails + i + "#^$" + resultSet.getString("Name") + "#^$" + resultSet.getString("CreatedById") + "#^$" + resultSet.getString("ActivityType") + "#^$" + resultSet.getString("STATUS") + "#^$" + resultSet.getString("Priority") + "#^$" + resultSet.getString("CreatedDate") + "#^$" + ContactNames + "#^$" + resultSet.getString("ActivityId") + "*@!";


            }

            stringBuffer.append(activityDetails);
            stringBuffer.append("addto");
            stringBuffer.append(i);
            
            }

       //     System.out.println("queryString for getActivitySummaryByLoginId() is-->"+queryString);


          
        //    System.out.println("stringBuffer is----->"+stringBuffer);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return stringBuffer.toString();
    }

    public String getActivityDecriptionById(int activityId) throws ServiceLocatorException {

        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            queryString = "SELECT Comments FROM tblCrmActivity WHERE Id=" + activityId;

            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            if (resultSet.next()) {

                activityDetails = resultSet.getString("Comments");

            }


        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return activityDetails;
    }

  /*  public String getRequirementDetailsByStatus(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        Connection connection = null;
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        String responseString = "";
        String myTeamMembers = "";
        Map teamMembers = new TreeMap();

        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            String endDate = DateUtility.getInstance().getDateByMonthYear(ajaxHandlerAction.getToMonth(), ajaxHandlerAction.getToYear());
            String startDate = DateUtility.getInstance().getDateLastMonthsByMonthYear(ajaxHandlerAction.getFromMonth(), ajaxHandlerAction.getFromYear(), 0);
//            System.out.println("startDate--->" + startDate);
//            System.out.println("endDate--->" + endDate);
//            System.out.println("loginId--->" + loginId);
            connection = ConnectionProvider.getInstance().getConnection();
            String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(loginId);
            teamMembers = DataSourceDataProvider.getInstance().getMyTeamMembers(loginId, departmentId);
            if (teamMembers.size() > 0) {
                myTeamMembers = getKeys(teamMembers, ",") + ",'" + loginId + "'";
            } else {
                myTeamMembers = "'" + loginId + "'";
            }

            queryString = "SELECT DISTINCT tblRecRequirement.Id,JobTitle,CASE WHEN tblCrmAccount.NAME IS NOT NULL THEN tblCrmAccount.NAME ELSE '' END AS  AccountName,tblRecRequirement.Practice,tblRecRequirement.CreatedBy,DATE(DatePosted) AS CreatedDate,DATE(ClosedDate) AS ClosedDate "
                    + " FROM tblRecRequirement LEFT JOIN  tblCrmAccountTeam ON (tblRecRequirement.CustomerId=tblCrmAccountTeam.AccountId) LEFT JOIN tblCrmAccount ON (tblCrmAccount.Id = tblCrmAccountTeam.AccountId)  WHERE "
                    + "tblRecRequirement.CreatedBy IN (" + myTeamMembers + ") AND "
                    + "(DATE(tblRecRequirement.DatePosted)>='" + DateUtility.getInstance().getMysqlDate(startDate) + "' AND "
                    + " DATE(tblRecRequirement.DatePosted)<='" + DateUtility.getInstance().getMysqlDate(endDate) + "') AND "
                    + "tblRecRequirement.Practice NOT LIKE '-1' ";

            if (!" ".equals(ajaxHandlerAction.getPracticeName())) {
                queryString = queryString + "AND tblRecRequirement.Status LIKE '" + ajaxHandlerAction.getStatus() + "%'";
            }
            if (ajaxHandlerAction.getAccountId() != 0) {
                queryString = queryString + "AND tblRecRequirement.CustomerId = " + ajaxHandlerAction.getAccountId();
            }
            queryString += " ORDER BY tblRecRequirement.CreatedBy asc,tblCrmAccount.NAME asc,CreatedDate DESC  limit 250";




            //System.out.println("queryString---" + queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            int count = 0;
            while (resultSet.next()) {
                count++;
                responseString = responseString + count + "#^$";
                responseString = responseString + resultSet.getString("CreatedBy") + "#^$";
                responseString = responseString + resultSet.getString("AccountName") + "#^$";
                responseString = responseString + resultSet.getString("JobTitle") + "#^$";

                responseString = responseString + resultSet.getString("Practice") + "#^$";

                if (resultSet.getString("CreatedDate") == null) {
                    responseString = responseString + "_" + "#^$";
                } else {
                    responseString = responseString + resultSet.getString("CreatedDate").substring(0, 10) + "#^$";
                }
                if (resultSet.getString("ClosedDate") == null) {
                    responseString = responseString + "_" + "*@!";
                } else {
                    responseString = responseString + resultSet.getString("ClosedDate").substring(0, 10) + "*@!";
                }



            }
            if (responseString.equals("")) {
                responseString = "addto0";
            }

            // System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }*/
 public String getRequirementDetailsByStatus(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        Connection connection = null;
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        String responseString = "";
        String myTeamMembers = "";
        Map teamMembers = new TreeMap();
        CallableStatement callableStatement=null;

        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            String endDate = DateUtility.getInstance().getDateByMonthYear(ajaxHandlerAction.getToMonth(), ajaxHandlerAction.getToYear());
            String startDate = DateUtility.getInstance().getDateLastMonthsByMonthYear(ajaxHandlerAction.getFromMonth(), ajaxHandlerAction.getFromYear(), 0);
            
              String titleType = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE);
                 String empId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_ID).toString();   
//            System.out.println("startDate--->" + startDate);
//            System.out.println("endDate--->" + endDate);
//            System.out.println("loginId--->" + loginId);
            connection = ConnectionProvider.getInstance().getConnection();
         //   System.out.println("ajaxHandlerAction.getIncludeTeam() in ajaxHandlerAction----->"+ajaxHandlerAction.getIncludeTeam());
          
                    if(titleType.equals("BDM")){
                        teamMembers = DataSourceDataProvider.getInstance().getBdmAssociateList(empId);
                    }
                    else{
                            String departmentId = DataSourceDataProvider.getInstance().getDepartmentName(loginId);
            teamMembers = DataSourceDataProvider.getInstance().getMyTeamMembers(loginId, departmentId);
                    }
            if (teamMembers.size() > 0) {
                myTeamMembers = getKeys(teamMembers, ",") + ",'" + loginId + "'";
            } else {
                myTeamMembers = "'" + loginId + "'";
            }
if(!titleType.equals("BDM")){
 //   System.out.println("other than bdm");
            queryString = "SELECT DISTINCT tblRecRequirement.Id,JobTitle,CASE WHEN tblCrmAccount.NAME IS NOT NULL THEN tblCrmAccount.NAME ELSE '' END AS  AccountName,tblRecRequirement.Practice,tblRecRequirement.CreatedBy,DATE(DatePosted) AS CreatedDate,DATE(ClosedDate) AS ClosedDate "
                    + " FROM tblRecRequirement LEFT JOIN  tblCrmAccountTeam ON (tblRecRequirement.CustomerId=tblCrmAccountTeam.AccountId) LEFT JOIN tblCrmAccount ON (tblCrmAccount.Id = tblCrmAccountTeam.AccountId)  WHERE "
                    + "tblRecRequirement.CreatedBy IN (" + myTeamMembers + ") AND "
                    + "(DATE(tblRecRequirement.DatePosted)>='" + DateUtility.getInstance().getMysqlDate(startDate) + "' AND "
                    + " DATE(tblRecRequirement.DatePosted)<='" + DateUtility.getInstance().getMysqlDate(endDate) + "') AND "
                    + "tblRecRequirement.Practice NOT LIKE '-1' ";

            if (!" ".equals(ajaxHandlerAction.getPracticeName())) {
                queryString = queryString + "AND tblRecRequirement.Status LIKE '" + ajaxHandlerAction.getStatus() + "%'";
            }
            if (ajaxHandlerAction.getAccountId() != 0) {
                queryString = queryString + "AND tblRecRequirement.CustomerId = " + ajaxHandlerAction.getAccountId();
            }
            queryString += " ORDER BY tblRecRequirement.CreatedBy asc,tblCrmAccount.NAME asc,CreatedDate DESC  limit 250";




        //    System.out.println("queryString---sales Statictics non bdm" + queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            int count = 0;
            while (resultSet.next()) {
                count++;
                responseString = responseString + count + "#^$";
                responseString = responseString + resultSet.getString("CreatedBy") + "#^$";
                responseString = responseString + resultSet.getString("AccountName") + "#^$";
                responseString = responseString + resultSet.getString("JobTitle") + "#^$";

                responseString = responseString + resultSet.getString("Practice") + "#^$";

                if (resultSet.getString("CreatedDate") == null) {
                    responseString = responseString + "_" + "#^$";
                } else {
                    responseString = responseString + resultSet.getString("CreatedDate").substring(0, 10) + "#^$";
                }
                if (resultSet.getString("ClosedDate") == null) {
                    responseString = responseString + "_" + "*@!";
                } else {
                    responseString = responseString + resultSet.getString("ClosedDate").substring(0, 10) + "*@!";
                }



            }
}



if(titleType.equals("BDM")){
  //  System.out.println("in associated accounts case of bdm");
    connection = ConnectionProvider.getInstance().getConnection();
    callableStatement = connection.prepareCall("{call spBdmGetRequirementDetailsByStatus(?,?,?,?,?,?,?)}");
                // System.out.println("startDate---->"+startDate);
                           if (startDate != null && !"".equals(startDate)) {
            callableStatement.setDate(1, DateUtility.getInstance().getMysqlDate(startDate));
                           }
                           else{
                                callableStatement.setString(1,"%");
                           }
                    //   System.out.println("Start Date---->"+DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(startDate)));
                    //   System.out.println("endDate---->"+endDate);
                       if (endDate != null && !"".equals(endDate)) {
             callableStatement.setDate(2, DateUtility.getInstance().getMysqlDate(endDate));
                       }
                       else{
                             callableStatement.setString(2,"%");
                       }
                   
                         if (!" ".equals(ajaxHandlerAction.getPracticeName())) {
                 callableStatement.setString(3,ajaxHandlerAction.getStatus());
            }
                         else{
                              callableStatement.setString(3,"%");
                         }
            
               //  System.out.println("ajaxHandlerAction.getStatus() is--->"+ajaxHandlerAction.getStatus());
               //  System.out.println("ajaxHandlerAction.getAccountId() ---->"+ajaxHandlerAction.getAccountId());
    if (ajaxHandlerAction.getAccountId() != 0) {
        callableStatement.setInt(4,ajaxHandlerAction.getAccountId());
   }
   else{
         callableStatement.setString(4,"%");
   }
             //    System.out.println("campaignId is---->"+ajaxHandlerAction.getAccountId());
                
              //   System.out.println("empNamesList---->"+myTeamMembers);
              myTeamMembers =   myTeamMembers.replaceAll("'", "");
                // System.out.println("empNamesList---->"+myTeamMembers);
             callableStatement.setString(5,myTeamMembers);
               //  System.out.println("loginId---->"+loginId);
             callableStatement.setString(6,loginId);
                     //   System.out.println("loginId is---->"+loginId);
            callableStatement.registerOutParameter(7, Types.VARCHAR);
            

            callableStatement.executeUpdate();
           String response=callableStatement.getString(7);
                   //    System.out.println("response...."+response);
 stringBuffer.delete(0, stringBuffer.length());
            stringBuffer.append(callableStatement.getString(7));
            responseString= stringBuffer.toString();
}
            if (responseString.equals("")) {
                responseString = "addto0";
            }

            // System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    /* My opprtunity dashboard details */
    public String getMyOppDashBoard(String type, String state, String dueStartDate, String dueEndDate, String practice, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        //String qsTitle = "";
        stringBuffer = new StringBuffer();
        String oppDashboardList = "";
        CallableStatement callableStatement = null;
        String title = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE).toString();
        String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
        String newDueSDate = "";
        String newDueEDate = "";
        int empId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_ID).toString());
        //Map myTeamMembersMap = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
        //String myTeamMembers = getKeys(myTeamMembersMap,",");
        if (type.equals("All")) {
            type = "%";
        }
        if (state.equals("")) {
            state = "%";
        }
        if (practice.equals("All")) {
            practice = "%";
        }
        // System.out.println("the practicepracticepractice"+practice);
        /* if(curWorkCountry==null || curWorkCountry=="")
        curWorkCountry ="%";*/
        boolean checkDefUser = checkDefaultPeople(loginId);
        try {
            connection = ConnectionProvider.getInstance().getConnection();
//            if(title.equals("Vice President") || title.equals("BDM")){
//                 callableStatement = connection.prepareCall("{call spGetOppDashboardForBDMandVicePresident(?,?,?,?,?,?,?,?,?,?,?)}");
//            }
//            else{
//                 callableStatement = connection.prepareCall("{call spGetOppDashboard(?,?,?,?,?,?,?,?,?,?,?)}");
//            }
            callableStatement = connection.prepareCall("{call spGetMyOppDashboard(?,?,?,?,?,?,?,?,?,?,?,?,?)}");
            callableStatement.setString(1, type);
            callableStatement.setString(2, state);
            if (dueStartDate.equals("") || dueStartDate.equals(" ") || dueStartDate == null) {
                newDueSDate = DateUtility.getInstance().convertStringToMySQLDate("01/01/1990");
                callableStatement.setString(3, newDueSDate);
            } else {
                dueStartDate = DateUtility.getInstance().convertStringToMySQLDate(dueStartDate);
                callableStatement.setString(3, dueStartDate);
            }
            if (dueEndDate.equals("") || dueEndDate.equals(" ") || dueEndDate == null) {
                newDueEDate = DateUtility.getInstance().convertStringToMySQLDate("01/01/2050");
                callableStatement.setString(4, newDueEDate);
            } else {
                dueEndDate = DateUtility.getInstance().convertStringToMySQLDate(dueEndDate);
                callableStatement.setString(4, dueEndDate);
            }

            callableStatement.setInt(5, empId);
            callableStatement.setString(6, title);
            callableStatement.setBoolean(7, checkDefUser);
            callableStatement.setString(8, practice);
            // callableStatement.setString(9,curWorkCountry);
            callableStatement.setInt(9, 1);
            callableStatement.setInt(10, 0);
            callableStatement.registerOutParameter(11, Types.VARCHAR);
            callableStatement.registerOutParameter(12, Types.INTEGER);
            callableStatement.registerOutParameter(13, Types.DOUBLE);
            callableStatement.executeUpdate();
            //oppDashboardList = ;
            //int count = ;

            stringBuffer.delete(0, stringBuffer.length());
            stringBuffer.append(callableStatement.getString(11));
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getInt(12));
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getInt(13));
            /*consultantList = callableStatement.getString(5);
            stringBuffer.append(callableStatement.getString(5));
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getString(6));*/

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }



        return stringBuffer.toString();
    }

    public String popupSkillSetWindow(String personId) throws ServiceLocatorException {
        String skillSet = null;

        //System.out.println("Employee id is: "+personId);
        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();


            String TABLE_EMP_STATE_HISTORY = Properties.getProperty("TABLE_EMP_STATE_HISTORY");

            String QUERY_STRING = "SELECT SkillSet FROM " + TABLE_EMP_STATE_HISTORY + " WHERE EmpId='" + personId + "'";


            preparedStatement = connection.prepareStatement(QUERY_STRING);
            //loginId='"+personId+"'");
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                skillSet = skillSet + "|" + resultSet.getString("SkillSet");

            }
            // System.out.println("skillset is:"+skillSet);
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return skillSet;
    }

    /**
     * ***************************************************
     * Start of Accomadation Report
     ****************************************************
     */
    public String getAccomadationReport(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        int i = 0;
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        stringBuffer = new StringBuffer();
        String opsContactId = ajaxHandlerAction.getOpsContactIdForAcc();
        String responseString = "";
        try {

            stringBuffer = stringBuffer.append("SELECT CONCAT(tblEmployee.FName,' ',tblEmployee.LName) AS EmployeeName,tblEmployee.EmpNo AS EmpNo,tblEmployee.DepartmentId AS DepartmentId ,");
            stringBuffer.append("tblEmpDeductions.Accommodation,tblEmpDeductions.RoomNo,");
            stringBuffer.append(" tblEmpDeductions.Cafeteria,tblEmpDeductions.OccupancyType,tblEmpDeductions.DateOfOccupancy,tblEmployee.CellPhoneNo FROM tblEmployee");
            stringBuffer.append(" LEFT OUTER JOIN tblEmpDeductions ON (tblEmployee.Id=tblEmpDeductions.EmpId)");
            stringBuffer.append(" WHERE tblEmployee.CurStatus='Active' AND tblEmpDeductions.IsActive=1 ");
            if (opsContactId != null && !"-1".equals(opsContactId)) {
                stringBuffer = stringBuffer.append(" and tblEmployee.opsContactId = '" + opsContactId + "'");
            }
            stringBuffer = stringBuffer.append("  ORDER BY EmployeeName");
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(stringBuffer.toString());
            //   System.out.println("the query "+stringBuffer.toString());
            while (resultSet.next()) {
                i = i + 1;
                String DepartmentId = resultSet.getString("DepartmentId");
                String Accommodation = resultSet.getString("tblEmpDeductions.Accommodation");
                String RoomNo = resultSet.getString("tblEmpDeductions.RoomNo");
                String Cafeteria = resultSet.getString("tblEmpDeductions.Cafeteria");
                String OccupancyType = resultSet.getString("tblEmpDeductions.OccupancyType");
                String OccupancyDate = resultSet.getString("tblEmpDeductions.DateOfOccupancy");

                String ContactPhone = resultSet.getString("tblEmployee.CellPhoneNo");
                responseString = responseString + i + "#^$";
                responseString = responseString + resultSet.getString("EmployeeName") + "#^$";
                responseString = responseString + resultSet.getString("EmpNo") + "#^$";
                if (DepartmentId == null || DepartmentId.equalsIgnoreCase("")) {
                    responseString = responseString + "-" + "#^$";

                } else {
                    responseString = responseString + DepartmentId + "#^$";

                }
                if (Accommodation == null || Accommodation.equalsIgnoreCase("")) {
                    responseString = responseString + "-" + "#^$";

                } else {
                    responseString = responseString + Accommodation + "#^$";

                }
                if (RoomNo == null || RoomNo.equalsIgnoreCase("")) {
                    responseString = responseString + "-" + "#^$";

                } else {
                    responseString = responseString + RoomNo + "#^$";

                }
                if (Cafeteria == null || Cafeteria.equalsIgnoreCase("")) {
                    responseString = responseString + "-" + "#^$";

                } else {
                    responseString = responseString + Cafeteria + "#^$";

                }
                if (OccupancyType == null || OccupancyType.equalsIgnoreCase("")) {
                    responseString = responseString + "-" + "#^$";

                } else {
                    responseString = responseString + OccupancyType + "#^$";

                }
                if (OccupancyDate == null || OccupancyDate.equalsIgnoreCase("")) {
                    responseString = responseString + "-" + "#^$";

                } else {
                    responseString = responseString + OccupancyDate + "#^$";

                }
                if (ContactPhone == null || ContactPhone.equalsIgnoreCase("")) {
                    responseString = responseString + "-" + "#^$";

                } else {
                    responseString = responseString + ContactPhone + "#^$";

                }
                responseString = responseString + "*@!";
                //   System.out.println("the response String" + responseString);
            }
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }

        return responseString;
    }

    /**
     * ***************************************************
     * end of Accomadation Report
     ****************************************************
     */

    /*================================================================
    presales opertunity dashboard start
    =================================================================*/
    public String getPreSalesOppDashBoard(String type, String state, String dueStartDate, String dueEndDate, String teamMemberId, String practice, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        String oppDashboardList = "";
        String response = "";
        CallableStatement callableStatement = null;
        Map teammembers = new TreeMap();
        String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
        String newDueSDate = "";
        String newDueEDate = "";
        if (type.equals("All")) {
            type = "%";
        }
        if (state.equals("")) {
            state = "%";
        }
        if (practice.equals("All")) {
            practice = "%";
        }

        boolean checkDefUser = checkDefaultPeople(loginId);
        try {
            if ("-1".equals(teamMemberId)) {
                String Derpartment = DataSourceDataProvider.getInstance().getDepartmentName(loginId);
                teammembers = DataSourceDataProvider.getInstance().getMyTeamMembersEmpId(loginId, Derpartment);
                int teamMemberIdEmpId = DataSourceDataProvider.getInstance().getEmpIdByLoginId(loginId);
                teammembers.put(teamMemberIdEmpId, DataSourceDataProvider.getInstance().getemployeenamebyloginId(loginId));
            } else {
                int teamMemberIdEmpId = DataSourceDataProvider.getInstance().getEmpIdByLoginId(teamMemberId);
                teammembers.put(teamMemberIdEmpId, DataSourceDataProvider.getInstance().getemployeenamebyloginId(loginId));
            }
            String empId = DataSourceDataProvider.getInstance().getTeamLoginIdList(teammembers);
            empId = empId.replaceAll("'", "");
            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spGetPreSalesOppDashboard(?,?,?,?,?,?,?,?,?)}");
            callableStatement.setString(1, type);

            callableStatement.setString(2, state);
            if (dueStartDate.equals("") || dueStartDate.equals(" ") || dueStartDate == null) {
                newDueSDate = DateUtility.getInstance().convertStringToMySQLDate("01/01/1990");
                callableStatement.setString(3, newDueSDate);
            } else {
                dueStartDate = DateUtility.getInstance().convertStringToMySQLDate(dueStartDate);
                callableStatement.setString(3, dueStartDate);
            }
            if (dueEndDate.equals("") || dueEndDate.equals(" ") || dueEndDate == null) {
                newDueEDate = DateUtility.getInstance().convertStringToMySQLDate("01/01/2050");
                callableStatement.setString(4, newDueEDate);
            } else {
                dueEndDate = DateUtility.getInstance().convertStringToMySQLDate(dueEndDate);
                callableStatement.setString(4, dueEndDate);
            }
            callableStatement.setString(5, empId);
            callableStatement.setString(6, practice);
            callableStatement.registerOutParameter(7, Types.VARCHAR);
            callableStatement.registerOutParameter(8, Types.VARCHAR);
            callableStatement.registerOutParameter(9, Types.VARCHAR);
            callableStatement.executeUpdate();

            stringBuffer.delete(0, stringBuffer.length());
            stringBuffer.append(callableStatement.getString(7));
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getInt(8));
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getInt(9));
            response = stringBuffer.toString();
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }
        return response;
    }

    /*================================================================
    presales opertunity dashboard end
    =================================================================*/
    /*================================================================
    presales project dashboard start
    =================================================================*/
    public String getPreSalesProjectDashBoard(String startDate, String endDate, String teamMemberId, String state, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        //  System.out.println("in impl getPreSalesProjectDashBoard");
        stringBuffer = new StringBuffer();
        Connection connection = null;
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        CallableStatement callableStatement = null;
        DataSourceDataProvider dataSourceDataProvider = null;
        Map teammembers = new TreeMap();
        String responseString = "";

        int i = 0;
        try {
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            if ("-1".equals(teamMemberId)) {
                //  String Derpartment = DataSourceDataProvider.getInstance().getDepartmentName(loginId);
                teammembers = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
                teammembers.put(loginId, httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_NAME));
            } else {
                teammembers.put(teamMemberId, DataSourceDataProvider.getInstance().getemployeenamebyloginId(loginId));

            }
            String TeamLoginIdList = DataSourceDataProvider.getInstance().getTeamLoginIdList(teammembers);


            TeamLoginIdList = TeamLoginIdList.replaceAll("\\'", "");

          //  System.out.println("TeamLoginIdList " + TeamLoginIdList);
           // System.out.println("State " + state);

            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spPreSalesProjects(?,?,?,?,?,?)}");
            callableStatement.setString(1, loginId);
            callableStatement.setString(2, TeamLoginIdList);
            callableStatement.setString(3, DateUtility.getInstance().convertStringToMySQLDate(startDate));
            callableStatement.setString(4, DateUtility.getInstance().convertStringToMySQLDate(endDate));
            callableStatement.setString(5, state);
            callableStatement.registerOutParameter(6, java.sql.Types.VARCHAR);

            callableStatement.executeQuery();
            responseString = callableStatement.getString(6);
            // System.out.println("response " + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {



                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }

            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    /*================================================================
    presales project dashboard end
    =================================================================*/
    /*================================================================
    presales onsite/offshore people dashboard start
    =================================================================*/
    public String getPresalesOnsiteOffshoreDashBoard(String country, String teamMemberId, HttpServletRequest httpServletRequest) {

        stringBuffer = new StringBuffer();
        Connection connection = null;
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        DataSourceDataProvider dataSourceDataProvider = null;
        Map teammembers = new TreeMap();
        String responseString = "";

        int i = 0;
        //System.err.println(days+"Diff in Dyas...");
        try {
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            if ("-1".equals(teamMemberId)) {
                teammembers = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
            } else {
                loginId = teamMemberId;
                String Derpartment = DataSourceDataProvider.getInstance().getDepartmentName(loginId);
                teammembers = DataSourceDataProvider.getInstance().getMyTeamMembers(loginId, Derpartment);
            }
            String TeamLoginIdList = DataSourceDataProvider.getInstance().getTeamLoginIdList(teammembers);
            if ("-1".equals(country)) {
                country = "%";
            }


            queryString = "SELECT Id,CONCAT(FName,'.',LName) AS employeeName,ReportsTo, TitleTypeId,Email1,WorkPhoneNo FROM tblEmployee WHERE CurStatus='Active' AND LoginId IN (" + TeamLoginIdList + ") ";
            queryString = queryString + " AND Country like '" + country + "' ORDER BY TRIM(ReportsTo),TRIM(employeeName) LIMIT 250";


            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            int count = 0;
            while (resultSet.next()) {
                count++;
                responseString = responseString + resultSet.getString("Id") + "#^$";
                responseString = responseString + count + "#^$";
                if (resultSet.getString("ReportsTo") != null && !"".equals(resultSet.getString("ReportsTo"))) {
                    responseString = responseString + resultSet.getString("ReportsTo") + "#^$";

                } else {
                    responseString = responseString + "-" + "#^$";
                }
                responseString = responseString + resultSet.getString("employeeName") + "#^$";
                if (resultSet.getString("TitleTypeId") != null && !"".equals(resultSet.getString("TitleTypeId"))) {
                    responseString = responseString + resultSet.getString("TitleTypeId") + "#^$";

                } else {
                    responseString = responseString + "-" + "#^$";
                }
                responseString = responseString + resultSet.getString("Email1") + "#^$";
                responseString = responseString + "view" + "#^$";
                if (resultSet.getString("WorkPhoneNo") != null && !"".equals(resultSet.getString("WorkPhoneNo"))) {
                    responseString = responseString + resultSet.getString("WorkPhoneNo");
                } else {
                    responseString = responseString + "-";
                }
                responseString = responseString + "*@!";
            }
            // System.out.println("response is: " + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {


                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }

            } catch (SQLException sqle) {
            }
        }
        return responseString;


    }
    /*================================================================
    presales onsite/offshore people dashboard end
    =================================================================*/

    /**
     * ***************************************************
     * Sales KPI Report 
     ****************************************************
     */
    public String getsalesKPIReport(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        Connection connection = null;
        ResultSet resultSet = null;
        String queryString = "";
        // String Derpartment ="Sales";



        DataSourceDataProvider dataSourceDataProvider = null;
        String startDate = ajaxHandlerAction.getSalesStartDate();
        String endDate = ajaxHandlerAction.getSalesEndDate();
        String SalesLeadName = ajaxHandlerAction.getSalesLeadId();

        Map teammembers = DataSourceDataProvider.getInstance().getMyTeamMembers(SalesLeadName, "Sales");
        String TeamLoginIdList = DataSourceDataProvider.getInstance().getTeamLoginIdList(teammembers);
        TeamLoginIdList = TeamLoginIdList.replaceAll("'", "");

        CallableStatement callableStatement = null;

        try {

            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spSalesKPI(?,?,?,?)}");
            callableStatement.setString(1, DateUtility.getInstance().convertStringToMySQLDate(startDate));
            callableStatement.setString(2, DateUtility.getInstance().convertStringToMySQLDate(endDate));

            callableStatement.setString(3, TeamLoginIdList);

            callableStatement.registerOutParameter(4, java.sql.Types.VARCHAR);

            callableStatement.executeUpdate();
            queryString = callableStatement.getString(4);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {

                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }
        return queryString;
    }

    /**
     * ***************************************************
     * end of Sales KPI Report
     ****************************************************
     */
    public String popupTasksRiskDescWindow(int riskId) throws ServiceLocatorException {
        String activityDesc = null;

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            //SELECT Comments FROM tblEmpIssues WHERE Id=810
            preparedStatement = connection.prepareStatement("SELECT Description FROM tblProjectRisks WHERE Id=" + riskId);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                activityDesc = resultSet.getString("Description");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return activityDesc;
    }

    public String popupTasksRiskResolutionWindow(int riskId) throws ServiceLocatorException {
        String activityReso = null;

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            //SELECT Comments FROM tblEmpIssues WHERE Id=810
            preparedStatement = connection.prepareStatement("SELECT Resolution FROM tblProjectRisks WHERE Id=" + riskId);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                activityReso = resultSet.getString("Resolution");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return activityReso;
    }

    /**
     * ***************************************************
     * Recruitment KPI Report 
     * 
     ****************************************************
     */
    public String getRecruitmentKpiReport(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        Connection connection = null;
        ResultSet resultSet = null;
        String responseString = "";
        int updatedRows = 0;
        CallableStatement callableStatement = null;
        String recManagerId = ajaxHandlerAction.getRecManagerId();
        String startDate = ajaxHandlerAction.getStartDate();
        String endDate = ajaxHandlerAction.getEndDate();
        Map teammembers = new TreeMap();
        DataSourceDataProvider dataSourceDataProvider = null;

        try {

            String Derpartment = DataSourceDataProvider.getInstance().getDepartmentName(recManagerId);
            teammembers = DataSourceDataProvider.getInstance().getMyTeamMembers(recManagerId, Derpartment);

            String TeamLoginIdList = DataSourceDataProvider.getInstance().getTeamLoginIdList(teammembers);
            TeamLoginIdList = TeamLoginIdList.replaceAll("'", "");
            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spRecruitmentKPI(?,?,?,?)}");

            callableStatement.setString(1, DateUtility.getInstance().convertStringToMySQLDate(startDate));
            callableStatement.setString(2, DateUtility.getInstance().convertStringToMySQLDate(endDate));
            callableStatement.setString(3, TeamLoginIdList);
            callableStatement.registerOutParameter(4, Types.VARCHAR);
            updatedRows = callableStatement.executeUpdate();
            responseString = callableStatement.getString(4);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        //System.out.println("responseString-->"+responseString);
        return responseString;
    }

    /**
     * ***************************************************
     * end of Recruitment KPI Report 
     ****************************************************
     */
    public String addProjectTaskDetails(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        Connection connection = null;
        stringBuffer = new StringBuffer();
        PreparedStatement statement = null;
        String responseString = "";
        int count = 0;
        try {

            //if (existed != 1) {
            // queryString = "INSERT INTO tblBridgeReservation(BCode,BHoldDate, BStartTime, BMidDayFrom,BEndTime, BMidDayTo,BTimeZone, Comments, CreatedBy,CreatedDate) VALUES(?,?,?,?,?,?,?,?,?,?) ";

            //  queryString = "INSERT INTO tblBridges (BCode, BNumber, BName, STATUS,CreatedBy,CreatedDate) VALUES(?,?,?,?,?,?)";
            queryString = " INSERT INTO tblEmpTasks(CustomerId,Project_Id,Title,STATUS,Startdate,Severity,IssueType,IssueRel,PriAssignTO,CreatedBy,CreatedDate, CreatedByType,PriAssignToType,Duration,DueDate) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.prepareStatement(queryString);
            statement.setInt(1, ajaxHandlerAction.getAccountId());
            statement.setString(2, ajaxHandlerAction.getProjectId());
            statement.setString(3, ajaxHandlerAction.getTitle());
            statement.setString(4, ajaxHandlerAction.getStatus());
            statement.setDate(5, DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getStartDate()));
            statement.setString(6, ajaxHandlerAction.getSeverity());
            statement.setInt(7, 4);
            statement.setInt(8, 2);
            statement.setString(9, ajaxHandlerAction.getAssignedTo());
            statement.setString(10, ajaxHandlerAction.getCreatedBy());
            statement.setTimestamp(11, ajaxHandlerAction.getCreatedDate());
            statement.setString(12, "e");
            statement.setString(13, "e");
            statement.setString(14, ajaxHandlerAction.getHours());
            statement.setDate(15, DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getExpiryDate()));
            count = statement.executeUpdate();


            if (count > 0) {
                responseString = "<font size='2' color='green'>Task Details added Successfully..!</font>";
            } else {
                responseString = "<font size='2' color='red'>Adding failed..!</font>";
            }
//            } else {
//                responseString = "<font size='2' color='red'>This slot already reserved for given bridge!</font>";
//            }


            // System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
            responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {

                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public String getProjectTaskDetails(int taskId) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        int i = 0;
        JSONObject subJson = null;
        try {
            //   queryString = "SELECT BCode,BNumber,BName,STATUS FROM tblBridges WHERE BCode ='" + bCode + "'";
            queryString = " SELECT Title,STATUS,Startdate,PriAssignTO,IssueType,Duration,Severity,Description,Resolution,DueDate FROM tblEmpTasks WHERE Id =" + taskId;


            //System.out.println("queryString-->" + queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            if (resultSet.next()) {
                subJson = new JSONObject();
                subJson.put("Title", resultSet.getString("Title"));
                subJson.put("STATUS", resultSet.getString("STATUS"));
                subJson.put("Startdate", DateUtility.getInstance().convertToviewFormat(resultSet.getString("Startdate").substring(0, 10)));
                subJson.put("PriAssignTO", resultSet.getString("PriAssignTO"));
                subJson.put("IssueType", resultSet.getString("IssueType"));
                subJson.put("Duration", resultSet.getString("Duration"));
                subJson.put("Severity", resultSet.getString("Severity"));
                if (resultSet.getString("Description") != null) {
                    subJson.put("Description", resultSet.getString("Description"));
                } else {
                    subJson.put("Description", "");
                }
                if (resultSet.getString("Resolution") != null) {
                    subJson.put("Resolution", resultSet.getString("Resolution"));
                } else {
                    subJson.put("Resolution", "");
                }
                subJson.put("DueDate", DateUtility.getInstance().convertToviewFormat(resultSet.getString("DueDate").substring(0, 10)));

            }
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }

        //System.out.println("Res-->"+subJson.toString());
        return subJson.toString();
    }

    public String doUpdateProjectTaskDetails(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        Connection connection = null;
        stringBuffer = new StringBuffer();
        PreparedStatement statement = null;
        String responseString = "";
        int count = 0;
        try {

            queryString = "UPDATE tblEmpTasks SET Severity=?,Duration=?,STATUS=?,IssueType=?,PriAssignTO=?,Title=?,Startdate=?,ModifiedBY=?,MdofiedDate=?,Description=?,Resolution=?,DueDate=? WHERE Id =" + ajaxHandlerAction.getTaskId();

            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.prepareStatement(queryString);

            statement.setString(1, ajaxHandlerAction.getSeverity());
            statement.setString(2, ajaxHandlerAction.getHours());
            statement.setString(3, ajaxHandlerAction.getStatus());
            statement.setInt(4, ajaxHandlerAction.getIssueTypeId());
            statement.setString(5, ajaxHandlerAction.getAssignedTo());
            statement.setString(6, ajaxHandlerAction.getTitle());
            statement.setDate(7, DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getStartDate()));
            statement.setString(8, ajaxHandlerAction.getModifiedBy());
            statement.setTimestamp(9, ajaxHandlerAction.getModifiedDate());
            statement.setString(10, ajaxHandlerAction.getComments());
            statement.setString(11, ajaxHandlerAction.getResolution());
            statement.setDate(12, DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getEndDate()));
            count = statement.executeUpdate();

            if (count > 0) {
                responseString = "<font size='2' color='green'>Task Details updated Successfully..!</font>";
            } else {
                responseString = "<font size='2' color='red'>Updating failed..!</font>";
            }
//            } else {
//                responseString = "<font size='2' color='red'>This slot already reserved for given bridge!</font>";
//            }


            // System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
            responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {

                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    /**
     * ***************************************************
     * start of AvailableEmp Report
     ****************************************************
     */
    public String getAvailableEmpReport(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        Connection connection = null;
        ResultSet resultSet = null;
        String responseString = "";
        DataSourceDataProvider dataSourceDataProvider = null;
        String state = ajaxHandlerAction.getState();
        String departmentId = ajaxHandlerAction.getDepartmentId();
        String country = ajaxHandlerAction.getCountry();
        String practice = ajaxHandlerAction.getPracticeId();
        String subpractice = ajaxHandlerAction.getSubPracticeId();
        String sortedBy = ajaxHandlerAction.getSortedBy();

       String resourceType = ajaxHandlerAction.getResourceType();
        CallableStatement callableStatement = null;

        try {

            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spAvailableEmpReport(?,?,?,?,?,?,?,?)}");
            callableStatement.setString(1, departmentId);
            callableStatement.setString(2, practice);
            callableStatement.setString(3, state);
            callableStatement.setString(4, country);
            callableStatement.setString(5, subpractice);
            callableStatement.setString(6, sortedBy);
            
           callableStatement.setString(7, resourceType);
            callableStatement.registerOutParameter(8, java.sql.Types.VARCHAR);

            callableStatement.executeQuery();
            responseString = callableStatement.getString(8);
            // System.out.println("the query string......." + responseString);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {

                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }
        }
        return responseString;
    }

    /**
     * ***************************************************
     * end of AvailableEmp Report
     ****************************************************
     */
    /* Bridge Management System start */
    public String addBMSBridgeDetails(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement statement = null;
        String responseString = "";
        int count = 0;
        try {
            String bridgeNumber = ajaxHandlerAction.getBridgeNumber();
            String BridgeCode = "B" + bridgeNumber.substring(bridgeNumber.length() - 4, bridgeNumber.length());
            String existed = isBridgeNumberExists(ajaxHandlerAction.getBridgeNumber());

            //if (existed != 1) {
            // queryString = "INSERT INTO tblBridgeReservation(BCode,BHoldDate, BStartTime, BMidDayFrom,BEndTime, BMidDayTo,BTimeZone, Comments, CreatedBy,CreatedDate) VALUES(?,?,?,?,?,?,?,?,?,?) ";
            if (existed.equals("No")) {
                String bcodeexisted = getBmsBridgeDetails(BridgeCode);
                // System.out.println("bcodeexisted----"+bcodeexisted);
                if (bcodeexisted.equals("")) {
                    queryString = "INSERT INTO tblBridges (BCode, BNumber, BName, STATUS,CreatedBy,CreatedDate,PassCode) VALUES(?,?,?,?,?,?,?)";

                    connection = ConnectionProvider.getInstance().getConnection();
                    statement = connection.prepareStatement(queryString);
                    statement.setString(1, BridgeCode);
                    statement.setString(2, ajaxHandlerAction.getBridgeNumber());
                    statement.setString(3, ajaxHandlerAction.getBridgeName());
                    statement.setString(4, ajaxHandlerAction.getBridgeStatus());
                    statement.setString(5, ajaxHandlerAction.getCreatedBy());
                    statement.setTimestamp(6, ajaxHandlerAction.getCreatedDate());
                    statement.setInt(7, ajaxHandlerAction.getPassCode());
                    count = statement.executeUpdate();


                    if (count > 0) {
                        responseString = "<font size='2' color='green'>Bridge Details added Successfully..!</font>";
                    } else {
                        responseString = "<font size='2' color='red'>Adding failed..!</font>";
                    }
//            } else {
//                responseString = "<font size='2' color='red'>This slot already reserved for given bridge!</font>";
//            }
                } else {
                    responseString = "<font size='2' color='red'>Last 4 digits of bridge number already  exists..!</font>";
                }
            } else {
                responseString = "<font size='2' color='red'>Bridge already exists..!</font>";
            }
            // System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
            responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {

                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public String isBridgeNumberExists(String bridgeNumber) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        String responseString = "";
        int count = 0;
        try {


            queryString = "SELECT * FROM tblBridges WHERE BNumber='" + bridgeNumber + "'";

            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.prepareStatement(queryString);

            resultSet = statement.executeQuery();
            if (resultSet.next()) {


                responseString = "Yes";



            } else {
                responseString = "No";
            }



            // System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
            responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }
        return responseString;
    }

    public String getBmsBridgeDetails(String bCode) throws ServiceLocatorException {
        Statement statement = null;
        ResultSet resultSet = null;
        String result = "";
        int i = 0;
        JSONObject subJson = null;
        try {
            queryString = "SELECT BCode,BNumber,BName,STATUS,PassCode FROM tblBridges WHERE BCode ='" + bCode + "'";


            //System.out.println("queryString-->" + queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            if (resultSet.next()) {
                subJson = new JSONObject();
                subJson.put("BCode", resultSet.getString("BCode"));
                subJson.put("BNumber", resultSet.getString("BNumber"));
                subJson.put("BName", resultSet.getString("BName"));
                subJson.put("STATUS", resultSet.getString("STATUS"));
                subJson.put("PassCode", resultSet.getString("PassCode"));
            }
            if (subJson != null) {
                result = subJson.toString();
            }
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return result;
    }

    public String doUpdateBMSBridgeDetails(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        Connection connection = null;
        stringBuffer = new StringBuffer();
        PreparedStatement statement = null;
        String responseString = "";
        int count = 0;
        try {


            queryString = "UPDATE tblBridges SET BNumber=?,BName=?,STATUS=?,ModifiedBy=?,ModifiedDate=?,PassCode=? WHERE BCode ='" + ajaxHandlerAction.getBridgeCode() + "'";

            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.prepareStatement(queryString);

            statement.setString(1, ajaxHandlerAction.getBridgeNumber());
            statement.setString(2, ajaxHandlerAction.getBridgeName());
            statement.setString(3, ajaxHandlerAction.getBridgeStatus());
            statement.setString(4, ajaxHandlerAction.getModifiedBy());
            statement.setTimestamp(5, ajaxHandlerAction.getModifiedDate());
            statement.setInt(6, ajaxHandlerAction.getPassCode());
            count = statement.executeUpdate();

            if (count > 0) {
                responseString = "<font size='2' color='green'>Bridge Details updated Successfully..!</font>";
            } else {
                responseString = "<font size='2' color='red'>Updating failed..!</font>";
            }
//            } else {
//                responseString = "<font size='2' color='red'>This slot already reserved for given bridge!</font>";
//            }


            // System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
            responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {

                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public String doAvailableBridgeCheck(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement statement = null;
        String responseString = "";
        int count = 0;
        try {

            String bridgeStartDate = DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(ajaxHandlerAction.getBridgeDate()));
            String bridgeEndDate = bridgeStartDate;
            bridgeStartDate += " " + ajaxHandlerAction.getStartTime() + " " + ajaxHandlerAction.getMidDayFrom();
            bridgeEndDate += " " + ajaxHandlerAction.getEndTime() + " " + ajaxHandlerAction.getMidDayTo();
            Calendar calendar = Calendar.getInstance();
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss a");
            String timezone = ajaxHandlerAction.getTimeZone();
            if ("EST".equals(timezone)) {
                timezone = "America/New_York";
            }
            simpleDateFormat.setTimeZone(TimeZone.getTimeZone(timezone));
            java.util.Date currentDate = simpleDateFormat.parse(simpleDateFormat.format(calendar.getTime()).toString());
            java.util.Date StartDate = simpleDateFormat.parse(bridgeStartDate);
            if (StartDate.compareTo(currentDate) >= 0) {
                String activeBridge = isActiveBridge(ajaxHandlerAction.getBridgeCode());
                if (activeBridge.equals("Yes")) {
                    int existed = DataSourceDataProvider.getInstance().isExistedBridgeDates(bridgeStartDate, bridgeEndDate, ajaxHandlerAction.getTimeZone(), ajaxHandlerAction.getBridgeCode());

                    if (existed != 1) {

                        responseString = "<font size='2' color='green'>Slot is available for given bridge..!</font>";

                    } else {
                        responseString = "<font size='2' color='red'>This slot already reserved for given bridge!</font>";
                    }
                } else {
                    responseString = "<font size='2' color='red'>Invalide Bridge Code!</font>";
                }
            } else {
                responseString = "<font size='2' color='red'>Given date and time must be greater than current date and time!</font>";
            }
            // System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
            responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {

                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public String isActiveBridge(String bridgeCode) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        String responseString = "";
        int count = 0;
        try {


            queryString = "SELECT * FROM tblBridges WHERE STATUS='Active' and BCode='" + bridgeCode + "'";
            //System.out.println("queryString---" + queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.prepareStatement(queryString);

            resultSet = statement.executeQuery();
            if (resultSet.next()) {


                responseString = "Yes";



            } else {
                responseString = "No";
            }



            // System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
            responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public String doAddBridgeEvent(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement statement = null;
        String responseString = "";
        int count = 0;
        try {

            String bridgeStartDate = DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(ajaxHandlerAction.getBridgeDate()));
            String bridgeEndDate = bridgeStartDate;
            bridgeStartDate += " " + ajaxHandlerAction.getStartTime() + " " + ajaxHandlerAction.getMidDayFrom();
            // bridgeEndDate += " " + ajaxHandlerAction.getEndTime() + " " + ajaxHandlerAction.getMidDayTo();
            Calendar calendar = Calendar.getInstance();
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm a");

            String timezone = ajaxHandlerAction.getTimeZone();
            if ("EST".equals(timezone)) {
                timezone = "America/New_York";
            }

            simpleDateFormat.setTimeZone(TimeZone.getTimeZone(timezone));
            java.util.Date currentDate = simpleDateFormat.parse(simpleDateFormat.format(calendar.getTime()).toString());
            java.util.Date StartDate = simpleDateFormat.parse(bridgeStartDate);
            long ONE_MINUTE_IN_MILLIS = 60000;//millisecs
            int minutes = ajaxHandlerAction.getDuration();
            if (ajaxHandlerAction.getDurationType().equals("Hrs")) {
                minutes = 60 * minutes;
            }

            long t = StartDate.getTime();
            java.util.Date entDate = new Date(t + (minutes * ONE_MINUTE_IN_MILLIS));
            bridgeEndDate = simpleDateFormat.format(entDate);
            if (StartDate.compareTo(currentDate) >= 0) {
                String activeBridge = isActiveBridge(ajaxHandlerAction.getBridgeCode());
                if (activeBridge.equals("Yes")) {
                    int existed = DataSourceDataProvider.getInstance().isExistedBridgeDates(bridgeStartDate, bridgeEndDate, ajaxHandlerAction.getTimeZone(), ajaxHandlerAction.getBridgeCode());

                    if (existed != 1) {
                        String endTime = bridgeEndDate.substring(11, 16);
                        String MidDayTo = bridgeEndDate.substring(17, 19);
                        queryString = "INSERT INTO tblBridgeReservation(BCode,BHoldDate, BStartTime, BMidDayFrom,BEndTime, BMidDayTo,BTimeZone, Comments, CreatedBy,CreatedDate,internalAttendees,externalAttendees) VALUES(?,?,?,?,?,?,?,?,?,?,?,?) ";

                        connection = ConnectionProvider.getInstance().getConnection();
                        statement = connection.prepareStatement(queryString);
                        statement.setString(1, ajaxHandlerAction.getBridgeCode());
                        statement.setDate(2, DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getBridgeDate()));
                        statement.setString(3, ajaxHandlerAction.getStartTime());
                        statement.setString(4, ajaxHandlerAction.getMidDayFrom());
                        statement.setString(5, endTime);
                        statement.setString(6, MidDayTo);
                        statement.setString(7, ajaxHandlerAction.getTimeZone());
                        statement.setString(8, ajaxHandlerAction.getComments());
                        statement.setString(9, ajaxHandlerAction.getCreatedBy());
                        statement.setTimestamp(10, DateUtility.getInstance().getCurrentMySqlDateTime());
                        statement.setString(11, ajaxHandlerAction.getInternalAttendees());
                        statement.setString(12, ajaxHandlerAction.getExternalAttendees());
                        count = statement.executeUpdate();

                        if (count > 0) {

                            responseString = "<font size='2' color='green'>Event registered Successfully..!</font>";
                            if (ajaxHandlerAction.getEmailFlag() == 1) {
                                if (Properties.getProperty("Mail.Flag").equals("1")) {
                                    String attendees = ajaxHandlerAction.getInternalAttendees();
                                    if (ajaxHandlerAction.getExternalAttendees() != null && !"".equals(ajaxHandlerAction.getExternalAttendees())) {
                                        attendees += "," + ajaxHandlerAction.getExternalAttendees();
                                    }
                                    String location = ajaxHandlerAction.getBridgeNumber() + "*" + ajaxHandlerAction.getPassCode();

                                    MailManager.sendBridgeInvitation(attendees, ajaxHandlerAction.getCreatedBy(), DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(ajaxHandlerAction.getBridgeDate())), ajaxHandlerAction.getStartTime(), ajaxHandlerAction.getMidDayFrom(), endTime, MidDayTo, ajaxHandlerAction.getTimeZone(), ajaxHandlerAction.getComments(), location);
                                    // sendBridgeInvitation(String attendees,String organizer,String BirdgeDate,String startTime,String midDayFrom,String endTime,String midDayTo,String timeZone,String comments)
                                }
                            }
                        } else {
                            responseString = "<font size='2' color='red'>Event registered failed..!</font>";
                        }
                    } else {
                        responseString = "<font size='2' color='red'>This slot already reserved for given bridge!</font>";
                    }
                } else {
                    responseString = "<font size='2' color='red'>This Bridge Extension having some problem please select another extension!</font>";
                }
            } else {
                responseString = "<font size='2' color='red'>Given date and time must be greater than current date and time!</font>";
            }
            // System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
            responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {

                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public String getBridgeList(String bridgeDate, String loginId) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        String responseString = "";
        int count = 0;
        try {
            Calendar calendar = Calendar.getInstance();
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss a");

            queryString = "SELECT tblBridgeReservation.Id AS Id,tblBridgeReservation.BCode,BStartTime,BMidDayFrom,BEndTime,BMidDayTo,BTimeZone,"
                    + "Comments,tblBridgeReservation.CreatedBy,CanceledBy,CanceledReason,tblBridgeReservation.Status,BNumber FROM tblBridgeReservation "
                    + " left join tblBridges on (tblBridgeReservation.BCode=tblBridges.BCode) "
                    + "WHERE BHoldDate='" + DateUtility.getInstance().getMysqlDate(bridgeDate) + "'"
                    + " ORDER BY  tblBridgeReservation.BMidDayFrom='PM',tblBridgeReservation.BMidDayFrom='AM',tblBridgeReservation.BStartTime";
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.prepareStatement(queryString);

            resultSet = statement.executeQuery();

            while (resultSet.next()) {
                count++;
                responseString = responseString + count + "#^$";
                responseString = responseString + resultSet.getString("Id") + "#^$";
                responseString = responseString + resultSet.getString("BCode") + "#^$";
                responseString = responseString + resultSet.getString("BStartTime") + " " + resultSet.getString("BMidDayFrom") + "#^$";
                responseString = responseString + resultSet.getString("BEndTime") + " " + resultSet.getString("BMidDayTo") + "#^$";
                responseString = responseString + resultSet.getString("BTimeZone") + "#^$";
                responseString = responseString + DataSourceDataProvider.getInstance().getemployeenamebyloginId(resultSet.getString("CreatedBy")) + "#^$";
                responseString = responseString + resultSet.getString("Comments") + "#^$";
                responseString = responseString + DataSourceDataProvider.getInstance().getemployeenamebyloginId(resultSet.getString("CanceledBy")) + "#^$";
                responseString = responseString + resultSet.getString("CanceledReason") + "#^$";
                String status = resultSet.getString("Status");
                if ("Created".equalsIgnoreCase(status)) {
                    // cofril -- cipla
                    String timezone = resultSet.getString("BTimeZone");
                    if ("EST".equals(timezone)) {
                        timezone = "America/New_York";
                    }
                    simpleDateFormat.setTimeZone(TimeZone.getTimeZone(timezone));
                    java.util.Date currentDate = simpleDateFormat.parse(simpleDateFormat.format(calendar.getTime()).toString());
                    java.util.Date dbStartDate = simpleDateFormat.parse(DateUtility.getInstance().getMysqlDate(bridgeDate) + " " + resultSet.getString("BStartTime") + " " + resultSet.getString("BMidDayFrom"));
                    java.util.Date dbEndDate = simpleDateFormat.parse(DateUtility.getInstance().getMysqlDate(bridgeDate) + " " + resultSet.getString("BEndTime") + " " + resultSet.getString("BMidDayTo"));
                    //System.out.println("currentDate-->" + currentDate);
                    //System.out.println("dbStartDate-->" + dbStartDate);
                    // System.out.println("dbEndDate-->" + dbEndDate);
                    // System.out.println("currentDate.compareTo(dbStartDate)---" + currentDate.compareTo(dbStartDate));
                    //System.out.println("currentDate.compareTo(dbEndDate)---" + currentDate.compareTo(dbEndDate));
                    if (currentDate.compareTo(dbStartDate) >= 0 && currentDate.compareTo(dbEndDate) <= 0) {
                        status = "Process";
                    } else if (currentDate.compareTo(dbStartDate) >= 0 && currentDate.compareTo(dbEndDate) >= 0) {
                        status = "Completed";
                    }
                }

                responseString = responseString + status + "#^$";
                if (resultSet.getString("CreatedBy").equals(loginId)) {
                    responseString = responseString + "allow" + "#^$";
                } else {
                    responseString = responseString + "notAllow" + "#^$";
                }
                responseString = responseString + resultSet.getString("BNumber") + "*@!";



            }
            if (count == 0) {
                responseString = "nodata";
            }
            responseString += "AddTO" + count;


            // System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
            responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public String getAvailableBridges(String bridgeDate, String startTime, String midDayFrom, String timeZone, int duration, String durationType) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        String responseString = "";
        int count = 0;
        try {

            String bridgeStartDat = DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(bridgeDate));
            String bridgeEndDate = bridgeStartDat;
            String bridgeStartDate = bridgeStartDat + " " + startTime + " " + midDayFrom;
            //bridgeEndDate += " " + ajaxHandlerAction.getEndTime() + " " + ajaxHandlerAction.getMidDayTo();
            Calendar calendar = Calendar.getInstance();
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm a");
            String timezone = timeZone;
            if ("EST".equals(timezone)) {
                timezone = "America/New_York";
            }
            simpleDateFormat.setTimeZone(TimeZone.getTimeZone(timezone));
            java.util.Date currentDate = simpleDateFormat.parse(simpleDateFormat.format(calendar.getTime()).toString());
            java.util.Date StartDate = simpleDateFormat.parse(bridgeStartDate);
            //  if (StartDate.compareTo(currentDate) >= 0) {
            long ONE_MINUTE_IN_MILLIS = 60000;//millisecs
            int minutes = duration;
            if (durationType.equals("Hrs")) {
                minutes = 60 * duration;
            }

            if (StartDate.compareTo(currentDate) >= 0) {
                long t = StartDate.getTime();
                java.util.Date entDate = new Date(t + (minutes * ONE_MINUTE_IN_MILLIS));
                bridgeEndDate = simpleDateFormat.format(entDate);
                String endTime = bridgeEndDate.substring(11, 16);
                String MidDayTo = bridgeEndDate.substring(17, 19);
                String boCodes = DataSourceDataProvider.getInstance().getExistedBCodes(bridgeStartDat, startTime, midDayFrom, endTime, MidDayTo, timeZone);
                queryString = "SELECT * FROM tblBridges WHERE 1=1";
                if (boCodes != null && !"".equals(boCodes)) {
                    queryString += " AND BCode NOT IN(" + boCodes + ") ";
                }
                queryString += " ORDER BY STATUS ASC";
                //System.out.println("av queryString--" + queryString);
                connection = ConnectionProvider.getInstance().getConnection();
                statement = connection.prepareStatement(queryString);

                resultSet = statement.executeQuery();
                while (resultSet.next()) {


                    count++;
                    responseString = responseString + count + "#^$";
                    responseString = responseString + resultSet.getString("Id") + "#^$";
                    responseString = responseString + resultSet.getString("BCode") + "#^$";
                    responseString = responseString + resultSet.getString("BNumber") + "#^$";
                    responseString = responseString + resultSet.getString("Status") + "#^$";
                    responseString = responseString + resultSet.getString("PassCode") + "*@!";



                }

                if (count == 0) {
                    responseString = "nodata";
                }
            } else {
                responseString = "lessThanCurrentDate";
            }
//            } else {
//                responseString = "<font size='2' color='red'>Given date and time must be greater than current date and time!</font>";
//            }

            // System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
            responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public String doCancelBridgeEvent(int id, String reason, String loginId) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement statement = null;
        String responseString = "";
        int count = 0;
        try {


            queryString = "UPDATE  tblBridgeReservation SET Status='Canceled',CanceledReason=?,CanceledBy=?,ModifiedDate=?  where Id=" + id;

            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.prepareStatement(queryString);
            statement.setString(1, reason);
            statement.setString(2, loginId);
            statement.setTimestamp(3, DateUtility.getInstance().getCurrentMySqlDateTime());
            count = statement.executeUpdate();

            if (count > 0) {
                responseString = "<font size='2' color='green'>Event Canceled Successfully..!</font>";
            } else {
                responseString = "<font size='2' color='red'>Cancellation failed..!</font>";
            }



            // System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
            responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {

                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public String getBridgeEventSearchDetails(AjaxHandlerAction ajaxHandlerAction, String loginId) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        String responseString = "";
        int count = 0;
        try {
            String bridgeDate = DateUtility.getInstance().convertDateToMySql1(DateUtility.getInstance().convertStringToMySql(ajaxHandlerAction.getBridgeDate()));
            Calendar calendar = Calendar.getInstance();
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm a");

            queryString = "SELECT tblBridgeReservation.Id AS Id,BHoldDate,tblBridgeReservation.BCode,BStartTime,BMidDayFrom,BEndTime,BMidDayTo,BTimeZone,"
                    + "Comments,tblBridgeReservation.CreatedBy,CanceledBy,CanceledReason,tblBridgeReservation.Status,BNumber,tblBridgeReservation.InternalAttendees,tblBridgeReservation.ExternalAttendees,PassCode FROM tblBridgeReservation "
                    + " left join tblBridges on (tblBridgeReservation.BCode=tblBridges.BCode) where 1=1 AND BHoldDate='" + bridgeDate + "' AND tblBridgeReservation.CreatedBy='" + loginId + "' ";
            if (!"".equals(ajaxHandlerAction.getBridgeCode()) && ajaxHandlerAction.getBridgeCode() != null) {
                queryString = queryString + " AND tblBridgeReservation.BCode LIKE '" + ajaxHandlerAction.getBridgeCode() + "%'";
            }
            queryString = queryString + " ORDER BY  tblBridgeReservation.BMidDayFrom='PM',tblBridgeReservation.BMidDayFrom='AM',tblBridgeReservation.BStartTime";
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.prepareStatement(queryString);

            resultSet = statement.executeQuery();


            String timezone = ajaxHandlerAction.getTimeZone();
            SimpleDateFormat parseFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm a");
            if ("EST".equals(timezone)) {
                timezone = "America/New_York";
            }
            parseFormat.setTimeZone(TimeZone.getTimeZone(timezone));
            //   java.util.Date givenStartDate = parseFormat.parse(bridgeDate + " " + ajaxHandlerAction.getStartTime() + " " + ajaxHandlerAction.getMidDayFrom());
            while (resultSet.next()) {
                String dbBridgeDate = resultSet.getString("BHoldDate");
                String dbStartTime = resultSet.getString("BStartTime");
                String dbmidDayFrom = resultSet.getString("BMidDayFrom");

                String dbtimezone = resultSet.getString("BTimeZone");
                if ("EST".equals(dbtimezone)) {
                    timezone = "America/New_York";
                }

                parseFormat.setTimeZone(TimeZone.getTimeZone(dbtimezone));
                java.util.Date dbStartDate = parseFormat.parse(dbBridgeDate + " " + dbStartTime + " " + dbmidDayFrom);
                //    System.out.println("dbStartDate------1212" + dbStartDate);
                //   System.out.println("givenStartDate------1212" + givenStartDate);
                //   if (givenStartDate.compareTo(dbStartDate) == 0) {
                count++;
                responseString = responseString + count + "#^$";
                responseString = responseString + resultSet.getString("Id") + "#^$";
                responseString = responseString + resultSet.getString("BCode") + "#^$";
                responseString = responseString + resultSet.getString("BStartTime") + " " + resultSet.getString("BMidDayFrom") + "#^$";
                responseString = responseString + resultSet.getString("BEndTime") + " " + resultSet.getString("BMidDayTo") + "#^$";
                responseString = responseString + resultSet.getString("BTimeZone") + "#^$";
                responseString = responseString + DataSourceDataProvider.getInstance().getemployeenamebyloginId(resultSet.getString("CreatedBy")) + "#^$";
                responseString = responseString + resultSet.getString("Comments") + "#^$";
                responseString = responseString + DataSourceDataProvider.getInstance().getemployeenamebyloginId(resultSet.getString("CanceledBy")) + "#^$";
                responseString = responseString + resultSet.getString("CanceledReason") + "#^$";

                String status = resultSet.getString("Status");
                if ("Created".equalsIgnoreCase(status)) {
                    // cofril -- cipla
                    timezone = resultSet.getString("BTimeZone");
                    if ("EST".equals(timezone)) {
                        timezone = "America/New_York";
                    }
                    simpleDateFormat.setTimeZone(TimeZone.getTimeZone(timezone));
                    java.util.Date currentDate = simpleDateFormat.parse(simpleDateFormat.format(calendar.getTime()).toString());
                    dbStartDate = simpleDateFormat.parse(DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getBridgeDate()) + " " + resultSet.getString("BStartTime") + " " + resultSet.getString("BMidDayFrom"));
                    java.util.Date dbEndDate = simpleDateFormat.parse(DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getBridgeDate()) + " " + resultSet.getString("BEndTime") + " " + resultSet.getString("BMidDayTo"));
                    //System.out.println("currentDate-->" + currentDate);
                    //System.out.println("dbStartDate-->" + dbStartDate);
                    // System.out.println("dbEndDate-->" + dbEndDate);
                    // System.out.println("currentDate.compareTo(dbStartDate)---" + currentDate.compareTo(dbStartDate));
                    // System.out.println("currentDate.compareTo(dbEndDate)---" + currentDate.compareTo(dbEndDate));
                    if (currentDate.compareTo(dbStartDate) >= 0 && currentDate.compareTo(dbEndDate) <= 0) {
                        status = "Process";
                    } else if (currentDate.compareTo(dbStartDate) >= 0 && currentDate.compareTo(dbEndDate) >= 0) {
                        status = "Completed";
                    }
                }

                responseString = responseString + status + "#^$";
                if (resultSet.getString("CreatedBy").equals(loginId)) {
                    responseString = responseString + "allow" + "#^$";
                } else {
                    responseString = responseString + "notAllow" + "#^$";
                }
                responseString = responseString + resultSet.getString("BNumber") + "#^$";
                String attendees = "";
                if (resultSet.getString("InternalAttendees") != null && !"".equals(resultSet.getString("InternalAttendees"))) {
                    attendees = resultSet.getString("InternalAttendees");
                }
                if (resultSet.getString("ExternalAttendees") != null && !"".equals(resultSet.getString("ExternalAttendees"))) {
                    attendees += "," + resultSet.getString("ExternalAttendees");
                }
                if (attendees.contains(",")) {
                    attendees = attendees.replaceAll(",", "<br>");
                }

                responseString = responseString + attendees + "#^$";
                if (resultSet.getString("PassCode") == null) {
                    responseString = responseString + " " + "*@!";
                } else {
                    responseString = responseString + resultSet.getString("PassCode") + "*@!";
                }

                // }
            }
            if (count == 0) {
                responseString = "nodata";
            }
            responseString += "AddTO" + count;


            // System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
            responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public String createBridgeIssue(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        Connection connection = null;
        stringBuffer = new StringBuffer();
        PreparedStatement statement = null;
        String responseString = "";
        int count = 0;
        try {
            //String bridgeNumber = ajaxHandlerAction.getBridgeNumber();
            // String BridgeCode = "B" + bridgeNumber.substring(bridgeNumber.length() - 4, bridgeNumber.length());
            String existed = isActiveBridge(ajaxHandlerAction.getBridgeCode());

            //if (existed != 1) {
            // queryString = "INSERT INTO tblBridgeReservation(BCode,BHoldDate, BStartTime, BMidDayFrom,BEndTime, BMidDayTo,BTimeZone, Comments, CreatedBy,CreatedDate) VALUES(?,?,?,?,?,?,?,?,?,?) ";
            if (existed.equals("Yes")) {
                queryString = "INSERT INTO tblEmpTasks (Title,STATUS,Severity,CreatedDate,Startdate,Description,PriAssignTO,CreatedBy,CreatedByType,PriAssignToType,IssueRel,IssueType,BridgeCode) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)";

                connection = ConnectionProvider.getInstance().getConnection();
                statement = connection.prepareStatement(queryString);
                statement.setString(1, "Bridge Issue");
                statement.setString(2, "Created");
                statement.setString(3, ajaxHandlerAction.getPriority());
                statement.setTimestamp(4, DateUtility.getInstance().getCurrentMySqlDateTime());
                statement.setTimestamp(5, DateUtility.getInstance().getCurrentMySqlDateTime());
                statement.setString(6, ajaxHandlerAction.getComments());
                statement.setString(7, ajaxHandlerAction.getAssignTo());
                statement.setString(8, ajaxHandlerAction.getCreatedBy());
                statement.setString(9, "e");
                statement.setString(10, "e");
                statement.setInt(11, 3);
                statement.setInt(12, 4);
                statement.setString(13, ajaxHandlerAction.getBridgeCode());
                count = statement.executeUpdate();


                if (count > 0) {
                    DataSourceDataProvider.getInstance().doUpdateBMSBridgeDetails(ajaxHandlerAction.getBridgeCode(), ajaxHandlerAction.getCreatedBy());
                    responseString = "<font size='2' color='green'>Issue is created Successfully..!</font>";
                    if (Properties.getProperty("Mail.Flag").equals("1")) {
                        String toAddress = "";
                        String cCAddress = "itteam@miraclesoft.com";
                        String subject = "";
                        String bodyContent = "";
                        String createdDate = "";
                        String mailDeliverDate = "";
                        String mailFlag = "0";
                        String bCCAddress = "apatnaik@miraclesoft.com";
                        createdDate = DateUtility.getInstance().getCurrentMySqlDateTime1();
                        mailDeliverDate = DateUtility.getInstance().getCurrentMySqlDateTime1();
                        StringBuilder htmlText = new StringBuilder();
                        bCCAddress = Properties.getProperty("bccAddress");
                        htmlText.append(" <html> ");
                        htmlText.append(" <head> ");
                        htmlText.append(" <title>Mail From Hubble Portal</title>  ");
                        htmlText.append("</head>");
                        htmlText.append("<body>");
                        htmlText.append("<table align='center'><tr style='background:#07BBD7;height:40px;'><td><font color='white' size='4' face='Arial'><p>Task Management System </p></font></td></tr>");
                        htmlText.append("<tr><td><table style='background:#CCDBDE;width:100%;'><tr><td><font color='#3960D2' size='2' face='Arial' style='font-weight:600;'><p>Hello Team,</p></font> </td></tr>");
                        htmlText.append("<tr><td><font color='#3960D2' size='2' face='Arial' style='font-weight:600;'><p>A Task has been cerated by:</font>  <font color='#111728' size='2' face='Arial' style='font-weight:600;'>" + DataSourceDataProvider.getInstance().getemployeenamebyloginId(ajaxHandlerAction.getCreatedBy()) + "</p></font> </td></tr>");
                        htmlText.append("<tr><td><font color='#111728' size='2' face='Arial' style='font-weight:600;'><p><u>Task Details:</u></p></font></td></tr>");
                        // htmlText.append("<tr><td><font color='#3960D2' size='2' face='Arial' style='font-weight:600;'> Issue Id</font>:  <font color='#111728' size='2' face='Arial' style='font-weight:600;'>"+taskId+"</font> </td></tr>");


                        htmlText.append("<tr><td><font color='#3960D2' size='2' face='Arial' style='font-weight:600;'> Issue Title</font>:  <font color='#111728' size='2' face='Arial' style='font-weight:600;'>Bridge Issue</font> </td></tr>");

                        if ((ajaxHandlerAction.getBridgeCode() != null) && !"".equals(ajaxHandlerAction.getBridgeCode())) {
                            htmlText.append("<tr><td><font color='#3960D2' size='2' face='Arial' style='font-weight:600;'> Bridge Extension</font>:  <font color='#111728' size='2' face='Arial' style='font-weight:600;'>" + ajaxHandlerAction.getBridgeCode() + "</font> </td></tr>");
                        }
                        if ((ajaxHandlerAction.getPriority() != null) && !"".equals(ajaxHandlerAction.getPriority())) {
                            htmlText.append("<tr><td><font color='#3960D2' size='2' face='Arial' style='font-weight:600;'> Issue Severity</font>:  <font color='#111728' size='2' face='Arial' style='font-weight:600;'>" + ajaxHandlerAction.getPriority() + "</font> </td></tr>");
                        }
                        if ((ajaxHandlerAction.getCreatedBy() != null) && !"".equals(ajaxHandlerAction.getCreatedBy())) {
                            htmlText.append("<tr><td><font color='#3960D2' size='2' face='Arial' style='font-weight:600;'> Created By</font>:  <font color='#111728' size='2' face='Arial' style='font-weight:600;'>" + ajaxHandlerAction.getCreatedBy() + "</font> </td></tr>");
                        }
                        if ((ajaxHandlerAction.getCreatedBy() != null) && !"".equals(ajaxHandlerAction.getCreatedBy())) {
                            htmlText.append("<tr><td><font color='#3960D2' size='2' face='Arial' style='font-weight:600;'> Created By Email</font>:  <font color='#111728' size='2' face='Arial' style='font-weight:600;'>" + ajaxHandlerAction.getCreatedBy() + "@miraclesoft.com </font> </td></tr>");
                        }

                        if ((ajaxHandlerAction.getComments() != null) && !"".equals(ajaxHandlerAction.getComments())) {
                            htmlText.append("<tr><td><font color='#3960D2' size='2' face='Arial' style='font-weight:600;'> Comments</font>:  <font color='#111728' size='2' face='Arial' style='font-weight:600;'>" + ajaxHandlerAction.getComments() + " </font> </td></tr>");
                        }
                        htmlText.append("<tr><td><font color='#3960D2', size='2' face='Arial' style='font-weight:600;'>Thank You</font> </td></tr>");
                        htmlText.append("<tr><td><font color='red', size='2' face='Arial' style='font-weight:600;'>*Note:Please do not reply to this e-mail. It was generated by our System.</font> </td></tr></table></body></html>");
                        /*htmlText.append("<font color='blue' size='2' face='Arial'>");
                        htmlText.append("<p>A Task has been cerated by  " + loggedInEmpName + "  <br> ");
                        htmlText.append("<p><u>Task Details:</u><br> ");
                        htmlText.append("Issue Id:  " + taskId + " <br> ");
                        if ((issueTitle != null) && !"".equals(issueTitle)) {
                        htmlText.append("Issue Title: " + issueTitle + "<br> ");
                        }
                        if ((priority != null) && !"".equals(priority)) {
                        htmlText.append("Issue Severity: " + priority + " <br> ");
                        }
                        if ((getCreatedBy() != null) && !"".equals(getCreatedBy())) {
                        htmlText.append("Created By: " + getCreatedBy() + " <br> ");
                        }
                        if (getResourceType().equalsIgnoreCase("e")) {
                        if ((getCreatedBy() != null) && !"".equals(getCreatedBy())) {
                        htmlText.append("Created By Email : " + getCreatedBy() + "@miraclesoft.com<br>");
                        }
                        } else {
                        if ((getCreatedBy() != null) && !"".equals(getCreatedBy())) {
                        htmlText.append("Created By Email : " + DataSourceDataProvider.getInstance().getContactOfficeMail(empId) + "<br>");
                        }
                        
                        }
                        if ((comments != null) && !"".equals(comments)) {
                        htmlText.append("Description : " + comments + " <br>");
                        }
                        htmlText.append("<br><br> Thank you.</p></font> <font color='red', size='2' face='Arial'>*Note:Please do not reply to this e-mail. It was generated by our System.</font> </body></html> ");*/
                        bodyContent = htmlText.toString();
                        toAddress = ajaxHandlerAction.getAssignTo() + "@miraclesoft.com";

                        //ServiceLocator.getMailServices().doAddEmailLog(toAddress, cCAddress, issueTitle, bodyContent, createdDate, bCCAddress);
                        ServiceLocator.getMailServices().doAddEmailLogNew(toAddress, cCAddress, "Bridge Issue", bodyContent, createdDate, bCCAddress, "Tasks");



                    }

                } else {
                    responseString = "<font size='2' color='red'>creation failed!</font>";
                }


            } else {
                responseString = "<font size='2' color='red'>Bridge extension does not exists..!</font>";
            }
            // System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
            responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {

                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }
    /* Bridge Management System End  */
//
//    public boolean addInvestmentdetails(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {
//
//        Connection connection = null;
//        PreparedStatement preparedStatement = null;
//        ResultSet resultSet = null;
//        String resutMessage = "";
//        boolean isInserted = false;
//        String queryString = "INSERT INTO `tblInvestments` ( `Inv_Name`, `Country`, `StartDate`, `EndDate`, `TotalExpenses`,`Currency`,`Location`,`Description`,`AttachmentFileName`,`AttachmentLocation`,`CreatedBy`)"
//                + " VALUES(?,?,?,?,?,?,?,?,?,?,?)";
//        try {
//            connection = ConnectionProvider.getInstance().getConnection();
//            preparedStatement = connection.prepareStatement(queryString);
//            preparedStatement.setString(1, ajaxHandlerAction.getInvestmentName());
//
//            preparedStatement.setString(2, ajaxHandlerAction.getCountryInvestment());
//            preparedStatement.setString(3, DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getStartDateInvestment()));
//            if (ajaxHandlerAction.getEndDateInvestment() != null && !"".equals(ajaxHandlerAction.getEndDateInvestment())) {
//                preparedStatement.setString(4, DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getEndDateInvestment()));
//            } else {
//                preparedStatement.setNull(4, java.sql.Types.VARCHAR);
//            }
//            preparedStatement.setDouble(5, ajaxHandlerAction.getTotalExpenseAmount());
//            preparedStatement.setString(6, ajaxHandlerAction.getUsd());
//            preparedStatement.setString(7, ajaxHandlerAction.getLocationInvestment());
//            if (ajaxHandlerAction.getInvestmentDesc() != null || !"".equals(ajaxHandlerAction.getInvestmentDesc())) {
//                preparedStatement.setString(8, ajaxHandlerAction.getInvestmentDesc());
//            } else {
//                preparedStatement.setString(8, "");
//            }
//            if (ajaxHandlerAction.getAttachInvestment() != null || !"".equals(ajaxHandlerAction.getAttachInvestment())) {
//                preparedStatement.setString(9, ajaxHandlerAction.getAttachInvestment());
//            } else {
//                preparedStatement.setString(9, "");
//            }
//            if (ajaxHandlerAction.getAttachmentLocation() != null || !"".equals(ajaxHandlerAction.getAttachmentLocation())) {
//                preparedStatement.setString(10, ajaxHandlerAction.getAttachmentLocation());
//            } else {
//                preparedStatement.setString(10, "");
//            }
//            preparedStatement.setString(11, ajaxHandlerAction.getCreatedBy());
//            isInserted = preparedStatement.execute();
//        } catch (SQLException se) {
//            se.printStackTrace();
//            throw new ServiceLocatorException(se);
//        } finally {
//            try {
//                if (resultSet != null) {
//                    resultSet.close();
//                    resultSet = null;
//                }
//                if (preparedStatement != null) {
//                    preparedStatement.close();
//                    preparedStatement = null;
//                }
//                if (connection != null) {
//                    connection.close();
//                    connection = null;
//                }
//            } catch (SQLException se) {
//                se.printStackTrace();
//                throw new ServiceLocatorException(se);
//            }
//        }
//        return isInserted;
//    }
//
//    public boolean updateInvestmentdetails(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {
//        boolean isUpdated = false;
//        Connection connection = null;
//        PreparedStatement preparedStatement = null;
//        ResultSet resultSet = null;
//        String queryString = "";
//        try {
//            queryString = "update tblInvestments set Inv_Name=?,Country=?,StartDate=?,EndDate=?,TotalExpenses=?,Currency=?,Location=?,Description=?,ModifiedBy=?,ModifiedDate=? where Inv_Id=?";
//            connection = ConnectionProvider.getInstance().getConnection();
//            preparedStatement = connection.prepareStatement(queryString);
//            preparedStatement.setString(1, ajaxHandlerAction.getInvestmentName());
//            preparedStatement.setString(2, ajaxHandlerAction.getCountryInvestment());
//            preparedStatement.setDate(3, DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getStartDateInvestment()));
//            if (ajaxHandlerAction.getEndDateInvestment() != null && !"".equals(ajaxHandlerAction.getEndDateInvestment())) {
//                preparedStatement.setDate(4, DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getEndDateInvestment()));
//            } else {
//                preparedStatement.setNull(4, java.sql.Types.VARCHAR);
//            }
//
//            preparedStatement.setDouble(5, ajaxHandlerAction.getTotalExpenseAmount());
//            preparedStatement.setString(6, ajaxHandlerAction.getUsd());
//            preparedStatement.setString(7, ajaxHandlerAction.getLocationInvestment());
//            if (ajaxHandlerAction.getInvestmentDesc() != null && !"".equals(ajaxHandlerAction.getInvestmentDesc())) {
//                preparedStatement.setString(8, ajaxHandlerAction.getInvestmentDesc());
//            } else {
//                preparedStatement.setString(8, "");
//            }
//            preparedStatement.setString(9, ajaxHandlerAction.getModifiedBy());
//            preparedStatement.setTimestamp(10, DateUtility.getInstance().getCurrentMySqlDateTime());
//            preparedStatement.setInt(11, ajaxHandlerAction.getId());
//            isUpdated = preparedStatement.execute();
//
//        } catch (SQLException se) {
//            se.printStackTrace();
//            throw new ServiceLocatorException(se);
//        } finally {
//            try {
//                if (resultSet != null) {
//                    resultSet.close();
//                    resultSet = null;
//                }
//                if (preparedStatement != null) {
//                    preparedStatement.close();
//                    preparedStatement = null;
//                }
//                if (connection != null) {
//                    connection.close();
//                    connection = null;
//                }
//            } catch (SQLException se) {
//                throw new ServiceLocatorException(se);
//            }
//        }
//
//        return isUpdated;
//    }

    public String getInvestmentDetails(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String activityDetails = "";
        int i = 0;
        String queryString = "";
        JSONObject subJson = null;
        try {
            queryString = "SELECT * FROM tblInvestments WHERE Inv_Id='" + ajaxHandlerAction.getId() + "'";
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery(queryString);
            if (resultSet.next()) {
                subJson = new JSONObject();
                subJson.put("Inv_Name", resultSet.getString("Inv_Name"));
                subJson.put("Country", resultSet.getString("Country"));
                subJson.put("StartDate", DateUtility.getInstance().convertToviewFormat(resultSet.getString("StartDate")));
                if (resultSet.getString("EndDate") != null && !"".equals(resultSet.getString("EndDate"))) {
                    subJson.put("EndDate", DateUtility.getInstance().convertToviewFormat(resultSet.getString("EndDate")));
                } else {
                    subJson.put("EndDate", "");
                }
                subJson.put("TotalExpenses", resultSet.getString("TotalExpenses"));
                subJson.put("Currency", resultSet.getString("Currency"));
                subJson.put("Location", resultSet.getString("Location"));
                subJson.put("Description", resultSet.getString("Description"));
                subJson.put("AttachmentFileName", resultSet.getString("AttachmentFileName"));
                subJson.put("InvestmentType", resultSet.getString("InvestmentType"));
                subJson.put("ConferenceId", resultSet.getInt("ConferenceId"));
                subJson.put("CreatedBy", resultSet.getString("CreatedBy"));
                subJson.put("CreatedDate", DateUtility.getInstance().convertToviewFormat(resultSet.getString("CreatedDate")));
            }


        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return subJson.toString();
    }

    public String contactSearchAjaxList(HttpServletRequest httpServletRequest, AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String createdBy = "";
        String totalStream = "";
        String queryString = "";
        int i = 0;

        String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
        int isTeamLead = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_IS_TEAM_LEAD).toString());
        int userRoleId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_ROLE_ID).toString());
        Map team = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP_FOR_LEAVESEARCH);
        // System.out.println(loginId+".........."+isTeamLead+"..."+userRoleId);   
        //System.out.println("m"+team);

//      Set teamSet=team.keySet();
        String teamMembers = getKeys(team, ",");
        //  teamMembers=teamMembers.replaceAll("'","");

        // System.out.println("teamSet.."+teamMembers);

        try {

            queryStringBuffer = new StringBuffer();


            queryStringBuffer.append("SELECT tblCrmContact.id As contactId,tblCrmAccount.Id As accountId,CONCAT(tblCrmContact.FirstName,'.',tblCrmContact.LastName) AS ContactName,");
            queryStringBuffer.append(" tblCrmContact.Email1 As Email, tblCrmAccount.NAME AS CompanyName,tblCrmAccount.DateLastActivity AS LastActivityDate FROM tblCrmContact LEFT JOIN ");

            queryStringBuffer.append(" tblCrmAccount ON(tblCrmContact.AccountId=tblCrmAccount.Id) where 1=1 ");

            if (userRoleId == 4) {
                if (isTeamLead == 1) {
                    // queryStringBuffer.append(" AND tblCrmContact.AccountId IN ((SELECT DISTINCT AccountId FROM tblCrmAccountTeam WHERE TeamMemberId="+loginId+"),"+teamMembers+")");
                    queryStringBuffer.append(" AND tblCrmContact.AccountId IN (SELECT DISTINCT AccountId FROM tblCrmAccountTeam WHERE TeamMemberId IN('" + loginId + "'," + teamMembers + ")) ");
                } else {
                    queryStringBuffer.append(" AND tblCrmContact.AccountId IN (SELECT DISTINCT AccountId FROM tblCrmAccountTeam WHERE TeamMemberId='" + loginId + "') ");
                }

            }


            if (!"".equals(ajaxHandlerAction.getContactName()) && ajaxHandlerAction.getContactName() != null) {

                queryStringBuffer.append(" AND (tblCrmContact.FirstName like '%" + ajaxHandlerAction.getContactName().trim() + "%' OR tblCrmContact.LastName like '%" + ajaxHandlerAction.getContactName().trim() + "%') ");

                //  queryString = queryString +" AND ( FirstName like '%"+ getContactName().trim()+"%' OR LastName like '%"+ getContactName().trim()+"%')";  
            }

            if (!"".equals(ajaxHandlerAction.getContactEmailID()) && ajaxHandlerAction.getContactEmailID() != null) {
                queryStringBuffer.append("  AND tblCrmContact.Email1 like '%" + ajaxHandlerAction.getContactEmailID().trim() + "%' ");
                // queryString = queryString +" AND Email1 like '%"+ getContactEmailID().trim()+"%'";  
            }
            if (!"".equals(ajaxHandlerAction.getContactPhoneNo()) && ajaxHandlerAction.getContactPhoneNo() != null) {
                queryStringBuffer.append(" AND tblCrmContact.OfficePhone like '%" + ajaxHandlerAction.getContactPhoneNo().trim() + "%' ");
                // queryString = queryString +" AND OfficePhone like '%"+ getContactPhoneNo().trim()+"%'";  
            }
            if (!"".equals(ajaxHandlerAction.getContactCompany()) && ajaxHandlerAction.getContactCompany() != null) {
                queryStringBuffer.append(" AND tblCrmAccount.NAME like '%" + ajaxHandlerAction.getContactCompany().trim() + "%' ");
                //   queryString = queryString +" AND NAME like '%"+ getContactCompany().trim()+"%'";  
            }
            queryStringBuffer.append(" Order By tblCrmAccount.DateLastActivity desc LIMIT 50 ");






            // System.out.println("requirementAjaxList1 queryStringBuffer.toString()----" + queryStringBuffer.toString());

            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryStringBuffer.toString());
            //System.err.println("Account Activities:"+queryString);
            while (resultSet.next()) {

                int contactId = resultSet.getInt("contactId");
                int accountId = resultSet.getInt("accountId");

                String ContactName = resultSet.getString("ContactName");
                String Email = resultSet.getString("Email");
                String CompanyName = resultSet.getString("CompanyName");

                String LastActivityDate = resultSet.getString("LastActivityDate");

                i++;
                /*createdBy=resultSet.getString("CreatedById");
                count =resultSet.getInt("total");*/
                //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+status+"|"+datedue+"|"+contactId+"|"+accountId+"|"+"^";
                //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+status+"|"+datedue+"|"+"^";
                // totalStream = totalStream + "|" + contactId + "|" + accountId + "|" + ContactName + "|" + Email + "|"  + CompanyName + "|" + LastActivityDate + "^";
                totalStream = totalStream + "#^$" + contactId + "#^$" + accountId + "#^$" + ContactName + "#^$" + Email + "#^$" + CompanyName + "#^$" + LastActivityDate + "*@!";
                //  totalActivities=totalActivities+count;
            }
            stringBuffer.append(totalStream);
            stringBuffer.append("addto");

            stringBuffer.append(i);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.err.println("response string is"+stringBuffer.toString());
        return stringBuffer.toString();
    }

    public String getCampaignContactsList(HttpServletRequest httpServletRequest, AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {
        //   System.out.println("start");
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        ResultSet resultSet1 = null;
        String createdBy = "";
        String totalStream = "";
        String opportunity = "";
        String companyName = "";
        String email = "";
        String phone = "";
        int conId = 0;
        String contactName = "";
        int i = 0;
        Map<Integer, String> contactIdMap = new TreeMap<Integer, String>();
        try {
            String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
            String roleName = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_ROLE_NAME).toString();

            // queryString = "SELECT Id,Title,CreatedBy,CurrStatus FROM tblCrmLeads WHERE AccountId=" + accId;
            // queryString = "SELECT Id,ContactId FROM tblCrmActivity WHERE CampaignId="+campaignId+" ORDER BY CreatedDate DESC";
            queryString = "SELECT Id,ContactId FROM tblCrmActivity WHERE CampaignId=" + ajaxHandlerAction.getCampaignId() + " ";

            if (ajaxHandlerAction.getContactStartDate() != null && !"".equalsIgnoreCase(ajaxHandlerAction.getContactStartDate())) {
                queryString = queryString + " AND (DATE(CreatedDate))>='" + DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getContactStartDate()) + "' ";
            }
            if (ajaxHandlerAction.getContactEndDate() != null && !"".equalsIgnoreCase(ajaxHandlerAction.getContactEndDate())) {
                queryString = queryString + " AND (DATE(CreatedDate))<='" + DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getContactEndDate()) + "' ";
            }

            if (roleName.equals("Sales")) {
                queryString = queryString + " AND CreatedById='" + loginId + "' ";
            }
            queryString = queryString + " ORDER BY CreatedDate DESC";

            // String contactQuery = "SELECT Id, CONCAT(FirstName,' ',MiddleName,'.',LastName) AS ContactName,Email1,CellPhone FROM tblCrmContact WHERE Id=?" ;
            String contactQuery = "SELECT tblCrmContact.id AS contactId,tblCrmAccount.Id AS accountId,"
                    + "CONCAT(tblCrmContact.FirstName,'.',tblCrmContact.LastName) AS ContactName,"
                    + " tblCrmContact.Email1 AS Email1, tblCrmAccount.NAME AS CompanyName,tblCrmContact.CellPhone AS CellPhone"
                    + "  FROM tblCrmContact LEFT JOIN  tblCrmAccount ON(tblCrmContact.AccountId=tblCrmAccount.Id) WHERE tblCrmContact.id=?";
            //  System.out.println("Query-->"+contactQuery);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            while (resultSet.next()) {

                int Id = resultSet.getInt("Id");
                String ContactId = resultSet.getString("ContactId");
                contactIdMap.put(Id, ContactId);
                //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+contactName+"|"+datedue+"|"+actid+"|"+"^";
                //  totalActivities=totalActivities+count;
            }
            preparedStatement = connection.prepareStatement(contactQuery);

            for (Map.Entry<Integer, String> entry : contactIdMap.entrySet()) {
                Integer key = entry.getKey();
                String value = entry.getValue();
                // System.out.println("value -->"+value);
                String[] parts = value.split("\\,");
                // System.out.println("Parts -->"+parts.length);
                if (parts.length > 0 && !"".equals(value.trim())) {
                    for (int j = 0; j < parts.length; j++) {
                        preparedStatement.setInt(1, Integer.parseInt(parts[j]));
                        resultSet1 = preparedStatement.executeQuery();
                        while (resultSet1.next()) {
                            i++;
                            conId = resultSet1.getInt("contactId");
                            contactName = resultSet1.getString("ContactName");
                            email = resultSet1.getString("Email1");
                            companyName = resultSet1.getString("CompanyName");
                            //  phone = resultSet1.getString("CellPhone");
                            totalStream = totalStream + i + "#^$" + conId + "#^$" + contactName + "#^$" + email + "#^$" + companyName + "*@!";
                        }

                    }
                }



            }
            //  System.out.println("totalStream"+totalStream);     
            stringBuffer.append(totalStream);
            stringBuffer.append("addto");

            stringBuffer.append(i);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return stringBuffer.toString();
    }

    public String getCampaignSearch(AjaxHandlerAction ajaxHandlerAction, int userRoleId) throws ServiceLocatorException {
        // int userRoleId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_ROLE_ID).toString());

        String responseString = "";
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String createdBy = "";
        String totalStream = "";
        int updatedRows;
        int i = 0;
        String opportunity = "";
        try {
            /* new code */

            String startDate = ajaxHandlerAction.getCampaignStartDate();
            String endDate = ajaxHandlerAction.getCampaignEndDate();
            String status = ajaxHandlerAction.getCampaignStatus();
            String title = ajaxHandlerAction.getCampaignTitle();

            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spCampaignSearch(?,?,?,?,?,?)}");
            if (startDate != null && !"".equals(startDate)) {
                callableStatement.setString(1, DateUtility.getInstance().convertStringToMySQLDate(startDate));
                //queryString = queryString + " AND (DATE(CampaignStartDate) = '" + DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getCampaignStartDate()) + "')";

            } else {
                callableStatement.setString(1, "%");
            }
            if (endDate != null && !"".equals(endDate)) {
                callableStatement.setString(2, DateUtility.getInstance().convertStringToMySQLDate(endDate));
                // queryString = queryString + "  AND (DATE(CampaignEndDate) = '" + DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getCampaignEndDate()) + "')";
            } else {
                callableStatement.setString(2, "%");
            }

            if (!"-1".equals(status) && status != null) {
                callableStatement.setString(3, status);
                //  queryString = queryString + " AND STATUS='" + ajaxHandlerAction.getCampaignStatus() + "' ";
            } else {
                callableStatement.setString(3, "%");
            }
            if (endDate != null && !"".equals(title)) {
                callableStatement.setString(4, title + "%");
                // queryString = queryString + "  AND (DATE(CampaignEndDate) = '" + DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getCampaignEndDate()) + "')";
            } else {
                callableStatement.setString(4, "%");
            }
            if (userRoleId == 4) {

                callableStatement.setString(5, "Active,Completed");
            } else {
                callableStatement.setString(5, "Active,Completed,InActive");
            }

            callableStatement.registerOutParameter(6, java.sql.Types.VARCHAR);
            updatedRows = callableStatement.executeUpdate();
            responseString = callableStatement.getString(6);
            // System.out.println("response string is:->" + responseString);

            /* new code end */

            /* queryString = "SELECT * from tblCrmCampaign WHERE 1=1";
            if (ajaxHandlerAction.getCampaignStartDate() != null && !"".equals(ajaxHandlerAction.getCampaignStartDate())) {
            queryString = queryString + " AND (DATE(CampaignStartDate) = '" + DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getCampaignStartDate()) + "')";
            
            }
            if (ajaxHandlerAction.getCampaignEndDate() != null && !"".equals(ajaxHandlerAction.getCampaignEndDate())) {
            queryString = queryString + "  AND (DATE(CampaignEndDate) = '" + DateUtility.getInstance().getMysqlDate(ajaxHandlerAction.getCampaignEndDate()) + "')";
            }
            // System.out.println("getCampaignStatus"+getCampaignStatus());
            if (!"-1".equals(ajaxHandlerAction.getCampaignStatus()) && ajaxHandlerAction.getCampaignStatus() != null) {
            queryString = queryString + " AND STATUS='" + ajaxHandlerAction.getCampaignStatus() + "' ";
            } else {
            if (userRoleId == 4) {
            queryString = queryString + " AND STATUS!='InActive'";
            }
            }
            
            if (ajaxHandlerAction.getCampaignTitle() != null && !"".equals(ajaxHandlerAction.getCampaignTitle())) {
            queryString = queryString + " AND CampaignName like '%" + ajaxHandlerAction.getCampaignTitle().trim() + "%'";
            }
            queryString = queryString + "  ORDER BY CreatedDate DESC";
            
            
            System.out.println("----------->" + queryString);
            
            
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            while (resultSet.next()) {
            System.out.println("checking");
            i++;
            int id = resultSet.getInt("Id");
            String campaignName = resultSet.getString("CampaignName");
            String createdDate = resultSet.getString("CreatedDate");
            String createdBy1 = resultSet.getString("CreatedBy");
            String campaignEndDate = resultSet.getString("CampaignEndDate");
            String Status = resultSet.getString("Status");
            int contactsCount = DataSourceDataProvider.getInstance().getContactsByCampaignId(id);
            
            responseString = responseString + campaignName + "#^$" + createdDate + "#^$" + createdBy1 + "#^$" + campaignEndDate + "#^$" + contactsCount + "#^$" + status + "#^$" + id + "*@!";
            
            }
            if (i == 0) {
            responseString = "NoData";
            } */

            if ("".equals(responseString)) {
                responseString = "NoData";
            }
            //   System.out.println("resutString" + responseString);


        } catch (Exception sqe) {
            sqe.printStackTrace();

        } finally {
            try {

                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public String getLeadDetailsList(int accId, String roleName) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String createdBy = "";
        String totalStream = "";
        int i = 0;
        String opportunity = "";
        try {

            // queryString = "SELECT Id,Title,CreatedBy,CurrStatus FROM tblCrmLeads WHERE AccountId=" + accId;
            queryString = "SELECT Id,Title,tblCrmLeads.CreatedDate,TotalExpenses,ExpiryDate,CurrStatus FROM tblCrmLeads INNER JOIN tblInvestments ON tblCrmLeads.InvestmentId=tblInvestments.Inv_Id  WHERE AccountId=" + accId + " AND tblInvestments.InvestmentType='P' ORDER BY tblCrmLeads.CreatedDate DESC";


            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            while (resultSet.next()) {
                i++;
                String Id = resultSet.getString("Id");
                String Title = resultSet.getString("Title");
                String CreatedDate = resultSet.getString("CreatedDate");
                String TotalExpenses = resultSet.getString("TotalExpenses");
                String ExpiryDate = resultSet.getString("ExpiryDate");
                String CurrStatus = resultSet.getString("CurrStatus");
                opportunity = DataSourceDataProvider.getInstance().isAssociatedWithOpportunity(accId, resultSet.getInt("Id"));
                /*createdBy=resultSet.getString("CreatedById");
                count =resultSet.getInt("total");*/
                //     totalStream = totalStream + i + "#^$" + Id+ "#^$" + Title + "#^$" + CreatedDate + "#^$" + TotalExpenses  + "#^$" + ExpiryDate  + "#^$" + CurrStatus +"*@!";
                if (roleName.equals("Sales")) {
                    totalStream = totalStream + i + "#^$" + Id + "#^$" + Title + "#^$" + CreatedDate + "#^$" + opportunity + "#^$" + ExpiryDate + "#^$" + CurrStatus + "*@!";

                } else {
                    totalStream = totalStream + i + "#^$" + Id + "#^$" + Title + "#^$" + CreatedDate + "#^$" + TotalExpenses + "#^$" + opportunity + "#^$" + ExpiryDate + "#^$" + CurrStatus + "*@!";

                }


                //totalStream=totalStream+i+"|"+createdDate+"|"+actType+"|"+description+"|"+comments+"|"+assignedToId+"|"+contactName+"|"+datedue+"|"+actid+"|"+"^";
                //  totalActivities=totalActivities+count;
            }

            stringBuffer.append(totalStream);
            stringBuffer.append("addto");

            stringBuffer.append(i);

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return stringBuffer.toString();
    }

    public String getaccountRenewalByState(String State, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        Statement statement = null;
        String responseString = "";
        boolean isDataAvailable = false;
        Map teamMembers = new TreeMap();
        String state = "";
        int isSingle = 0;
        String country = "USA";
        List stateList = new ArrayList();
        //   System.out.println("entered into getaccountRenewalByState impl"+State);
        DataSourceDataProvider dataSourceDataProvider = null;
        try {
            if (State.equals("-1")) {
                stateList = (ArrayList) dataSourceDataProvider.getInstance().getStates(country);

                if (stateList.size() > 0) {
                    state = state + ",'" + stateList + "'";
                } else {
                    state = "'" + stateList + "'";
                }
                isSingle++;
            }
            queryString = "SELECT tblLKStates.Description AS State ,MONTHNAME( tblCrmAccount.DateOfPPARenewal) AS Month,COUNT(tblCrmAddress.State) AS RenewalsOfMonth ";
            queryString = queryString + " FROM tblCrmAddress  JOIN tblCrmAccount ON (tblCrmAddress.ObjectId= tblCrmAccount.Id) JOIN tblLKStates ON (tblLKStates.Description=tblCrmAddress.State)  WHERE YEAR(DateOfPPARenewal) LIKE YEAR(NOW()) ";
            if (state.contains(",") || isSingle > 0) {

                queryString = queryString + " AND tblCrmAddress.State LIKE '%' ";
            } else {
                queryString = queryString + " AND tblCrmAddress.State LIKE '" + State + "' ";
            }
            queryString = queryString + "GROUP BY tblCrmAddress.State ORDER BY tblCrmAddress.State ";
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            List list = new ArrayList();
            Map renewalMap = null;
            Set set = new HashSet();
            String reqState = "";
            while (resultSet.next()) {
                renewalMap = new HashMap();
                renewalMap.put("State", resultSet.getString("State"));
                renewalMap.put("Month", resultSet.getString("Month"));
                renewalMap.put("RenewalsOfMonth", resultSet.getInt("RenewalsOfMonth"));
                list.add(renewalMap);
                //set.add(resultSet.getString("State"));
            }

            if (isSingle > 0) {
                int count = 1;
                for (Object key : stateList) {
                    isDataAvailable = true;
                    reqState = (String) key;
                    responseString = responseString + count + "|" + reqState;
                    for (Month renewalMonth : Month.values()) {
                        boolean monthExist = false;
                        for (Object temp : list) {
                            Map empMap = (Map) temp;
                            if (reqState.equals(empMap.get("State").toString()) && renewalMonth.name().equals(empMap.get("Month").toString())) {
                                responseString = responseString + "|" + empMap.get("RenewalsOfMonth").toString();
                                monthExist = true;
                                break;
                            }
                        }
                        if (!monthExist) {
                            responseString = responseString + "|" + 0;
                        }
                    }
                    responseString = responseString + "^";
                    count++;
                }

            } else {
                isDataAvailable = true;
                int count = 1;

                responseString = responseString + count + "|" + State;
                for (Month renewalMonth : Month.values()) {
                    boolean monthExist = false;
                    for (Object temp : list) {
                        Map empMap = (Map) temp;
                        if (State.equals(empMap.get("State").toString()) && renewalMonth.name().equals(empMap.get("Month").toString())) {
                            responseString = responseString + "|" + empMap.get("RenewalsOfMonth").toString();
                            monthExist = true;
                            break;
                        }
                    }
                    if (!monthExist) {
                        responseString = responseString + "|" + 0;
                    }
                }
                responseString = responseString + "^";
            }


            if (!isDataAvailable) {
                responseString = "no data";
            }

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

   /* public String getReqDashBoard(AjaxHandlerAction ajaxHandlerAction, String myTeamMembers, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String responseString = "";
// test
        int i = 0;
        DataSourceDataProvider dataSourceDataProvider = null;
        try {
String accountId="";
       //     String accountId = DataSourceDataProvider.getInstance().getAccountIdsList(myTeamMembers);
            //System.out.println("the output"+accountId);
            queryString = "select DISTINCT(tblRecRequirement.Id),tblCrmAccount.NAME AS accountname,tblRecRequirement.JobTitle AS requirementname,tblRecRequirement.STATUS as status,tblRecRequirement.TargetRate AS VALUE,DATE(tblRecRequirement.DatePosted) AS startdate,"
                    + "tblRecRequirement.CreatedBy,tblCrmAddress.State,tblRecRequirement.Practice, tblRecRequirement.State ,tblRecRequirement.AssignToTechLead AS Presales,tblRecRequirement.AssignedTo AS recruiter,tblRecRequirement.Duration "
                    + "from tblRecRequirement LEFT JOIN tblCrmAccount on  (tblRecRequirement.CustomerId=tblCrmAccount.Id) LEFT JOIN tblCrmAccountTeam ON (tblCrmAccount.Id =tblCrmAccountTeam.AccountId) LEFT JOIN tblCrmAddress ON (tblCrmAddress.Id = tblCrmAccount.PrimaryAddressId) LEFT JOIN tblCrmAccountDetails ON ( tblCrmAccountDetails.AccountId = tblCrmAccount.Id)"
                    + " where FIND_IN_SET(tblCrmAccount.Id,'" + accountId + "') ";
            if (ajaxHandlerAction.getStartDate() != null && !"".equals(ajaxHandlerAction.getStartDate())) {
                queryString = queryString + "  AND (DATE(tblRecRequirement.DatePosted) >= '" + DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getStartDate()) + "')";
            }
            if (ajaxHandlerAction.getEndDate() != null && !"".equals(ajaxHandlerAction.getEndDate())) {
                queryString = queryString + "  AND (DATE(tblRecRequirement.DatePosted)<='" + DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getEndDate()) + "')";
            }

            //ajaxHandlerAction.getEndDate()!=null && !"".equals(ajaxHandlerAction.getEndDate()) 
            queryString = queryString + "  AND tblCrmAccount.NAME IS NOT NULL AND tblCrmAccount.NAME NOT LIKE '' ";
            if (ajaxHandlerAction.getReqJobTitle() != null && !"".equals(ajaxHandlerAction.getReqJobTitle())) {
                //queryString = queryString + " AND tblRecRequirement.JobTitle LIKE '%'";
                queryString = queryString + " AND tblRecRequirement.JobTitle LIKE '%" + ajaxHandlerAction.getReqJobTitle() + "%'";
            }

            if (!"".equals(ajaxHandlerAction.getRequirementstatus())) {
                queryString = queryString + " AND tblRecRequirement.STATUS IN( " + ajaxHandlerAction.getRequirementstatus() + ")";
            }


            if ("-1".equals(ajaxHandlerAction.getPractice())) {
                queryString = queryString + " AND tblRecRequirement.Practice LIKE '%'";
            } else {
                queryString = queryString + " AND tblRecRequirement.Practice LIKE '" + ajaxHandlerAction.getPractice() + "'";
            }
            queryString = queryString + " ORDER BY tblCrmAccount.NAME,tblRecRequirement.JobTitle LIMIT 150";
            // System.out.println("queryString " + queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            if (resultSet == null) {
                responseString = responseString + "addTo0";
            } else {
                while (resultSet.next()) {
                    i++;
                    responseString = responseString + i + "#^$";


                    if (resultSet.getString("AccountName") != null && !"".equals(resultSet.getString("AccountName"))) {
                        responseString = responseString + resultSet.getString("AccountName") + "#^$";

                    } else {
                        responseString = responseString + "-" + "#^$";
                    }
                    if (resultSet.getString("RequirementName") != null && !"".equals(resultSet.getString("RequirementName"))) {
                        responseString = responseString + resultSet.getString("RequirementName") + "#^$";

                    } else {
                        responseString = responseString + "-" + "#^$";
                    }
                    if (resultSet.getString("status") != null && !"".equals(resultSet.getString("status"))) {
                        responseString = responseString + resultSet.getString("status") + "#^$";

                    } else {
                        responseString = responseString + "-" + "#^$";
                    }
                    if (resultSet.getString("Duration") != null && !"".equals(resultSet.getString("Duration"))) {
                        responseString = responseString + resultSet.getString("Duration") + "#^$";

                    } else {
                        responseString = responseString + "-" + "#^$";
                    }
                    if (resultSet.getString("value") != null && !"".equals(resultSet.getString("value"))) {
                        responseString = responseString + resultSet.getString("value") + "#^$";

                    } else {
                        responseString = responseString + "-" + "#^$";
                    }

                    if (resultSet.getString("CreatedBy") != null && !"".equals(resultSet.getString("CreatedBy"))) {
                        responseString = responseString + resultSet.getString("CreatedBy") + "#^$";

                    } else {
                        responseString = responseString + "-" + "#^$";
                    }
                    if (resultSet.getString("Presales") != null && !"".equals(resultSet.getString("Presales"))) {
                        responseString = responseString + resultSet.getString("Presales") + "#^$";

                    } else {
                        responseString = responseString + "-" + "#^$";
                    }
                    if (resultSet.getString("recruiter") != null && !"".equals(resultSet.getString("recruiter"))) {
                        responseString = responseString + resultSet.getString("recruiter") + "#^$";

                    } else {
                        responseString = responseString + "-" + "#^$";
                    }



                    if (resultSet.getString("State") != null && !"".equals(resultSet.getString("State")) && !"--Please Select".equals(resultSet.getString("State")) && !"-1".equals(resultSet.getString("State"))) {
                        responseString = responseString + resultSet.getString("State") + "#^$";

                    } else {
                        responseString = responseString + "-" + "#^$";
                    }
                    if (resultSet.getString("StartDate") != null && !"".equals(resultSet.getString("StartDate"))) {
                        responseString = responseString + resultSet.getString("StartDate") + "*@!";

                    } else {
                        responseString = responseString + "-" + "*@!";
                    }

//                

                }
            }
            // System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;

    }*/
 public String getReqDashBoard(AjaxHandlerAction ajaxHandlerAction, String myTeamMembers,HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String responseString = "";
   CallableStatement callableStatement = null;
        int i = 0;
        DataSourceDataProvider dataSourceDataProvider = null;
          stringBuffer = new StringBuffer();
        try {
       //     System.out.println("in getReqDashBoard()");
         //   System.out.println("myTeamMembers in impl is---->"+myTeamMembers);
                  String titleType = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE);
                  String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
                 connection = ConnectionProvider.getInstance().getConnection();
               if(!titleType.equals("BDM")){      
                //    System.out.println("in  non BDM case case");
            String accountId = DataSourceDataProvider.getInstance().getAccountIdsList(myTeamMembers,httpServletRequest);
            //System.out.println("the output"+accountId);
            queryString = "select DISTINCT(tblRecRequirement.Id),tblCrmAccount.NAME AS accountname,tblRecRequirement.JobTitle AS requirementname,tblRecRequirement.STATUS as status,tblRecRequirement.TargetRate AS VALUE,DATE(tblRecRequirement.DatePosted) AS startdate,"
                    + "tblRecRequirement.CreatedBy,tblCrmAddress.State,tblRecRequirement.Practice, tblRecRequirement.State ,tblRecRequirement.AssignToTechLead AS Presales,tblRecRequirement.AssignedTo AS recruiter,tblRecRequirement.Duration "
                    + "from tblRecRequirement LEFT JOIN tblCrmAccount on  (tblRecRequirement.CustomerId=tblCrmAccount.Id) LEFT JOIN tblCrmAccountTeam ON (tblCrmAccount.Id =tblCrmAccountTeam.AccountId) LEFT JOIN tblCrmAddress ON (tblCrmAddress.Id = tblCrmAccount.PrimaryAddressId) LEFT JOIN tblCrmAccountDetails ON ( tblCrmAccountDetails.AccountId = tblCrmAccount.Id)"
                    + " where FIND_IN_SET(tblCrmAccount.Id,'" + accountId + "') ";
            
            // String titleType = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE);
                    if(titleType.equals("BDM")){
                      queryString = queryString + "  AND FIND_IN_SET(tblRecRequirement.CreatedBy,'" +myTeamMembers+ "') ";
                    }
            if (ajaxHandlerAction.getStartDate() != null && !"".equals(ajaxHandlerAction.getStartDate())) {
                queryString = queryString + "  AND (DATE(tblRecRequirement.DatePosted) >= '" + DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getStartDate()) + "')";
            }
            if (ajaxHandlerAction.getEndDate() != null && !"".equals(ajaxHandlerAction.getEndDate())) {
                queryString = queryString + "  AND (DATE(tblRecRequirement.DatePosted)<='" + DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getEndDate()) + "')";
            }

            //ajaxHandlerAction.getEndDate()!=null && !"".equals(ajaxHandlerAction.getEndDate()) 
            queryString = queryString + "  AND tblCrmAccount.NAME IS NOT NULL AND tblCrmAccount.NAME NOT LIKE '' ";
            if (ajaxHandlerAction.getReqJobTitle() != null && !"".equals(ajaxHandlerAction.getReqJobTitle())) {
                //queryString = queryString + " AND tblRecRequirement.JobTitle LIKE '%'";
                queryString = queryString + " AND tblRecRequirement.JobTitle LIKE '%" + ajaxHandlerAction.getReqJobTitle() + "%'";
            }

            if (!"".equals(ajaxHandlerAction.getRequirementstatus())) {
                queryString = queryString + " AND tblRecRequirement.STATUS IN( " + ajaxHandlerAction.getRequirementstatus() + ")";
            }


            if ("-1".equals(ajaxHandlerAction.getPractice())) {
                queryString = queryString + " AND tblRecRequirement.Practice LIKE '%'";
            } else {
                queryString = queryString + " AND tblRecRequirement.Practice LIKE '" + ajaxHandlerAction.getPractice() + "'";
            }
            queryString = queryString + " ORDER BY tblCrmAccount.NAME,tblRecRequirement.JobTitle LIMIT 150";
           //  System.out.println("queryString " + queryString);
           
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            if (resultSet == null) {
                responseString = responseString + "addTo0";
            } else {
                while (resultSet.next()) {
                    i++;
                    responseString = responseString + i + "#^$";


                    if (resultSet.getString("AccountName") != null && !"".equals(resultSet.getString("AccountName"))) {
                        responseString = responseString + resultSet.getString("AccountName") + "#^$";

                    } else {
                        responseString = responseString + "-" + "#^$";
                    }
                    if (resultSet.getString("RequirementName") != null && !"".equals(resultSet.getString("RequirementName"))) {
                        responseString = responseString + resultSet.getString("RequirementName") + "#^$";

                    } else {
                        responseString = responseString + "-" + "#^$";
                    }
                    if (resultSet.getString("status") != null && !"".equals(resultSet.getString("status"))) {
                        responseString = responseString + resultSet.getString("status") + "#^$";

                    } else {
                        responseString = responseString + "-" + "#^$";
                    }
                    if (resultSet.getString("Duration") != null && !"".equals(resultSet.getString("Duration"))) {
                        responseString = responseString + resultSet.getString("Duration") + "#^$";

                    } else {
                        responseString = responseString + "-" + "#^$";
                    }
                    if (resultSet.getString("value") != null && !"".equals(resultSet.getString("value"))) {
                        responseString = responseString + resultSet.getString("value") + "#^$";

                    } else {
                        responseString = responseString + "-" + "#^$";
                    }

                    if (resultSet.getString("CreatedBy") != null && !"".equals(resultSet.getString("CreatedBy"))) {
                        responseString = responseString + resultSet.getString("CreatedBy") + "#^$";

                    } else {
                        responseString = responseString + "-" + "#^$";
                    }
                    if (resultSet.getString("Presales") != null && !"".equals(resultSet.getString("Presales"))) {
                        responseString = responseString + resultSet.getString("Presales") + "#^$";

                    } else {
                        responseString = responseString + "-" + "#^$";
                    }
                    if (resultSet.getString("recruiter") != null && !"".equals(resultSet.getString("recruiter"))) {
                        responseString = responseString + resultSet.getString("recruiter") + "#^$";

                    } else {
                        responseString = responseString + "-" + "#^$";
                    }



                    if (resultSet.getString("State") != null && !"".equals(resultSet.getString("State")) && !"--Please Select".equals(resultSet.getString("State")) && !"-1".equals(resultSet.getString("State"))) {
                        responseString = responseString + resultSet.getString("State") + "#^$";

                    } else {
                        responseString = responseString + "-" + "#^$";
                    }
                    if (resultSet.getString("StartDate") != null && !"".equals(resultSet.getString("StartDate"))) {
                        responseString = responseString + resultSet.getString("StartDate") + "*@!";

                    } else {
                        responseString = responseString + "-" + "*@!";
                    }

//                

                }
            }
            
               }
               
              if(titleType.equals("BDM")){
//                  System.out.println("in BDM case case");
//                  System.out.println("ajaxHandlerAction.getStartDate()----->"+DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getStartDate()));
//                   System.out.println("ajaxHandlerAction.getEndDate()----->"+DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getEndDate()));
//                   System.out.println("ajaxHandlerAction.getReqJobTitle()----->"+ajaxHandlerAction.getReqJobTitle());
//                   System.out.println("ajaxHandlerAction.getRequirementstatus()----->"+ajaxHandlerAction.getRequirementstatus());
//                   System.out.println("ajaxHandlerAction.getPractice()----->"+ajaxHandlerAction.getPractice());
//                       System.out.println("myTeamMembers---->"+myTeamMembers);
                       callableStatement = connection.prepareCall("{call spBdmRequirementSummary(?,?,?,?,?,?,?,?)}");
            callableStatement.setString(1, myTeamMembers);
                           if (ajaxHandlerAction.getStartDate() != null && !"".equals(ajaxHandlerAction.getStartDate())) {
            callableStatement.setString(2, DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getStartDate()));
                           }
                           else{
                                callableStatement.setString(2,"%");
                           }
                       //System.out.println("Start Date---->"+DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getStartDate()));
                       if (ajaxHandlerAction.getEndDate() != null && !"".equals(ajaxHandlerAction.getEndDate())) {
            callableStatement.setString(3, DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getEndDate()));
                       }
                       else{
                             callableStatement.setString(3,"%");
                       }
                     //  System.out.println("End Date---->"+DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getEndDate()));
                      if (ajaxHandlerAction.getReqJobTitle() != null && !"".equals(ajaxHandlerAction.getReqJobTitle())) {  
                        callableStatement.setString(4, ajaxHandlerAction.getReqJobTitle());
                      }
                      else{
                           callableStatement.setString(4,"%");
                      }
                      ajaxHandlerAction.setRequirementstatus(ajaxHandlerAction.getRequirementstatus().replaceAll("'", ""));
                         if (!"".equals(ajaxHandlerAction.getRequirementstatus()) && ajaxHandlerAction.getRequirementstatus() != null) {
                        callableStatement.setString(5,ajaxHandlerAction.getRequirementstatus());
                         }
                         else{
                              callableStatement.setString(5,"%");
                         }
                          if (!"".equals(ajaxHandlerAction.getPractice()) && ajaxHandlerAction.getPractice() != null) {
                        callableStatement.setString(6,ajaxHandlerAction.getPractice());
                          }
                          else{
                               callableStatement.setString(6,"%");
                          }
                        callableStatement.setString(7,loginId);
            callableStatement.registerOutParameter(8, Types.VARCHAR);
            

            callableStatement.executeUpdate();
           String response=callableStatement.getString(8);
                   //    System.out.println("response...."+response);
 stringBuffer.delete(0, stringBuffer.length());
            stringBuffer.append(callableStatement.getString(8));
       //   stringBuffer.append(response);
            
         //   System.out.println("stringBuffer is---->"+stringBuffer.toString());
        //    System.out.println("stringBuffer is---->"+stringBuffer.toString());
                  
                   StringBuffer newString = new StringBuffer();
//            if (!stringBuffer.toString().equals("Input String Length is Zero")) {
//                // stringBuffer= stringBuffer.reverse();
//
//                String data[] = stringBuffer.toString().split("\\^");
//                if (data.length >= 1) {
//                    for (i = data.length - 1; i >= 0; i--) {
//                        newString.append(data[i] + "^");
//                    }
//                    String newadata[] = newString.toString().split("\\^");
//                    String newInfo[];
//                    List reportsList = new ArrayList();
//                    for (i = 0; i < newadata.length; i++) {
//                        // newInfo = newadata[i].split("\\|");
//                        // reportsList.add(newadata[i].substring(newadata[i].indexOf('|')+1));
//                        reportsList.add(newadata[i]);
//                        //reportsMap.put(newInfo[1], newInfo[0]+"");
//                    }
//                    Collections.sort(reportsList);
//                    StringBuffer finalData = new StringBuffer();
//                    for (i = 0; i < reportsList.size(); i++) {
//                        finalData.append((i + 1) + "|" + reportsList.get(i).toString() + "^");
//
//                    }
//
//
//                    stringBuffer = finalData;
//                    System.out.println("finalData---->"+finalData);
//                    responseString=stringBuffer.toString();
//                    System.out.println("responseString---->"+responseString);
//                     System.out.println("newString-->"+stringBuffer);
//                } 
////                else {
////                    stringBuffer = new StringBuffer(1 + "|" + stringBuffer.toString());
////                }
//
//            } 
                    responseString=stringBuffer.toString();
              }    
         //    System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;

    }
    public String getProjectMembers(String projectId) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String responseString = "";
        int i = 0;
        // String query = "SELECT HrComments FROM tblEmpReview WHERE Id =" + reviewId;
        String query = "SELECT PreSalesMgrId,PMO,OffshoreDellead,OffshoreTechLead,OnsiteTechlead FROM tblProjects WHERE Id=" + projectId;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                if (resultSet.getString("PreSalesMgrId") != null && !"".equals(resultSet.getString("PreSalesMgrId"))) {
                    String PreSalesMgrId = DataSourceDataProvider.getInstance().getemployeenamebyloginId(resultSet.getString("PreSalesMgrId"));
                    responseString = responseString + PreSalesMgrId + "#^$";
                } else {
                    responseString = responseString + "-" + "#^$";
                }
                if (resultSet.getString("PMO") != null && !"".equals(resultSet.getString("PMO")) && !"-1".equals(resultSet.getString("PMO"))) {
                    String PMO = DataSourceDataProvider.getInstance().getemployeenamebyloginId(resultSet.getString("PMO"));
                    responseString = responseString + PMO + "#^$";
                } else {
                    responseString = responseString + "-" + "#^$";
                }
                if (resultSet.getString("OffshoreDellead") != null && !"".equals(resultSet.getString("OffshoreDellead"))) {
                    String OffshoreDellead = DataSourceDataProvider.getInstance().getemployeenamebyloginId(resultSet.getString("OffshoreDellead"));
                    responseString = responseString + OffshoreDellead + "#^$";
                } else {
                    responseString = responseString + "-" + "#^$";
                }
                if (resultSet.getString("OffshoreTechLead") != null && !"".equals(resultSet.getString("OffshoreTechLead"))) {
                    String OffshoreTechLead = DataSourceDataProvider.getInstance().getemployeenamebyloginId(resultSet.getString("OffshoreTechLead"));
                    responseString = responseString + OffshoreTechLead + "#^$";
                } else {
                    responseString = responseString + "-" + "#^$";
                }
                if (resultSet.getString("OnsiteTechlead") != null && !"".equals(resultSet.getString("OnsiteTechlead"))) {
                    String OnsiteTechlead = DataSourceDataProvider.getInstance().getemployeenamebyloginId(resultSet.getString("OnsiteTechlead"));

                    responseString = responseString + OnsiteTechlead + "*@!";
                } else {
                    responseString = responseString + "-" + "*@!";
                }
            }

        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }
        }
        return responseString;
    }

    public int timeSheetAttachemntUpload(AjaxHandlerAction ajaxHandlerAction) {
        Connection connection = null;

        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String queryString = null;
        int updatedRows = 0;
        try {
            //   System.out.println("Location-->" + ajaxHandlerAction.getAttachmentLocation());




            connection = ConnectionProvider.getInstance().getConnection();
            queryString = "UPDATE tblTimeSheets SET FileFlag = ? ,FilePath=? WHERE EmpId='" + ajaxHandlerAction.getEmpId() + "' AND TimeSheetId=" + ajaxHandlerAction.getTimeSheetID();

            preparedStatement = connection.prepareStatement(queryString);
            preparedStatement.setInt(1, ajaxHandlerAction.getFileFlag());
            preparedStatement.setString(2, ajaxHandlerAction.getAttachmentLocation());
            updatedRows = preparedStatement.executeUpdate();


        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (Exception sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return updatedRows;
    }

    public void deleteTeAttachment(String empId, int timesheetId) {
        Connection connection = null;

        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String queryString = null;

        try {

            connection = ConnectionProvider.getInstance().getConnection();
            queryString = "SELECT FilePath FROM tblTimeSheets WHERE EmpId=" + empId + " AND TimeSheetId=" + timesheetId;

            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                File teFile = new File(resultSet.getString("FilePath"));
                if (teFile.exists()) {
                    teFile.delete();
                }
            }



        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (Exception sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }



    }

    /*
     * Emeet Methods
     * Date : 01/29/2016
     * Author : Phani Kanuri
     */
    public String doAddExecitiveMeetAttendees(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement statement = null;
        String responseString = "";
        int count = 0;
        try {
            queryString = "INSERT INTO tblEAttendees (LoginId,AccessType,CurrStatus,CreatedBy) VALUES(?,?,?,?)";

            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.prepareStatement(queryString);
            statement.setString(1, ajaxHandlerAction.getExecutiveMeetingAttendeeEmail());
            statement.setString(2, ajaxHandlerAction.getExecutiveMeetAccessType());
            statement.setString(3, ajaxHandlerAction.getExecutiveMeetingAccessStatus());
            statement.setString(4, ajaxHandlerAction.getCreatedBy());
            count = statement.executeUpdate();

            if (count > 0) {
                String emailId = DataSourceDataProvider.getInstance().getEmailIdForLoginId(ajaxHandlerAction.getExecutiveMeetingAttendeeEmail());
                String Name = DataSourceDataProvider.getInstance().getemployeenamebyloginId(ajaxHandlerAction.getExecutiveMeetingAttendeeEmail());
                responseString = "<font size='2' color='green'>Executive Meet Attendee added Successfully..!</font>";
                JSONObject upcomingEmeetJson = ServiceLocator.getAjaxHandlerWebService().getUpcomingEmeets(ajaxHandlerAction.getExecutiveMeetAccessType());
                for (int i = 0; i < upcomingEmeetJson.length(); i++) {
                    JSONObject subJson = upcomingEmeetJson.getJSONObject(String.valueOf(i));
                    doSendEmailInvitationForExeMeet(subJson, emailId, Name);
                }


            } else {
                responseString = "<font size='2' color='red'>Adding failed..!</font>";
            }

        } catch (Exception sqe) {
            sqe.printStackTrace();
            responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {

                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public JSONObject doEditExeMeetingAttendees(int Id) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement prepareStatement = null;
        ResultSet resultSet = null;
        JSONObject subJson = null;
        String queryString = "";

        int count = 0;
        try {

            queryString = "SELECT tblEAttendees.LoginId,tblEAttendees.Id AS Id,Email1,AccessType,tblEAttendees.CurrStatus,tblEAttendees.CreatedBy,tblEAttendees.CreatedDate FROM tblEAttendees "
                    + "LEFT JOIN tblEmployee ON(tblEmployee.LoginId=tblEAttendees.LoginId) WHERE tblEAttendees.Id=" + Id;
            connection = ConnectionProvider.getInstance().getConnection();
            prepareStatement = connection.prepareStatement(queryString);
            resultSet = prepareStatement.executeQuery();
            while (resultSet.next()) {
                subJson = new JSONObject();
                subJson.put("Id", resultSet.getInt("Id"));
                subJson.put("Email1", resultSet.getString("Email1"));
                subJson.put("LoginId", resultSet.getString("LoginId"));
                subJson.put("AccessType", resultSet.getString("AccessType"));
                subJson.put("CurrStatus", resultSet.getString("CurrStatus"));
                subJson.put("CreatedBy", resultSet.getString("CreatedBy"));
                subJson.put("CreatedDate", resultSet.getString("CreatedDate"));

            }

        } catch (Exception sqe) {
            sqe.printStackTrace();
            //responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (prepareStatement != null) {
                    prepareStatement.close();
                    prepareStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return subJson;
    }

    public String doUpdateExecitiveMeetingAttendeesDetails(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement statement = null;
        String responseString = "";
        String queryString = "";
        int count = 0;
        try {

            queryString = "UPDATE tblEAttendees SET AccessType=?,CurrStatus=?,ModifiedBy=?,ModifiedDate=? WHERE Id=?";

            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.prepareStatement(queryString);
            statement.setString(1, ajaxHandlerAction.getExecutiveMeetAccessType());
            statement.setString(2, ajaxHandlerAction.getExecutiveMeetingAccessStatus());
            statement.setString(3, ajaxHandlerAction.getCreatedBy());
            statement.setTimestamp(4, DateUtility.getInstance().getCurrentMySqlDateTime());
            statement.setInt(5, ajaxHandlerAction.getId());
            count = statement.executeUpdate();


            if (count > 0) {
                responseString = "<font size='2' color='green'>Executive Meet Attendee updated Successfully..!</font>";
                if ("InActive".equals(ajaxHandlerAction.getPreviousStatus()) && "Active".equals(ajaxHandlerAction.getExecutiveMeetingAccessStatus())) {


                    JSONObject upcomingEmeetJson = ServiceLocator.getAjaxHandlerWebService().getUpcomingEmeets(ajaxHandlerAction.getExecutiveMeetAccessType());
                    String emailId = DataSourceDataProvider.getInstance().getEmailIdForLoginId(ajaxHandlerAction.getLoginId());
                    String Name = DataSourceDataProvider.getInstance().getemployeenamebyloginId(ajaxHandlerAction.getLoginId());
                    for (int i = 0; i < upcomingEmeetJson.length(); i++) {
                        JSONObject subJson = upcomingEmeetJson.getJSONObject(String.valueOf(i));

                        doSendEmailInvitationForExeMeet(subJson, emailId, Name);
                    }
                }
            } else {
                responseString = "<font size='2' color='red'>Updating failed..!</font>";
            }

        } catch (Exception sqe) {
            sqe.printStackTrace();
            responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {

                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public String doPublishEmeet(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement statement = null;
        String responseString = "";
        String queryString = "";
        int count = 0;
        try {

            queryString = "UPDATE tblEAttendees SET AccessType=?,CurrStatus=?,ModifiedBy=?,ModifiedDate=? WHERE Id=?";

            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.prepareStatement(queryString);
            statement.setString(1, ajaxHandlerAction.getExecutiveMeetAccessType());
            statement.setString(2, ajaxHandlerAction.getExecutiveMeetingAccessStatus());
            statement.setString(3, ajaxHandlerAction.getCreatedBy());
            statement.setTimestamp(4, DateUtility.getInstance().getCurrentMySqlDateTime());
            statement.setInt(5, ajaxHandlerAction.getId());
            count = statement.executeUpdate();


            if (count > 0) {
                responseString = "<font size='2' color='green'>Executive Meet Attendee updated Successfully..!</font>";
            } else {
                responseString = "<font size='2' color='red'>Updating failed..!</font>";
            }

        } catch (Exception sqe) {
            sqe.printStackTrace();
            responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {

                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public String doSendEmailInvitationForExeMeet(JSONObject jObject, String emailId, String name) throws ServiceLocatorException {


        String message = "";


        try {

            int Id = jObject.getInt("Id");
            String TYPE = jObject.getString("TYPE");
            String STATUS = jObject.getString("STATUS");
            String StartTime = jObject.getString("StartTime");
            String EndTime = jObject.getString("EndTime");
            String MidDayTo = jObject.getString("MidDayTo");
            String MidDayFrom = jObject.getString("MidDayFrom");
            String EMeetDate = jObject.getString("EMeetDate");
            //   String EMeetRegistrationText = jObject.getString("EMeetRegistrationText");
            String EMeetRegistrationLink = jObject.getString("EMeetRegistrationLink");
            String TimeZone = jObject.getString("TimeZone");
            String Month = jObject.getString("Month");
            String CreatedDate = jObject.getString("CreatedDate");
            String CreatedBy = jObject.getString("CreatedBy");
            //String attendees=DataSourceDataProvider.getInstance().getAttendeesForEMeetByType(TYPE);

            if (Properties.getProperty("Mail.Flag").equals("1")) {
                // String toAddress = "";
                String cCAddress = "";
                String subject = "";
                String bodyContent = "";
                String createdDate = "";
                String mailDeliverDate = "";
                //String mailFlag = "0";
                String bCCAddress = "";
                //    createdDate = DateUtility.getInstance().getCurrentMySqlDateTime();
                // mailDeliverDate = DateUtility.getInstance().getCurrentMySqlDateTime1();
                StringBuilder htmlText = new StringBuilder();
                // bCCAddress = Properties.getProperty("bccAddress");
                htmlText.append("<html xmlns='http://www.w3.org/1999/xhtml' class='gr__newsletters-2016-vnallamalla_c9users_io'><head>");
                htmlText.append("  <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>");
                htmlText.append("  <title>Global Sales Meet </title>");
                htmlText.append("  <style type='text/css'>");
                htmlText.append("    body {");
                htmlText.append("    padding-top: 0 !important;");
                htmlText.append("    padding-bottom: 0 !important;");
                htmlText.append("   padding-top: 0 !important;");
                htmlText.append("   padding-bottom: 0 !important;");
                htmlText.append("  margin:0 !important;");
                htmlText.append("  width: 100% !important;");
                htmlText.append("  -webkit-text-size-adjust: 100% !important;");
                htmlText.append(" -ms-text-size-adjust: 100% !important;");
                htmlText.append(" -webkit-font-smoothing: antialiased !important;");
                htmlText.append(" }");
                htmlText.append(" .tableContent img {");
                htmlText.append(" border: 0 !important;");
                htmlText.append("display: block !important;");
                htmlText.append(" outline: none !important;");
                htmlText.append("  }");
                htmlText.append("a{");
                htmlText.append("  color:#382F2E;");
                htmlText.append(" }");
                htmlText.append(" p, h1,h2,ul,ol,li,div{");
                htmlText.append("  margin:0;");
                htmlText.append("   padding:0;");
                htmlText.append(" }");
                htmlText.append(" h1,h2{");
                htmlText.append("  font-weight: normal;");
                htmlText.append(" background:transparent !important;");
                htmlText.append(" border:none !important;");
                htmlText.append(" }");
                htmlText.append(" .contentEditable h2.big,.contentEditable h1.big{");
                htmlText.append(" font-size: 26px !important;");
                htmlText.append("  }");
                htmlText.append("  .contentEditable h2.bigger,.contentEditable h1.bigger{");
                htmlText.append("  font-size: 37px !important;");
                htmlText.append("  }");
                htmlText.append(" td,table{");
                htmlText.append("  vertical-align: top;");
                htmlText.append("  }");
                htmlText.append("  td.middle{");
                htmlText.append("  vertical-align: middle;");
                htmlText.append("  }");
                htmlText.append(" a.link1{");
                htmlText.append("  font-size:13px;");
                htmlText.append(" color:#27A1E5;");
                htmlText.append(" line-height: 24px;");
                htmlText.append(" text-decoration:none;");
                htmlText.append("  }");
                htmlText.append("  a{");
                htmlText.append("  text-decoration: none;");
                htmlText.append("  }");
                htmlText.append("  .link2{");
                htmlText.append("  color:#fc3f3f;");
                htmlText.append("  border-top:0px solid #fc3f3f;");
                htmlText.append(" border-bottom:0px solid #fc3f3f;");
                htmlText.append("  border-left:10px solid #fc3f3f;");
                htmlText.append("  border-right:10px solid #fc3f3f;");
                htmlText.append("  border-radius:1px;");
                htmlText.append(" -moz-border-radius:5px;");
                htmlText.append(" -webkit-border-radius:5px;");
                htmlText.append("  background:#fc3f3f;");
                htmlText.append("  }");
                htmlText.append("  .link3{");
                htmlText.append("  color:#555555;");
                htmlText.append("  border:1px solid #cccccc;");
                htmlText.append("  padding:10px 18px;");
                htmlText.append("   border-radius:3px;");
                htmlText.append("  -moz-border-radius:3px;");
                htmlText.append("  -webkit-border-radius:3px;");
                htmlText.append("  background:#ffffff;");
                htmlText.append("  }");
                htmlText.append("  .link4{");
                htmlText.append("  color:#27A1E5;");
                htmlText.append("  line-height: 24px;");
                htmlText.append("  }");
                htmlText.append("  h2,h1{");
                htmlText.append(" line-height: 20px;");
                htmlText.append(" }");
                htmlText.append(" p{");
                htmlText.append(" font-size: 14px;");
                htmlText.append(" line-height: 21px;");
                htmlText.append(" color:#AAAAAA;");
                htmlText.append(" }");
                htmlText.append("  .contentEditable li{");
                htmlText.append(" }");
                htmlText.append(" .appart p{");
                htmlText.append(" }");
                htmlText.append("  .bgItem{");
                htmlText.append("  background:#ffffff;");
                htmlText.append("  }");
                htmlText.append("  .bgBody{");
                htmlText.append(" background: #0d416b;");
                htmlText.append(" }");
                htmlText.append(" img { ");
                htmlText.append(" outline:none; ");
                htmlText.append(" text-decoration:none; ");
                htmlText.append("  -ms-interpolation-mode: bicubic;");
                htmlText.append("  width: auto;");
                htmlText.append(" max-width: 100%; ");
                htmlText.append("  clear: both; ");
                htmlText.append("  display: block;");
                htmlText.append("  float: none;");
                htmlText.append(" }");
                htmlText.append("</style>");
                htmlText.append("<script type='colorScheme' class='swatch active'>");
                htmlText.append(" {");
                htmlText.append("     'name':'Default',");
                htmlText.append("     'bgBody':'ffffff',");
                htmlText.append("     'link':'27A1E5',");
                htmlText.append("     'color':'AAAAAA',");
                htmlText.append("   'bgItem':'ffffff',");
                htmlText.append("   'title':'444444'");
                htmlText.append("  }");
                htmlText.append(" </script>");
                htmlText.append(" </head>");
                htmlText.append(" <body paddingwidth='0' paddingheight='0' bgcolor='#d1d3d4' style='padding-top: 0; padding-bottom: 0; padding-top: 0; padding-bottom: 0; background-repeat: repeat; width: 100% !important; -webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%; -webkit-font-smoothing: antialiased;' offset='0' toppadding='0' leftpadding='0'>");
                htmlText.append("   <table width='100%' border='0' cellspacing='0' cellpadding='0' class='tableContent bgBody' align='center' style='font-family:Helvetica, sans-serif;'>");
                htmlText.append("    <tbody>");
                htmlText.append("       <tr>");
                htmlText.append("    <td align='center'>");
                htmlText.append("        <table width='600' border='0' cellspacing='0' cellpadding='0' align='center'>");
                htmlText.append("         <tbody>");
                htmlText.append("     <tr>");
                htmlText.append("      <td class='bgItem' align='center'>");
                htmlText.append("         <table width='600' border='0' cellspacing='0' cellpadding='0' align='center'>");
                htmlText.append("          <tbody>");
                htmlText.append("           <tr>");
                htmlText.append("           <td class='movableContentContainer' align='center'>");
                htmlText.append("               <div class='movableContent'>");
                htmlText.append("           <table width='100%' border='0' cellspacing='0' cellpadding='0' align='center'>");
                htmlText.append("              <tbody>");
                htmlText.append("                <tr>");
                htmlText.append("                  <td style='background:#0d416b; border-radius:0px;-moz-border-radius:0px;-webkit-border-radius:0px' height='20'></td>");
                htmlText.append("              </tr>");
                htmlText.append("            <tr>");
                htmlText.append("            <td style='background:#0d416b; border-radius:0px;-moz-border-radius:0px;-webkit-border-radius:0px'>");
                htmlText.append("               <table width='650' border='0' cellspacing='0' cellpadding='0' align='center'>");
                htmlText.append("                <tbody>");
                htmlText.append("                  <tr>");
                htmlText.append("                    <td>");
                htmlText.append("                 <div class='contentEditableContainer contentImageEditable'>");
                htmlText.append("                   <div class='contentEditable'>");
                htmlText.append("                  <a href='http://www.miraclesoft.com/index.php' target='_blank'><img src='http://www.miraclesoft.com/newsletters/others/invite_interconnect_2015/images/logo.png' alt='Logo' height='45' data-default='placeholder' data-max-width='200'></a>");
                htmlText.append("          </div>");
                htmlText.append("       </div>");
                htmlText.append("    </td>");
                htmlText.append("   <td valign='middle' style='vertical-align: middle;'>");
                htmlText.append("    </td>");
                htmlText.append("    <td valign='middle' style='vertical-align: middle;' width='150'>");
                htmlText.append("      <br>");
                htmlText.append("     <table width='300' border='0' cellpadding='0' cellspacing='0' align='right' style='text-align: right; font-size: 13px; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt;' class='fullCenter'>");
                htmlText.append("     <tbody>");
                htmlText.append("        <tr>");
                htmlText.append("           <td height='55' valign='middle' width='100%' style='font-family: Helvetica, Arial, sans-serif; color:#232527;'>");
                htmlText.append("            <span style='font-family:calibri; font-weight: normal;'><a href='http://www.miraclesoft.com' target='_blank' style='text-decoration: none; color:#ffffff;' class='underline'>Company</a></span>");
                htmlText.append("            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style='font-family:calibri; font-weight: normal;'><a href='http://www.miraclesoft.com/careers/careers.php' target='_blank' style='text-decoration: none; color:#ffffff;' class='underline'>Careers</a></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
                htmlText.append("          </td>");
                htmlText.append("       </tr>");
                htmlText.append("    </tbody>");
                htmlText.append("  </table>");
                htmlText.append("  </td>");
                htmlText.append("     </tr>");
                htmlText.append("  </tbody>");
                htmlText.append("    </table>");
                htmlText.append("  </td>");
                htmlText.append("  </tr>");
                htmlText.append("   </tbody>");
                htmlText.append("  </table>");
                htmlText.append("  </div>");
                htmlText.append("   <div class='movableContent'>");
                htmlText.append("      <table width='580' border='0' cellspacing='0' cellpadding='0' align='center'>");
                htmlText.append("       <tbody>");
                htmlText.append("         <tr>");
                htmlText.append("           <td style='border: 5px solid #232527; border-radius:0px;-moz-border-radius:0px;-webkit-border-radius:0px'>");
                htmlText.append("               <table width='650' border='0' cellspacing='0' cellpadding='0' align='center'>");
                htmlText.append("              <tbody>");
                htmlText.append("                <tr>");
                htmlText.append("                <td style='background:#00aae7; border-radius:0px;-moz-border-radius:0px;-webkit-border-radius:px'>");
                htmlText.append("               <table width='600' border='0' cellspacing='0' cellpadding='0' align='center'>");
                htmlText.append("                   <tbody>");
                htmlText.append("                     <tr>");
                htmlText.append("                      <td height='18'></td>");
                htmlText.append("             </tr>");
                htmlText.append("              <tr>");
                htmlText.append("                <td>");
                htmlText.append("                  <div class='contentEditableContainer contentTextEditable'>");
                htmlText.append("                   <div class='contentEditable' style='text-align: left;'>");
                htmlText.append("                     <h2 style='font-size: 25px;'><font color='#ffffff' face='calibri'><b>" + TYPE + "</b></font></h2>");
                htmlText.append("                     <br>");
                htmlText.append("             </div></div></td>");
                htmlText.append("           </tr>");
                htmlText.append("        </tbody>");
                htmlText.append("      </table>");
                htmlText.append("   </td>");
                htmlText.append(" </tr>");
                htmlText.append("</tbody>");
                htmlText.append("</table>");
                htmlText.append("</div>");
                htmlText.append("<p></p>");
                htmlText.append("<p></p>");
                htmlText.append("<table width='600' border='0' cellspacing='0' cellpadding='0' align='center'>");
                htmlText.append(" <tbody>");
                htmlText.append("   <tr>");
                htmlText.append("     <td height='5'></td>");
                htmlText.append("</tr>");
                htmlText.append("<tr>");
                htmlText.append(" <td>");
                htmlText.append("   <div class='contentEditableContainer contentTextEditable'>");
                htmlText.append("    <div class='contentEditable' style='text-align: center;'>");
                htmlText.append("     <br>");
                htmlText.append("    <p style='line-height:150%; text-align: justify; font-size: 14px;'><font color='#232527' face='calibri'><b>" + name + ", </b>");
                htmlText.append("    </font></p><font color='#232527' face='calibri'>");
                htmlText.append("  </font></div><font color='#232527' face='calibri'>");
                htmlText.append("  </font></div><font color='#232527' face='calibri'>");
                htmlText.append("   </font></td>");
                htmlText.append("  </tr>");
                htmlText.append("   <tr>");
                htmlText.append("    <td height='0'></td>");
                htmlText.append("    </tr>");
                htmlText.append("    <tr>");
                htmlText.append("      <td>");
                htmlText.append("       <div class='contentEditableContainer contentTextEditable'>");
                htmlText.append("         <div class='contentEditable' style='text-align: center;'>");
                htmlText.append("        <br>");
                htmlText.append("    <p style='line-height:150%; text-align: justify; font-size: 14px;'><font color='#232527' face='calibri'>");
                htmlText.append("   We are pleased to invite you for the <b>" + TYPE + "</b> for the month of <b>" + Month + "</b> on <b>" + DateUtility.getInstance().getDateWithMonthName(EMeetDate) + "</b> at <b>" + StartTime + " " + MidDayFrom + " " + TimeZone + "</b>. The meet will cover the progress of our teams over the last month and will help all of us to ensure that we are on the same road to success. ");
                htmlText.append("<br><br> Please register today to book your slot for the executive meet. For past Executive Meet replays please visit <a href='http://www.miraclesoft.com/emeets' target='blank'; style= 'color :#2368a0';><b>www.miraclesoft.com/emeets</b></a> ");
                htmlText.append("   <br><br>Please do not forward this email to anyone else, and any passing of this registration information will be considered as a corporate violation. For adding (or) removing members from the meet, please contact <a href=mailto:marketing@miraclesoft.com><b>marketing@miraclesoft.com</b></a><br><br><span style='font-family: calibri; font-size: 14px; color:#ef4048; font-weight: normal;'>");
                htmlText.append("  <b>");
                htmlText.append("  *Note: ");
                htmlText.append("    </b>");
                htmlText.append("   </span>");
                htmlText.append("   <span style='font-family: calibri; font-size: 14px; color:#232527; font-weight: normal;'>");
                if ("Global Sales Meet".equals(TYPE)) {
                    htmlText.append("    <i>The Global Sales Meet will be held on the 3rd working day after the 2nd of every month</i></span>");
                } else if ("Global Practice Meet".equals(TYPE)) {
                    htmlText.append("    <i> The Global Practice Meet will be held on the First Tuesday after the 8th of every month</i></span>");
                }

                htmlText.append("   <br>");

                htmlText.append("  </span></font>");
                htmlText.append("  </p>");
                htmlText.append("  </div>");
                htmlText.append(" </div>");
                htmlText.append(" </td>");
                htmlText.append(" </tr>");
                htmlText.append(" <tr>");
                htmlText.append("   <td colspan='3' class='center' align='left' valign='top' style='padding-top: 20px;'>");
                htmlText.append("   <table border='0' align='center' cellpadding='0' cellspacing='0' style='margin: 0;'>");
                htmlText.append(" <tbody>");
                htmlText.append("        <tr>");
                htmlText.append("      <td bgcolor='#ef4048' align='left' valign='middle' style='display: inline-block; border-radius:5px; padding: 6px 15px; font-weight: normal; font-size: 14px; line-height: 100%; font-family: 'calibri'; color:#ffffff; margin: 0 !important; mso-line-height-rule: exactly;'>");
                htmlText.append("       <span>");
                htmlText.append("      <a href='" + EMeetRegistrationLink + "' target='blank' style='font-family:calibri; text-decoration: none; font-style: normal; font-weight: normal; color:#ffffff;'>");
                htmlText.append("      <b>Register Today</b>");
                htmlText.append("       </a>");
                htmlText.append("      </span>");
                htmlText.append("     </td>");
                htmlText.append("    </tr>");
                htmlText.append("  </tbody>");
                htmlText.append("  </table>");
                htmlText.append("   </td>");
                htmlText.append("   </tr>");
                htmlText.append("  <tr><td height='10' style='padding:0; line-height: 0;'>");
                htmlText.append("   &nbsp;");
                htmlText.append(" </td>");
                htmlText.append(" </tr>");
                htmlText.append("  <tr>");
                htmlText.append("  <td align='justify' valign='top' style=' font-family:calibri; margin: 0; padding-top: 5px; font-size:14px ; font-weight: normal; color:#000000; font-family: 'calibri'; line-height: 150%;  mso-line-height-rule: exactly;'>");
                htmlText.append("  <multi>");
                htmlText.append("    <span>");
                htmlText.append("    <b>");
                htmlText.append("   Thanks &amp; Regards,");
                htmlText.append("    </b>");
                htmlText.append("   <br>");
                htmlText.append("   <b>");
                htmlText.append("  Marketing Team");
                htmlText.append("  </b>");
                htmlText.append("  <br>");
                htmlText.append("  Miracle Software Systems, Inc.");
                htmlText.append(" <br>");
                htmlText.append(" 45625 Grand River Avenue, Novi, MI(USA)");
                htmlText.append(" <br>");
                htmlText.append("  <b>");
                htmlText.append("  Email :");
                htmlText.append(" </b>");
                htmlText.append(" marketing@miraclesoft.com ");
                htmlText.append(" <br>");
                htmlText.append(" <b>");
                htmlText.append(" Phone :");
                htmlText.append(" </b>");
                htmlText.append(" (+1)248-232-0428");
                htmlText.append("  </span>");
                htmlText.append("   <br>");
                htmlText.append("   <br>");
                htmlText.append(" </multi>");
                htmlText.append("  </td>");
                htmlText.append("  </tr>");
                htmlText.append(" </tbody>");
                htmlText.append(" </table>");
                htmlText.append(" </td>");
                htmlText.append(" </tr>");
                htmlText.append("<tr>");

                htmlText.append(" </tr>");
                htmlText.append("  <tr>");

                htmlText.append("  </tr>");
                htmlText.append("  </tbody>");
                htmlText.append("</table>");
                htmlText.append(" <table width='600' border='0' cellspacing='0' cellpadding='0' align='center'>");
                htmlText.append("   <tbody>");
                htmlText.append("    <tr>");
                htmlText.append("     <td>");
                htmlText.append("  <div class='contentEditableContainer contentTextEditable'>");
                htmlText.append("    <div class='contentEditable' style='text-align: center;'>");
                htmlText.append("       <p></p>");
                htmlText.append("    </div>");
                htmlText.append(" </div>");
                htmlText.append(" </td>");
                htmlText.append(" </tr>");

                htmlText.append(" </tbody>");
                htmlText.append(" </table>");
                htmlText.append(" </div></td>");
                htmlText.append(" </tr>");
                htmlText.append("</tbody>");
                htmlText.append("</table>");

                htmlText.append("<div class='movableContent'>");
                htmlText.append("  <table width='660' border='0' cellspacing='0' cellpadding='0' align='center'>");
                htmlText.append("   <tbody>");
                htmlText.append(" <tr>");
                htmlText.append("   <td style='background:#0d416b; border-radius:0px;-moz-border-radius:0px;-webkit-border-radius:0px'>");
                htmlText.append("     <table width='655' border='0' cellspacing='0' cellpadding='0' align='center'>");
                htmlText.append("      <tbody>");
                htmlText.append("         <tr>");
                htmlText.append("     <td colspan='3' height='20'></td>");
                htmlText.append("    </tr>");
                htmlText.append(" <tr>");
                htmlText.append("  <td width='90'></td>");
                htmlText.append("  <td width='660' align='center' style='text-align: center;'>");
                htmlText.append("   <table width='660' cellpadding='0' cellspacing='0' align='center'>");
                htmlText.append("    <tbody>");
                htmlText.append("      <tr>");
                htmlText.append("        <td>");
                htmlText.append("    <div class='contentEditableContainer contentTextEditable'>");
                htmlText.append("      <div class='contentEditable' style='text-align: center;color:#AAAAAA;'>");
                htmlText.append("      <p style='text-align: center; font-size: 14px;'><font color='#ffffff' face='calibri'>© Copyright 2016 Miracle Software Systems, Inc.<br>");
                htmlText.append("        45625 Grand River Avenue<br> Novi, MI - USA");
                htmlText.append("       </font>");
                htmlText.append("    </p>");
                htmlText.append("   <font color='#ffffff' face='calibri'>");
                htmlText.append("  </font>");
                htmlText.append("</div>");
                htmlText.append("  <font color='#ffffff' face='calibri'>");
                htmlText.append("   </font>");
                htmlText.append(" </div>");
                htmlText.append("  <font color='#ffffff' face='calibri'>");
                htmlText.append("  </font>");
                htmlText.append("   </td>");
                htmlText.append("  </tr>");
                htmlText.append("  </tbody>");
                htmlText.append("  </table>");
                htmlText.append("  </td>");
                htmlText.append("  <td width='90'></td>");
                htmlText.append(" </tr>");
                htmlText.append(" </tbody>");
                htmlText.append("</table>");
                htmlText.append(" <table width='650' border='0' cellspacing='0' cellpadding='0' align='center'>");
                htmlText.append("  <tbody>");
                htmlText.append("     <tr>");
                htmlText.append("        <td colspan='3' height='20'></td>");
                htmlText.append("   </tr>");
                htmlText.append("   <tr>");
                htmlText.append("   <td width='195'></td>");
                htmlText.append("  <td width='190' align='center' style='text-align: center;'>");
                htmlText.append("     <table width='190' cellpadding='0' cellspacing='0' align='center'>");
                htmlText.append("        <tbody>");
                htmlText.append("      <tr>");
                htmlText.append("       <td width='40'>");
                htmlText.append("         <div class='contentEditableContainer contentFacebookEditable'>");
                htmlText.append("        <div class='contentEditable' style='text-align: center;color:#AAAAAA;'>");
                htmlText.append("         <a href='https://www.facebook.com/miracle45625' target='_blank'><img src='http://www.miraclesoft.com/newsletters/others/invite_interconnect_2015/images/fb.png' alt='facebook' width='32' height='32' data-max-width='40' data-customicon='true'></a>");
                htmlText.append("     </div>");
                htmlText.append("   </div>");
                htmlText.append("  </td>");
                htmlText.append("  <td width='10'></td>");
                htmlText.append("   <td width='40'>");
                htmlText.append("   <div class='contentEditableContainer contentTwitterEditable'>");
                htmlText.append("      <div class='contentEditable' style='text-align: center;color:#AAAAAA;'>");
                htmlText.append("         <a href='https://twitter.com/team_mss' target='_blank'><img src='http://www.miraclesoft.com/newsletters/others/invite_interconnect_2015/images/tweet.png' alt='twitter' width='32' height='32' data-max-width='40' data-customicon='true'></a>");
                htmlText.append("      </div>");
                htmlText.append("    </div>");
                htmlText.append(" </td>");
                htmlText.append(" <td width='10'></td>");
                htmlText.append(" <td width='40'>");
                htmlText.append("  <div class='contentEditableContainer contentImageEditable'>");
                htmlText.append("    <div class='contentEditable' style='text-align: center;color:#AAAAAA;'>");
                htmlText.append("     <a href='https://plus.google.com/+Team_MSS/posts' target='_blank'><img src='http://www.miraclesoft.com/newsletters/others/invite_interconnect_2015/images/googleplus.png' alt='Pinterest' width='32' height='32' data-max-width='40'></a>");
                htmlText.append("    </div>");
                htmlText.append("  </div>");
                htmlText.append("  </td>");
                htmlText.append("   <td width='10'></td>");
                htmlText.append("  <td width='40'>");
                htmlText.append("     <div class='contentEditableContainer contentImageEditable'>");
                htmlText.append("       <div class='contentEditable' style='text-align: center;color:#AAAAAA;'>");
                htmlText.append("         <a href='https://www.linkedin.com/company/miracle-software-systems-inc' target='_blank'><img src='http://www.miraclesoft.com/newsletters/others/invite_interconnect_2015/images/linkedin.png' alt='Social media' width='32' height='32' data-max-width='40'></a>");
                htmlText.append("      </div>");
                htmlText.append("   </div>");
                htmlText.append("  </td>");
                htmlText.append("  </tr>");
                htmlText.append(" </tbody>");
                htmlText.append("  </table>");
                htmlText.append(" </td>");
                htmlText.append("  <td width='195'></td>");
                htmlText.append(" </tr>");
                htmlText.append("  <tr>");
                htmlText.append("  <td colspan='3' height='40'></td>");
                htmlText.append(" </tr>");
                htmlText.append("</tbody>");
                htmlText.append(" </table>");
                htmlText.append(" </td>");
                htmlText.append("</tr>");
                htmlText.append("</tbody>");
                htmlText.append("  </table>");
                htmlText.append("</div>");
                htmlText.append("  <div class='movableContent'>");
                htmlText.append("    <table width='100%' border='0' cellspacing='0' cellpadding='0' align='center'>");
                htmlText.append("    <tbody>");
                htmlText.append("     <tr>");
                htmlText.append("          <td style='background:#0d416b; border-radius:0px;-moz-border-radius:0px;-webkit-border-radius:0px' height='0'></td>");
                htmlText.append("     </tr>");
                htmlText.append("     <tr>");
                htmlText.append("    </tr>");
                htmlText.append("  </tbody>");
                htmlText.append("  </table>");
                htmlText.append("   </div>");
                htmlText.append(" </td>");
                htmlText.append(" </tr>");
                htmlText.append(" </tbody>");
                htmlText.append(" </table>");
                htmlText.append(" </td>");
                htmlText.append("</tr>");
                htmlText.append(" </tbody>");
                htmlText.append("  </table>  ");
                htmlText.append("</body><span class='gr__tooltip'><span class='gr__tooltip-content'></span><i class='gr__tooltip-logo'></i><span class='gr__triangle'></span></span></html>");

                bodyContent = htmlText.toString();
                // toAddress = emailId;

                //ServiceLocator.getMailServices().doAddEmailLog(toAddress, cCAddress, issueTitle, bodyContent, createdDate, bCCAddress);
                ServiceLocator.getMailServices().doAddEmailLogNew(emailId, cCAddress, "Reg:" + TYPE, bodyContent, createdDate, bCCAddress, "Executive Meet");

                message = "<font color=\"green\" size=\"2px\">Status Updated Succesfully and Mail had been sent to Attendees!</font>";

            }
            //in.close();

        } catch (Exception e) {
            throw new ServiceLocatorException(e);
        }
        return message;
    }
    //currnet status management start

    public String searchCustomerProjectsAjaxList(HttpServletRequest httpServletRequest, AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {
        Connection connection = null;
        String totalStream = "";
        Statement statement = null;
        ResultSet resultSet = null;
        // String query = "";

        queryString = "SELECT tblCrmAccount.Id,tblCrmAccount.NAME,COUNT(ProjectName)  FROM tblCrmAccount JOIN tblProjects  "
                + "ON tblCrmAccount.Id = tblProjects.CustomerId ";

      /*  if (ajaxHandlerAction.getCustomerName() != null && !"".equalsIgnoreCase(ajaxHandlerAction.getCustomerName())) {
            queryString = queryString + " where tblCrmAccount.NAME like '%" + ajaxHandlerAction.getCustomerName() + "%'";
        } */
        
        if (ajaxHandlerAction.getAccId() != null && !"".equalsIgnoreCase(ajaxHandlerAction.getAccId())) {
            queryString = queryString + " where tblCrmAccount.Id = '" + ajaxHandlerAction.getAccId() + "'";
        }

        queryString = queryString + "GROUP BY CustomerId ORDER BY tblCrmAccount.NAME LIMIT 100";
        //  System.out.println("query..."+query);
        try {

            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            while (resultSet.next()) {
                String Name = resultSet.getString("NAME");

                String ProjectCount = resultSet.getString("COUNT(ProjectName)");
                int AccountId = resultSet.getInt("Id");

                totalStream = totalStream + "#^$" + Name + "#^$" + ProjectCount + "#^$" + AccountId + "*@!";

            }

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return totalStream;
    }

    @Override
    public String isExistedProjectName(int accountId, String projectName) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        String responseString = "";
        int count = 0;
        try {


            queryString = "SELECT ProjectName FROM tblProjects WHERE CustomerId=" + accountId + " AND REPLACE(ProjectName,' ','')=REPLACE('" + projectName + "',' ','')  ";  //System.out.println("queryString---" + queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.prepareStatement(queryString);

            resultSet = statement.executeQuery();
            if (resultSet.next()) {

                // System.out.println("resultSet" + resultSet);
                responseString = "No";



            } else {
                responseString = "Yes";
            }



            // System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
            responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public String employeeAvailableProjects(String empId, String status, String startDate) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        String responseString = "";
        int count = 0;
        String resourceType = null;
        try {
            Calendar calendar = Calendar.getInstance();

            queryString = "SELECT tblProjects.ProjectName ,date(tblProjectContacts.StartDate) as StartDate,date(tblProjectContacts.EndDate) as EndDate,tblProjectContacts.Status,tblProjectContacts.Utilization,tblProjectContacts.Billable,tblProjectContacts.Comments FROM tblProjects LEFT JOIN tblProjectContacts ON (tblProjects.Id=tblProjectContacts.ProjectId) WHERE tblProjectContacts.ObjectId=" + empId;
            if (!"All".equals(status)) {
                queryString = queryString + " AND  tblProjectContacts.Status='" + status + "'";
            }
            if (startDate != null && !"".equals(startDate)) {
                queryString = queryString + " AND  tblProjectContacts.StartDate>='" + DateUtility.getInstance().getMysqlDate(startDate) + "'";
            }
//            if(endDate!=null && !"".equals(endDate)){
//                queryString=queryString+" AND  tblProjectContacts.EndDate<='"+DateUtility.getInstance().getMysqlDate(endDate) +"'";
//            }
            queryString = queryString + " ORDER BY Status";
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.prepareStatement(queryString);

            resultSet = statement.executeQuery();
            //System.out.println("before result ---- >"+queryString);
            while (resultSet.next()) {
                count++;
                responseString = responseString + count + "#^$";
                responseString = responseString + resultSet.getString("ProjectName") + "#^$";
                if (resultSet.getString("StartDate") != null && !"".equals(resultSet.getString("StartDate"))) {
                    responseString = responseString + resultSet.getString("StartDate") + "#^$";
                } else {
                    responseString = responseString + " " + "#^$";
                }
                if (resultSet.getString("EndDate") != null && !"".equals(resultSet.getString("EndDate"))) {
                    responseString = responseString + resultSet.getString("EndDate") + "#^$";
                } else {
                    responseString = responseString + " " + "#^$";
                }
                responseString = responseString + resultSet.getString("Status") + "#^$";
                responseString = responseString + resultSet.getString("Utilization") + "#^$";
                if (resultSet.getInt("Billable") == 1) {
                    resourceType = "Yes";
                    responseString = responseString + resourceType + "#^$";
                } else if (resultSet.getInt("Billable") == 0) {
                    resourceType = "No";
                    responseString = responseString + resourceType + "#^$";
                }

                responseString = responseString + resultSet.getString("Comments") + "*@!";
            }

            if (count == 0) {
                responseString = "nodata";
            }


            // System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
            responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

//currnet status management end
    public String popupOpertunitiesWindow(String Id) throws ServiceLocatorException {
        String responseSrting = null;
        try {
            connection = ConnectionProvider.getInstance().getConnection();

            String QUERY_STRING = "SELECT * FROM tblCrmOpportunity WHERE Id='" + Id + "'";


            preparedStatement = connection.prepareStatement(QUERY_STRING);
            //loginId='"+personId+"'");
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                if (resultSet.getString("Title") != null && !"".equals(resultSet.getString("Title"))) {
                    responseSrting = resultSet.getString("Title") + "#^$";
                } else {
                    responseSrting = responseSrting + "-" + "#^$";

                }
                if (resultSet.getString("State") != null && !"".equals(resultSet.getString("State"))) {
                    responseSrting = responseSrting + resultSet.getString("State") + "#^$";
                } else {
                    responseSrting = responseSrting + "-" + "#^$";

                }
                if (resultSet.getString("Practice") != null && !"".equals(resultSet.getString("Practice"))) {
                    responseSrting = responseSrting + resultSet.getString("Practice") + "#^$";
                } else {
                    responseSrting = responseSrting + "-" + "#^$";

                }
                if (resultSet.getString("Type") != null && !"".equals(resultSet.getString("Type"))) {
                    responseSrting = responseSrting + resultSet.getString("Type") + "#^$";
                } else {
                    responseSrting = responseSrting + "-" + "#^$";

                }
                if (resultSet.getString("Stage") != null && !"".equals(resultSet.getString("Stage"))) {
                    responseSrting = responseSrting + resultSet.getString("Stage") + "#^$";
                } else {
                    responseSrting = responseSrting + "-" + "#^$";

                }
                if (!"".equals(resultSet.getString("InsideSalesId")) && !"-1".equals(resultSet.getString("InsideSalesId")) && !"0".equals(resultSet.getString("InsideSalesId"))) {
                    responseSrting = responseSrting + DataSourceDataProvider.getInstance().getEmployeeNameByEmpNo(resultSet.getInt("InsideSalesId")) + "#^$";
                } else {
                    responseSrting = responseSrting + "-" + "#^$";

                }
                if (!"".equals(resultSet.getString("RegionalMgrId")) && !"-1".equals(resultSet.getString("RegionalMgrId")) && !"0".equals(resultSet.getString("RegionalMgrId"))) {
                    responseSrting = responseSrting + DataSourceDataProvider.getInstance().getEmployeeNameByEmpNo(resultSet.getInt("RegionalMgrId")) + "#^$";
                } else {
                    responseSrting = responseSrting + "-" + "#^$";

                }
                if (!"".equals(resultSet.getString("PracticeManagerId")) && !"-1".equals(resultSet.getString("PracticeManagerId")) && !"0".equals(resultSet.getString("PracticeManagerId"))) {
                    responseSrting = responseSrting + DataSourceDataProvider.getInstance().getEmployeeNameByEmpNo(resultSet.getInt("PracticeManagerId")) + "#^$";
                } else {
                    responseSrting = responseSrting + "-" + "#^$";

                }
                if (resultSet.getString("DueDate") != null && !"".equals(resultSet.getString("DueDate"))) {
                    responseSrting = responseSrting + resultSet.getString("DueDate") + "#^$";
                } else {
                    responseSrting = responseSrting + "-" + "#^$";

                }
                if (!"".equals(resultSet.getString("LeadSourceId")) && !"-1".equals(resultSet.getString("LeadSourceId")) && !"0".equals(resultSet.getString("LeadSourceId"))) {
                    responseSrting = responseSrting + DataSourceDataProvider.getInstance().getEmployeeNameByEmpNo(resultSet.getInt("LeadSourceId")) + "#^$";
                } else {
                    responseSrting = responseSrting + "-" + "#^$";

                }
                if (resultSet.getString("Description") != null && !"".equals(resultSet.getString("Description"))) {
                    responseSrting = responseSrting + resultSet.getString("Description") + "#^$";
                } else {
                    responseSrting = responseSrting + "-" + "#^$";

                }

            }
            // System.out.println("skillset is:"+skillSet);
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return responseSrting;
    }

    public String getPFPortalReport(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        String responseString = "";
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        String docType = ajaxHandlerAction.getDocType();
        //  System.out.println("ajaxHandlerAction.getOpsContactIdForPF()"+ajaxHandlerAction.getOpsContactIdForPF());
        int i = 0;
        try {
            if (docType.equals("Aadhar no")) {
                queryString = "SELECT EmpNo,UANNo,PFNo,PhyCategory,PhyChallenged,Gender,MaritalStatus,IsInternationalWorker  as InternationalWorker,IfscCode,AadharNum as docNumber,CONCAT(FName,' ',LName) AS NAME  FROM tblEmployee WHERE Country='India' AND CurStatus='Active' AND DeletedFlag != 1 ";  //System.out.println("queryString---" + queryString);   
            } else if (docType.equals("Bank Account no")) {
                queryString = "SELECT EmpNo,UANNo,PFNo,PhyCategory,PhyChallenged,Gender,MaritalStatus,IsInternationalWorker as InternationalWorker,IfscCode,AccNum as docNumber,CONCAT(FName,' ',LName) AS NAME  FROM tblEmployee WHERE Country='India' AND CurStatus='Active' AND DeletedFlag != 1 ";  //System.out.println("queryString---" + queryString); 
            } else if (docType.equals("PAN")) {
                queryString = "SELECT EmpNo,UANNo,PFNo,PhyCategory,PhyChallenged,Gender,MaritalStatus,IsInternationalWorker as InternationalWorker,IfscCode,SSN as docNumber,CONCAT(FName,' ',LName) AS NAME  FROM tblEmployee WHERE Country='India' AND CurStatus='Active' AND DeletedFlag != 1 ";  //System.out.println("queryString---" + queryString);  
            }

            if ((ajaxHandlerAction.getOpsContactIdForPF()) != -1) {
                queryString = queryString + " AND Id =" + ajaxHandlerAction.getOpsContactIdForPF();
            }
            //System.out.println("the query for PF"+queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.prepareStatement(queryString);
            resultSet = statement.executeQuery();
            while (resultSet.next()) {
                i++;
                responseString = responseString + i + "#^$";
                if (resultSet.getString("EmpNo") != null && !"".equals(resultSet.getString("EmpNo"))) {
                    responseString = responseString + resultSet.getString("EmpNo") + "#^$";
                } else {
                    responseString = responseString + "-" + "#^$";
                }
                if (resultSet.getString("UANNo") != null && !"".equals(resultSet.getString("UANNo"))) {
                    responseString = responseString + resultSet.getString("UANNo") + "#^$";
                } else {
                    responseString = responseString + "-" + "#^$";
                }
                if (resultSet.getString("PFNo") != null && !"".equals(resultSet.getString("PFNo"))) {
                    responseString = responseString + resultSet.getString("PFNo") + "#^$";
                } else {
                    responseString = responseString + "-" + "#^$";
                }
                if (resultSet.getString("NAME") != null && !"".equals(resultSet.getString("NAME"))) {
                    responseString = responseString + resultSet.getString("NAME") + "#^$";
                } else {
                    responseString = responseString + "-" + "#^$";
                }
                if (resultSet.getString("docNumber") != null && !"".equals(resultSet.getString("docNumber"))) {
                    responseString = responseString + resultSet.getString("docNumber") + "#^$";
                } else {
                    responseString = responseString + "-" + "#^$";
                }
                if (resultSet.getString("IfscCode") != null && !"".equals(resultSet.getString("IfscCode"))) {
                    responseString = responseString + resultSet.getString("IfscCode") + "#^$";
                } else {
                    responseString = responseString + "-" + "#^$";
                }

                if (resultSet.getString("PhyChallenged") != null && !"".equals(resultSet.getString("PhyChallenged"))) {
                    responseString = responseString + resultSet.getString("PhyChallenged") + "#^$";

                } else {
                    responseString = responseString + "-" + "#^$";
                }

                if (resultSet.getString("PhyCategory") != null && !"".equals(resultSet.getString("PhyCategory"))) {
                    responseString = responseString + resultSet.getString("PhyCategory") + "#^$";

                } else {
                    responseString = responseString + "-" + "#^$";
                }

                if (resultSet.getString("Gender") != null && !"".equals(resultSet.getString("Gender"))) {
                    responseString = responseString + resultSet.getString("Gender") + "#^$";
                } else {
                    responseString = responseString + "-" + "#^$";
                }

                if (resultSet.getString("MaritalStatus") != null && !"".equals(resultSet.getString("MaritalStatus"))) {
                    responseString = responseString + resultSet.getString("MaritalStatus") + "#^$";
                } else {
                    responseString = responseString + "-" + "#^$";
                }

                if (resultSet.getString("InternationalWorker") != null && !"".equals(resultSet.getString("InternationalWorker"))) {
                    if (resultSet.getString("InternationalWorker") == "0") {
                        responseString = responseString + "Yes" + "*@!";
                    } else {
                        responseString = responseString + "No" + "*@!";
                    }
                } else {
                    responseString = responseString + "-" + "*@!";
                }






            }
            if (i == 0) {
                responseString = "no data";
            }


        } catch (Exception sqe) {
            sqe.printStackTrace();
            responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public String ajaxAccountExcelFileUpload(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {
        String resultMessage = "Error";
        try {
            String loginId = ajaxHandlerAction.getLoginId();
            String FilePath = ajaxHandlerAction.getAttachmentLocation();
            //   System.out.println("FilePath-->"+ajaxHandlerAction.getAttachmentLocation());           
            //FileInputStream fs = new FileInputStream(FilePath);
            FileInputStream fs = new FileInputStream(ajaxHandlerAction.getFile());
            Workbook wb = Workbook.getWorkbook(fs);
            Sheet sh = wb.getSheet(0);
            String data = "";
            int totalNoOfRows = sh.getRows();
            int totalNoOfCols = sh.getColumns();
            String accountName = "";
            String synonums = "";
            String url = "";
            String Street = "";
            String city = "";
            String state = "";
            String zip = "";
            String bdeLoginId = "";
            String bdmLoginId = "";
            int rowCount = 0;
            boolean isValid = true;
            for (int col = 1; col < totalNoOfCols; col++) {
                if (sh.getCell(col, 0).getContents() != null && !"".equals(sh.getCell(col, 0).getContents()) && !"".equals(sh.getCell(col, 0).getContents().trim())) // data= sh.getCell(col, row).getContents();
                {


                    if (col == 1 && !"Name".equalsIgnoreCase(sh.getCell(1, 0).getContents().trim())) {
                        resultMessage = "InvalidFormat";
                        isValid = false;
                        break;
                    } else if (col == 2 && !"Subsidiary Name".equalsIgnoreCase(sh.getCell(2, 0).getContents().trim())) {
                        resultMessage = "InvalidFormat";
                        isValid = false;
                        break;
                    } else if (col == 3 && !"URL".equalsIgnoreCase(sh.getCell(3, 0).getContents().trim())) {
                        resultMessage = "InvalidFormat";
                        isValid = false;
                        break;
                    } else if (col == 4 && !"Street".equalsIgnoreCase(sh.getCell(4, 0).getContents().trim())) {
                        resultMessage = "InvalidFormat";
                        isValid = false;
                        break;
                    } else if (col == 5 && !"City".equalsIgnoreCase(sh.getCell(5, 0).getContents().trim())) {
                        resultMessage = "InvalidFormat";
                        isValid = false;
                        break;
                    } else if (col == 6 && !"State".equalsIgnoreCase(sh.getCell(6, 0).getContents().trim())) {
                        resultMessage = "InvalidFormat";
                        isValid = false;
                        break;
                    } else if (col == 7 && !"Zip".equalsIgnoreCase(sh.getCell(7, 0).getContents().trim())) {
                        resultMessage = "InvalidFormat";
                        isValid = false;
                        break;
                    } else if (col == 8 && !"BDE LogiId".equalsIgnoreCase(sh.getCell(8, 0).getContents().trim())) {
                        resultMessage = "InvalidFormat";
                        isValid = false;
                        break;
                    } else if (col == 9 && !"BDM LoginId".equalsIgnoreCase(sh.getCell(9, 0).getContents().trim())) {
                        resultMessage = "InvalidFormat";
                        isValid = false;
                        break;
                    }


                } else //  data= "-";
                {
                    resultMessage = "InvalidFormat";
                    isValid = false;
                    break;
                }
            }

            if (isValid) {
                for (int row = 1; row < totalNoOfRows; row++) {
                    if (sh.getCell(1, row).getContents() != null && !"".equals(sh.getCell(1, row).getContents()) && !"".equals(sh.getCell(1, row).getContents().trim())) {
                        for (int col = 1; col < totalNoOfCols; col++) {
                            if (sh.getCell(col, row).getContents() != null && !"".equals(sh.getCell(col, row).getContents()) && !"".equals(sh.getCell(col, row).getContents().trim())) // data= sh.getCell(col, row).getContents();
                            {
                                data = data + sh.getCell(col, row).getContents() + "#^$";
                            } else //  data= "-";
                            {
                                data = data + "-" + "#^$";
                            }
                        }
                    }
                    accountName = "";
                    url = "";
                    Street = "";
                    city = "";
                    state = "";
                    zip = "";
                    bdeLoginId = "";
                    bdmLoginId = "";
                    synonums = "";
                    data = data + "*@!";
                    rowCount++;

                }
                if (rowCount < Integer.parseInt(Properties.getProperty("ACCOUNT_EXCEL_ROWS"))) {
                    addOrUpdateAccount(data, loginId);
                    resultMessage = "uploaded";
                } else {
                    resultMessage = "Exceded";
                }
            }

            //System.out.println(data);
        } catch (Exception ex) {
            ex.printStackTrace();
            // Logger.getLogger(AjaxHandlerServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return resultMessage;
    }

    public int addOrUpdateAccount(String data, String loginId) throws ServiceLocatorException {
        Connection connection = null;
        CallableStatement callableStatement = null;
        connection = ConnectionProvider.getInstance().getConnection();
        int updatedRows = 0;
        try {
            callableStatement = connection.prepareCall("{call SpAccountsExcelUpload(?,?,?)}");
            callableStatement.setString(1, data);
            callableStatement.setString(2, loginId);
            callableStatement.registerOutParameter(3, Types.VARCHAR);
            updatedRows = callableStatement.executeUpdate();
            // System.out.println("response-->" + callableStatement.getString(2));
        } catch (Exception sqle) {
            sqle.printStackTrace();
            System.out.println(sqle.getMessage());
            //  throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException se) {
                //throw new ServiceLocatorException(se);
            }
        }

        return updatedRows;
    }

 
 public String getEmployeesBasedOnCustomer(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) {
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        String responseString = "";
        int count = 0;
        String resourceType = null;
        try {
            Calendar calendar = Calendar.getInstance();

          //  queryString = "SELECT tblEmployee.Country,tblProjectContacts.ResourceName,tblEmployee.TitleTypeId,tblProjectContacts.STATUS,DATE(tblProjectContacts.StartDate) AS StartDate,DATE(tblProjectContacts.EndDate) AS EndDate,tblProjectContacts.Utilization,CASE WHEN tblProjectContacts.Billable=1 THEN 'YES' ELSE 'NO' END AS Billable,CASE WHEN tblProjectContacts.EmpProjStatus='Shadow' THEN 'YES' ELSE 'NO' END AS Shadow FROM tblProjectContacts LEFT JOIN tblEmployee ON (tblProjectContacts.ObjectId=tblEmployee.Id) WHERE  AccountId=" + ajaxHandlerAction.getAccountId() + " AND ProjectId='" + ajaxHandlerAction.getProjectId() + "' ";
  queryString = "SELECT tblEmployee.Country,tblProjectContacts.ResourceName,tblEmployee.TitleTypeId,tblProjectContacts.STATUS,DATE(tblProjectContacts.StartDate) AS StartDate,DATE(tblProjectContacts.EndDate) AS EndDate,tblProjectContacts.Utilization,CASE WHEN tblProjectContacts.Billable=1 THEN 'YES' ELSE 'NO' END AS Billable,tblProjectContacts.EmpProjStatus AS EmpProjStatus FROM tblProjectContacts LEFT JOIN tblEmployee ON (tblProjectContacts.ObjectId=tblEmployee.Id) WHERE  AccountId=" + ajaxHandlerAction.getAccountId() + " AND ProjectId='" + ajaxHandlerAction.getProjectId() + "' ";

            if (!"All".equals(ajaxHandlerAction.getStatus())) {
                queryString = queryString + " AND tblProjectContacts.STATUS='" + ajaxHandlerAction.getStatus() + "' ";
            }
            if (!"-1".equals(ajaxHandlerAction.getCountry())) {
                queryString = queryString + " AND tblEmployee.Country='" + ajaxHandlerAction.getCountry() + "' ";
            }
            queryString = queryString + " ORDER BY ResourceName";

            //   System.out.println("queryString-->"+queryString);

            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.prepareStatement(queryString);

            resultSet = statement.executeQuery();
            // System.out.println("before result ---- >"+queryString);
            while (resultSet.next()) {
                count++;
                responseString = responseString + count + "#^$";
                responseString = responseString + resultSet.getString("ResourceName") + "#^$";
                if (resultSet.getString("STATUS") != null && !"".equals(resultSet.getString("STATUS"))) {
                    responseString = responseString + resultSet.getString("STATUS") + "#^$";
                } else {
                    responseString = responseString + "-" + "#^$";
                }
                if (resultSet.getString("TitleTypeId") != null && !"".equals(resultSet.getString("TitleTypeId"))) {
                    responseString = responseString + resultSet.getString("TitleTypeId") + "#^$";
                } else {
                    responseString = responseString + "-" + "#^$";
                }
                if (resultSet.getString("Country") != null && !"".equals(resultSet.getString("Country"))) {
                    responseString = responseString + resultSet.getString("Country") + "#^$";
                } else {
                    responseString = responseString + "-" + "#^$";
                }

                if (resultSet.getString("StartDate") != null && !"".equals(resultSet.getString("StartDate"))) {
                    responseString = responseString + resultSet.getString("StartDate") + "#^$";
                } else {
                    responseString = responseString + " " + "#^$";
                }
                if (resultSet.getString("EndDate") != null && !"".equals(resultSet.getString("EndDate"))) {
                    responseString = responseString + resultSet.getString("EndDate") + "#^$";
                } else {
                    responseString = responseString + " " + "#^$";
                }
                  if(resultSet.getString("Billable").equals("YES")){
                        responseString = responseString + "YES" + "#^$";
                  }else{
                        responseString = responseString + "NO" + "#^$";
                  }

              if (resultSet.getString("EmpProjStatus") != null && !"".equals(resultSet.getString("EmpProjStatus"))) {
                    responseString = responseString + resultSet.getString("EmpProjStatus") + "#^$";
                } else {
                    responseString = responseString + "-" + "#^$";
                }
             //   responseString = responseString + resultSet.getString("Billable") + "#^$";
                responseString = responseString + resultSet.getString("Utilization") + "*@!";
            }

            if (count == 0) {
                responseString = "nodata";
            } else {
                responseString = responseString + "addTo" + count;
            }

            //System.out.println("reponce-->" + responseString);
        } catch (Exception sqe) {
            sqe.printStackTrace();
            responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }
	

    public String getAllProjectsByAccountId(int accountId) throws ServiceLocatorException {
        StringBuffer projects = new StringBuffer();
        String projectName = null;
        int projectId = 0;


        //queryString = "SELECT distinct tblProjectContacts.ProjectId AS projectId,ProjectName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE AccountId="+accountId;
        //queryString = "SELECT distinct tblProjectContacts.ProjectId AS projectId,ProjectName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE AccountId=" + accountId + " and ObjectId=" + empId + " and tblProjects.Status='Active'";
        /*queryString = "SELECT DISTINCT tblProjectContacts.ProjectId AS projectId,ProjectName FROM tblProjectContacts "
        + "LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id)"
        + " WHERE AccountId=" + accountId +" AND tblProjectContacts.STATUS='Active'";*/

        queryString = "SELECT Id,ProjectName FROM tblProjects WHERE CustomerId=" + accountId;
        //    System.out.println("queryString---->"+queryString);

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            projects.append("<xml version=\"1.0\">");
            projects.append("<PROJECTS>");
            projects.append("<USER projectId=\"-1\">--Please Select--</USER>");
            while (resultSet.next()) {
                projectId = resultSet.getInt("Id");
                projectName = resultSet.getString("ProjectName");

                // projects.append(projectName);

                projects.append("<USER projectId=\"" + projectId + "\">");

                if (projectName.contains("&")) {
                    projectName = projectName.replaceAll("&", "&amp;");
                }
                projects.append(projectName);
                projects.append("</USER>");

            }
            projects.append("</PROJECTS>");
            projects.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        //System.out.println("Team List: "+projects.toString());
        return projects.toString();
    }

    /**************************************************
     * *PMO employee suggestion list start
     * ************************************************/
    public String getEmployeeDetailforPMOActivity(String customerName) throws ServiceLocatorException {
        boolean isGetting = false;
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        StringBuffer sb = new StringBuffer();
        String query = null;
        try {

            query = "SELECT CONCAT(TRIM(FName),'.',TRIM(LName)) AS FullName,Id FROM tblEmployee "
                    + "WHERE (LName LIKE '" + customerName + "%' OR FName LIKE '" + customerName + "%') "
                    + "AND CurStatus='Active'";

            //System.out.println("query-->"+query);
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();

            int count = 0;
            sb.append("<xml version=\"1.0\">");
            sb.append("<EMPLOYEES>");
            while (resultSet.next()) {
                sb.append("<EMPLOYEE><VALID>true</VALID>");

                if (resultSet.getString(1) == null || resultSet.getString(1).equals("")) {
                    sb.append("<NAME>NoRecord</NAME>");
                } else {
                    String title = resultSet.getString(1);
                    if (title.contains("&")) {
                        title = title.replace("&", "&amp;");
                    }
                    sb.append("<NAME>" + title + "</NAME>");
                }
                //sb.append("<NAME>" +resultSet.getString(1) + "</NAME>");
                sb.append("<EMPID>" + resultSet.getInt(2) + "</EMPID>");
                sb.append("</EMPLOYEE>");
                isGetting = true;
                count++;
            }

            if (!isGetting) {
                //sb.append("<EMPLOYEES>" + sb.toString() + "</EMPLOYEES>");
                //} else {
                isGetting = false;
                //nothing to show
                //  response.setStatus(HttpServletResponse.SC_NO_CONTENT);
                sb.append("<EMPLOYEE><VALID>false</VALID></EMPLOYEE>");
            }
            sb.append("</EMPLOYEES>");
            sb.append("</xml>");

            //  System.out.println(sb.toString());
        } catch (SQLException sqle) {
            throw new ServiceLocatorException(sqle);
        } finally {
            try {
                if (resultSet != null) {

                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sql) {
                //System.err.print("Error :"+sql);
            }

        }
        // System.out.println("the string "+sb.toString());
        return sb.toString();
    }

    /**************************************************
     * *employee suggestion list start
     * ************************************************/
    public String getOnboardReport(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        String responseSrting = "";
        int count = 0;
        PreparedStatement preparedStatement = null;
        Connection connection = null;
        ResultSet resultSet = null;
        String country = "";
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            String QUERY_STRING = "";
            //  System.out.println("ajaxHandlerAction.getFlag() "+ajaxHandlerAction.getFlag());
            //  System.out.println("country in getOnboardReport "+country);
            Map rolesMap = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_ROLES);
            if (!rolesMap.containsValue("Admin")) {

                ajaxHandlerAction.setCountry(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.Living_COUNTRY).toString());
            } else if ("-1".equals(ajaxHandlerAction.getCountry())) {
                ajaxHandlerAction.setCountry("%");

            }
            // country = ajaxHandlerAction.getCountry();
            String deptName = ajaxHandlerAction.getDepartmentName();
            if (deptName.equals("-1")) {
                deptName = "%";
            }

            country = ajaxHandlerAction.getCountry();
            if ("1".equals(ajaxHandlerAction.getFlag())) {
                QUERY_STRING = "SELECT a.OrgId,a.EmpNo,a.LName,a.FName,a.HireDate,a.PracticeId,a.SubPractice,CONCAT(c.LName,'.',c.FName) AS ReportsTo ,a.Location,CONCAT(b.LName,'.',b.FName) AS OpsName FROM tblEmployee AS a LEFT JOIN tblEmployee AS b ON ( b.Id=a.OpsContactId) LEFT JOIN tblEmployee AS c ON(c.LoginId=a.ReportsTo) WHERE a.Country LIKE '" + country + "' AND DATE(a.HireDate) BETWEEN '" + DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getStartDate()) + "' AND '" + DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getEndDate()) + "' AND a.DepartmentId like '" + deptName + "' ORDER BY a.LName";

            }
            if ("2".equals(ajaxHandlerAction.getFlag())) {
                QUERY_STRING = "SELECT a.OrgId,a.EmpNo,a.LName,a.FName,a.HireDate,a.PracticeId,a.SubPractice,CONCAT(c.LName,'.',c.FName) AS ReportsTo,a.Location,CONCAT(b.LName,'.',b.FName) AS OpsName,a.TerminationDate FROM tblEmployee AS a LEFT JOIN tblEmployee AS b ON ( b.Id=a.OpsContactId) LEFT JOIN tblEmployee AS c ON(c.LoginId=a.ReportsTo) WHERE a.Country LIKE '" + country + "' AND DATE(a.TerminationDate) BETWEEN '" + DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getStartDate()) + "' AND '" + DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getEndDate()) + "' AND a.DepartmentId like '" + deptName + "' AND a.CurStatus = 'InActive' ORDER BY a.LName";
            }
            // System.out.println("QUERY_STRING " + QUERY_STRING);
            preparedStatement = connection.prepareStatement(QUERY_STRING);
            //loginId='"+personId+"'");
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                count++;
                responseSrting = responseSrting + count + "#^$";
                if (resultSet.getString("OrgId") != null && !"".equals(resultSet.getString("OrgId"))) {
                    if ("Miracle Software Systems(India), Pvt. Ltd".equals(resultSet.getString("OrgId"))) {
                        responseSrting = responseSrting + "MSS" + "#^$";
                    } else if ("Chikiniki Enterprises(India) Pvt. Ltd".equals(resultSet.getString("OrgId"))) {
                        responseSrting = responseSrting + "CNE" + "#^$";
                    } else {
                        responseSrting = responseSrting + resultSet.getString("OrgId") + "#^$";
                    }
                } else {
                    responseSrting = responseSrting + "-" + "#^$";
                }
                if (resultSet.getString("EmpNo") != null && !"".equals(resultSet.getString("EmpNo"))) {
                    responseSrting = responseSrting + resultSet.getString("EmpNo") + "#^$";
                } else {
                    responseSrting = responseSrting + "-" + "#^$";

                }

                if (resultSet.getString("LName") != null && !"".equals(resultSet.getString("LName"))) {
                    responseSrting = responseSrting + resultSet.getString("LName") + "#^$";
                } else {
                    responseSrting = responseSrting + "-" + "#^$";

                }
                if (resultSet.getString("FName") != null && !"".equals(resultSet.getString("FName"))) {
                    responseSrting = responseSrting + resultSet.getString("FName") + "#^$";
                } else {
                    responseSrting = responseSrting + "-" + "#^$";

                }
                if (resultSet.getString("HireDate") != null && !"".equals(resultSet.getString("HireDate"))) {
                    responseSrting = responseSrting + resultSet.getString("HireDate") + "#^$";
                } else {
                    responseSrting = responseSrting + "-" + "#^$";

                }
                responseSrting = responseSrting + "-" + "#^$";
                if (resultSet.getString("PracticeId") != null && !"".equals(resultSet.getString("PracticeId"))) {
                    responseSrting = responseSrting + resultSet.getString("PracticeId") + "#^$";
                } else {
                    responseSrting = responseSrting + "-" + "#^$";

                }
                if (resultSet.getString("SubPractice") != null && !"".equals(resultSet.getString("SubPractice"))) {
                    responseSrting = responseSrting + resultSet.getString("SubPractice") + "#^$";
                } else {
                    responseSrting = responseSrting + "-" + "#^$";

                }
                if (resultSet.getString("ReportsTo") != null && !"".equals(resultSet.getString("ReportsTo"))) {
                    responseSrting = responseSrting + resultSet.getString("ReportsTo") + "|";
                } else {
                    responseSrting = responseSrting + "-" + "|";

                }
                if (resultSet.getString("Location") != null && !"".equals(resultSet.getString("Location")) && !"-1".equals(resultSet.getString("Location"))) {
                    responseSrting = responseSrting + resultSet.getString("Location") + "|";
                } else {
                    responseSrting = responseSrting + "-" + "|";

                }
                if (resultSet.getString("OpsName") != null && !"".equals(resultSet.getString("OpsName"))) {
                    responseSrting = responseSrting + resultSet.getString("OpsName");
                } else {
                    responseSrting = responseSrting + "-";

                }
                if ("1".equals(ajaxHandlerAction.getFlag())) {

                    responseSrting = responseSrting + "|*@!";


                }

                if ("2".equals(ajaxHandlerAction.getFlag())) {
                    if (resultSet.getString("TerminationDate") != null && !"".equals(resultSet.getString("TerminationDate"))) {
                        responseSrting = responseSrting + "|#^$";
                        responseSrting = responseSrting + resultSet.getString("TerminationDate") + "*@!";
                    } else {
                        responseSrting = responseSrting + "|#^$";
                        responseSrting = responseSrting + "-" + "*@!";

                    }
                }
            }
            //  System.out.println("responseSrting "+responseSrting);
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return responseSrting;
    }

    /*Investment details add/update Start
     * 
     * 
     */
    public String addOrUpdateInvestmentdetails(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement preparedStatement = null;
        CallableStatement callableStatement = null;
        ResultSet resultSet = null;
        String resutMessage = "";
        boolean isInserted = false;




        // String queryString = "INSERT INTO `tblInvestments` ( `Inv_Name`, `Country`, `StartDate`, `EndDate`, `TotalExpenses`,`Currency`,`Location`,`Description`,`AttachmentFileName`,`AttachmentLocation`,`CreatedBy`,InvestmentType)"
        //      + " VALUES(?,?,?,?,?,?,?,?,?,?,?,?)";
        String queryString = "{call spAddOrUpdateInvestment(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";

        try {
            connection = ConnectionProvider.getInstance().getConnection();

            callableStatement = connection.prepareCall(queryString);
            callableStatement.setInt(1, ajaxHandlerAction.getId());
            callableStatement.setString(2, ajaxHandlerAction.getInvestmentName());
            callableStatement.setString(3, ajaxHandlerAction.getCountryInvestment());
            callableStatement.setString(4, DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getStartDateInvestment()));
            callableStatement.setString(5, DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getEndDateInvestment()));
            callableStatement.setDouble(6, ajaxHandlerAction.getTotalExpenseAmount());
            callableStatement.setString(7, ajaxHandlerAction.getUsd());
            callableStatement.setString(8, ajaxHandlerAction.getLocationInvestment());
            callableStatement.setString(9, ajaxHandlerAction.getInvestmentDesc());
            if (ajaxHandlerAction.getAttachInvestment() != null || !"".equals(ajaxHandlerAction.getAttachInvestment())) {
                callableStatement.setString(10, ajaxHandlerAction.getAttachInvestment());
            } else {
                callableStatement.setString(10, "");
            }
            if (ajaxHandlerAction.getAttachmentLocation() != null || !"".equals(ajaxHandlerAction.getAttachmentLocation())) {
                callableStatement.setString(11, ajaxHandlerAction.getAttachmentLocation());
            } else {
                callableStatement.setString(11, "");
            }
            callableStatement.setString(12, ajaxHandlerAction.getCreatedBy());
            callableStatement.setString(13, ajaxHandlerAction.getInvestmentType());
            callableStatement.setString(14, ajaxHandlerAction.getOptType());

            callableStatement.setInt(15, ajaxHandlerAction.getInvestmentConferenceId());
            callableStatement.registerOutParameter(16, Types.VARCHAR);
            callableStatement.executeUpdate();
            resutMessage = "<font color=green>" + callableStatement.getString(16) + "</font>";


        } catch (SQLException se) {
            se.printStackTrace();
            resutMessage = "<font color=red>" + se.getMessage() + "</font>";
            throw new ServiceLocatorException(se);
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException se) {
                se.printStackTrace();
                throw new ServiceLocatorException(se);
            }
        }
        return resutMessage;
    }

    /*
     * InvestmentDetails add/update end 
     * 
     */
    public String getTerminationDetails(String empId, String loginId) throws ServiceLocatorException {
        String totalStream = "";
        Statement statement = null;
        String query = "";
        String HireDate = "";
        String TerminationDate = "";
        String ReasonForTermination = "";
        int isActiveInProjects = 0;
        //query = "SELECT TitleTypeId,HireDate,TerminationDate,Termination,CONCAT(FName,' ',MName,'.',LName) AS FullName,COUNT(ReportsTo) AS count1,CurStatus  FROM tblEmployee WHERE ReportsTo IN('" + loginId + "') OR Id=" + empId;
        query = "SELECT TitleTypeId,HireDate,TerminationDate,Termination,CONCAT(FName,' ',MName,'.',LName) AS FullName,COUNT(ReportsTo) AS count1,CurStatus  FROM tblEmployee WHERE (ReportsTo IN('" + loginId + "') OR Id=" + empId + ") AND CurStatus='Active'";
        try {

            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(query);


            while (resultSet.next()) {

                int count = resultSet.getInt("count1");
                String NAME = resultSet.getString("FullName");
                String designation = resultSet.getString("TitleTypeId");
                if (resultSet.getString("HireDate") != null && !"".equalsIgnoreCase(resultSet.getString("HireDate"))) {
                    HireDate = com.mss.mirage.util.DateUtility.getInstance().convertToviewFormat(resultSet.getString("HireDate"));
                }
                if (resultSet.getString("TerminationDate") != null && !"".equalsIgnoreCase(resultSet.getString("TerminationDate"))) {
                    TerminationDate = com.mss.mirage.util.DateUtility.getInstance().convertToviewFormat(resultSet.getString("TerminationDate"));
                }

                String status = resultSet.getString("CurStatus");
                if (resultSet.getString("Termination") != null && !"".equalsIgnoreCase(resultSet.getString("Termination"))) {
                    ReasonForTermination = resultSet.getString("Termination");
                }

                if (count > 1) {
                    totalStream = "reportsToExists";
                } else {
                    List projectList = DataSourceDataProvider.getInstance().getProjectsListByContactId(Integer.parseInt(empId));
                    isActiveInProjects = projectList.size();

                    if (isActiveInProjects > 0) {
                        totalStream = "activeInProjects";
                    } else {
                        totalStream = totalStream + "#^$" + NAME + "#^$" + designation + "#^$" + HireDate + "#^$" + TerminationDate + "#^$" + status + "#^$" + ReasonForTermination;
                    }

                }
            }

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return totalStream;
    }

    public String doUpdateTerminationDetails(String empId, java.sql.Date dateOfTermination, String reasonsForTerminate) throws ServiceLocatorException {
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        String queryString = null;
        String responseString = "";
        int updatedRows = 0;
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            queryString = " UPDATE tblEmployee SET TerminationDate= ? , Termination= ? , CurStatus= ?  WHERE Id= ? ";
            preparedStatement = connection.prepareStatement(queryString);
            preparedStatement.setDate(1, dateOfTermination);
            preparedStatement.setString(2, reasonsForTerminate);
            preparedStatement.setString(3, "Inactive");
            preparedStatement.setString(4, empId);
            updatedRows = preparedStatement.executeUpdate();
            if (updatedRows > 0) {
                responseString = "Success";
            } else {
                responseString = "Fail";
            }
            // }//Closing Cache Checking
        } catch (SQLException sql) {
            throw new ServiceLocatorException(sql);
        } finally {
            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                throw new ServiceLocatorException(ex);
            }
        }
        return responseString; // returning the object.

    }

    public String getEmployeeLocations(String country) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        //System.out.println("TeamName........"+teamName);

        //System.out.println("queryString......"+queryString);
        try {
            Map locationMap = DataSourceDataProvider.getInstance().getEmployeeLocationsList(country);

            //stringBuffer.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
            stringBuffer.append("<xml version=\"1.0\">");
            stringBuffer.append("<COUNTRY Description=\"" + country + "\">");
            stringBuffer.append("<LOCATION>");
            stringBuffer.append("<LOCATION-ID>-1</LOCATION-ID>");
            stringBuffer.append("<LOCATION-NAME>--Please Select--</LOCATION-NAME>");
            stringBuffer.append("</LOCATION>");
            //while (resultSet.next()) {

            Iterator entries = locationMap.entrySet().iterator();
            while (entries.hasNext()) {
                Map.Entry entry = (Map.Entry) entries.next();
                String key = (String) entry.getKey();
                String value = (String) entry.getValue();
                stringBuffer.append("<LOCATION>");
                stringBuffer.append("<LOCATION-ID>" + key + "</LOCATION-ID>");
                stringBuffer.append("<LOCATION-NAME>" + value + "</LOCATION-NAME>");
                stringBuffer.append("</LOCATION>");
                //   System.out.println("Key = " + key + ", Value = " + value);
            }


            stringBuffer.append("</COUNTRY>");
            stringBuffer.append("</xml>");


        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();

        }
        return stringBuffer.toString();
    }

    public String getOpportunityList(String state, int accId) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String createdBy = "";
        String totalStream = "";
        int i = 0;

        try {
            /* queryString="SELECT AccountId,Id,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title FROM tblCrmContact" +
            " WHERE AccountId ="+accId+" and ( FirstName like '"+name+"%' OR LastName like '"+name+"%' )"+
            " ORDER BY FirstName";*/

            /*   queryString = "SELECT AccountId,Id,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title,iFlag,Designation FROM tblCrmContact"
            + " WHERE AccountId =" + accId + " and ( FirstName like '" + name + "%' OR LastName like '" + name + "%' )"
            + "GROUP BY AccountId,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title"
            + " ORDER BY ContactStatus='',ContactStatus like 'Deleted',ContactStatus like 'Terminated',ContactStatus like 'Inactive',ContactStatus like 'Active' ,trim(FirstName)";
             */
            if ("All".equals(state)) {
                state = "%";
            }
            queryString = "SELECT Id,State,AccountId,Title,Description,Value,DueDate,CreatedDate FROM tblCrmOpportunity ";
            queryString = queryString + " WHERE AccountId =" + accId + " AND State LIKE '" + state + "' ORDER BY CreatedDate DESC";
            // System.err.println("queryString-->"+queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            // System.err.println("--"+queryString);
            while (resultSet.next()) {
                String Id = resultSet.getString("Id");
                String State = resultSet.getString("State");
                String AccountId = resultSet.getString("AccountId");
                String Title = resultSet.getString("Title");
                String Value = resultSet.getString("Value");
                String DueDate = resultSet.getString("DueDate");
                String CreatedDate = resultSet.getString("CreatedDate");

                i++;
                /*createdBy=resultSet.getString("CreatedById");
                count =resultSet.getInt("total");*/
                //totalStream=totalStream+i+"|"+sal+"|"+FName+"|"+LName+"|"+aliasName+"|"+title+"|"+offPhone+"|"+email+"|"+contactId+"|"+accountId+"|"+"^";
                //    totalStream = totalStream + i + "|" + sal + "|" + FName + "|" + LName + "|" + aliasName + "|" + title + "|" + offPhone + "|" + email + "|" + contactId + "|" + accountId + "|" + iFlag + "|" + designation + "^";
                totalStream = totalStream + i + "#^$" + Id + "#^$" + State + "#^$" + Title + "#^$" + Value + "#^$" + DueDate + "#^$" + CreatedDate + "*@!";
                //  totalActivities=totalActivities+count;
            }
            stringBuffer.append(totalStream);
            if (i > 0) {
                stringBuffer.append("addto");
                stringBuffer.append(i);
            }


        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.err.println("response string is"+stringBuffer.toString());
        return stringBuffer.toString();
    }

    public String popupOpportunityDescription(int Id) throws ServiceLocatorException {
        String Comments = null;
        String queryString = "";

        // queryString = "SELECT Description FROM tblCrmActivity WHERE Id="+accId;

        try {
            connection = ConnectionProvider.getInstance().getConnection();

            queryString = " SELECT Description  FROM tblCrmOpportunity WHERE Id = " + Id;

            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                Comments = resultSet.getString("Description");
                //  System.out.println("ModifiedDate------>"+createdDate);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return Comments;
    }

    public String getMissingDataReport(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        String responseSrting = "";
        int count = 0;
        PreparedStatement preparedStatement = null;
        Connection connection = null;
        ResultSet resultSet = null;
        String country = "";
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            String QUERY_STRING = "";
            //  System.out.println("ajaxHandlerAction.getFlag() "+ajaxHandlerAction.getFlag());
            //  System.out.println("country in getOnboardReport "+country);
            Map rolesMap = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_ROLES);
//            if (!rolesMap.containsValue("Admin")) {
//
//                ajaxHandlerAction.setCountry(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.Living_COUNTRY).toString());
//            } else if ("-1".equals(ajaxHandlerAction.getCountry())) {
//                ajaxHandlerAction.setCountry("%");
//
//            }
            //  country = ajaxHandlerAction.getCountry();
            //  System.out.println("repotd--" + ajaxHandlerAction.getMissedField());

            QUERY_STRING = "SELECT CONCAT(FName,' ',LName) AS NAME,Email1,WorkPhoneNo FROM tblEmployee WHERE CurStatus='Active'";
            switch (ajaxHandlerAction.getMissedField()) {
                case 1:
                    QUERY_STRING = QUERY_STRING = QUERY_STRING + " AND BankName=''";
                    break;
                case 2:
                    QUERY_STRING = QUERY_STRING = QUERY_STRING + " AND AccNum=''";
                    break;
                case 3:
                    QUERY_STRING = QUERY_STRING = QUERY_STRING + " AND NameAsPerAcc=''";
                    break;
                case 4:
                    QUERY_STRING = QUERY_STRING = QUERY_STRING + " AND IfscCode=''";
                    break;
                case 5:
                    QUERY_STRING = QUERY_STRING = QUERY_STRING + " AND AadharNum=''";
                    break;
                case 6:
                    QUERY_STRING = QUERY_STRING = QUERY_STRING + " AND AadharName=''";
                    break;
                case 7:
                    QUERY_STRING = QUERY_STRING = QUERY_STRING + " AND UANNo=''";
                    break;
                case 8:
                    QUERY_STRING = QUERY_STRING = QUERY_STRING + " AND PFNo=''";
                    break;
                case 9:
                    QUERY_STRING = QUERY_STRING = QUERY_STRING + " AND IsInternationalWorker=''";
                    break;
                case 10:
                    QUERY_STRING = QUERY_STRING = QUERY_STRING + " AND ReportsTo=''";
                    break;
                case 11:
                    //QUERY_STRING = QUERY_STRING = QUERY_STRING + " AND Location=''";
                    QUERY_STRING = QUERY_STRING = QUERY_STRING + " AND (Location='' or Location='All' or Location='-1' or Location is NULL)";

                    break;
                case 12:
                    QUERY_STRING = QUERY_STRING = QUERY_STRING + " AND Image is null";
                    break;

                case 13:
                    QUERY_STRING = QUERY_STRING = QUERY_STRING + " AND CellPhoneNo=''";
                    break;
                case 14:
                    QUERY_STRING = QUERY_STRING = QUERY_STRING + " AND SSN=''";
                    break;
                case 15:
                    QUERY_STRING = QUERY_STRING = QUERY_STRING + " AND WorkPhoneNo=''";
                    break;
                case 16:
                    QUERY_STRING = QUERY_STRING = QUERY_STRING + " AND NameAsPerPan=''";
                    break;
                case 17:
                    QUERY_STRING = QUERY_STRING = QUERY_STRING + " AND AlterPhoneNo=''";
                    break;
                    
 case 18:
                    QUERY_STRING = QUERY_STRING = QUERY_STRING + " AND (TitleTypeId IS NULL OR TRIM(TitleTypeId)='')";
                    break;

            }
            if (ajaxHandlerAction.getCountry() != null && !"".equals(ajaxHandlerAction.getCountry())) {
                QUERY_STRING = QUERY_STRING + " AND Country='" + ajaxHandlerAction.getCountry() + "'";
            }
            if (ajaxHandlerAction.getLocation() != null && !"".equals(ajaxHandlerAction.getLocation()) && !"-1".equals(ajaxHandlerAction.getLocation())) {
                QUERY_STRING = QUERY_STRING + " AND Location='" + ajaxHandlerAction.getLocation() + "'";
            }
            if (ajaxHandlerAction.getOpsContactId() != null && !"-1".equals(ajaxHandlerAction.getOpsContactId()) && !"".equals(ajaxHandlerAction.getOpsContactId())) {
                QUERY_STRING = QUERY_STRING + " AND OpsContactId=" + ajaxHandlerAction.getOpsContactId();
            } else {
                QUERY_STRING = QUERY_STRING + " AND OpsContactId like '%'";
            }
            QUERY_STRING = QUERY_STRING + " ORDER BY Name";
            //  System.out.println("QUERY_STRING " + QUERY_STRING);
            preparedStatement = connection.prepareStatement(QUERY_STRING);
            //loginId='"+personId+"'");
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                count++;
                responseSrting = responseSrting + count + "#^$";
                if (resultSet.getString("NAME") != null && !"".equals(resultSet.getString("NAME"))) {

                    responseSrting = responseSrting + resultSet.getString("NAME") + "#^$";


                } else {
                    responseSrting = responseSrting + "-" + "#^$";
                }
                if (resultSet.getString("Email1") != null && !"".equals(resultSet.getString("Email1"))) {
                    responseSrting = responseSrting + resultSet.getString("Email1") + "#^$";
                } else {
                    responseSrting = responseSrting + "-" + "#^$";

                }
                if (resultSet.getString("WorkPhoneNo") != null && !"".equals(resultSet.getString("WorkPhoneNo"))) {
                    responseSrting = responseSrting + resultSet.getString("WorkPhoneNo") + "#^$";
                } else {
                    responseSrting = responseSrting + "-" + "#^$";

                }


                responseSrting = responseSrting + "*@!";
            }
            //  System.out.println("responseSrting "+responseSrting);
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {

                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }


        return responseSrting;
    }

    public String getCustOppDashBoard(String state, String dueStartDate, String dueEndDate, String practice, int sviValue, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        stringBuffer = new StringBuffer();
        String oppDashboardList = "";
        //int isFlag=0; 
        CallableStatement callableStatement = null;
        // String title = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE).toString();
        String loginId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_CUST_ID).toString();
        String newDueSDate = "";
        String newDueEDate = "";
        int empId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_CUST_ID).toString());

        if (state.equals("")) {
            state = "%";
        }
        if (practice.equals("All")) {
            practice = "%";
        }

        /* if(curWorkCountry==null || curWorkCountry=="")
        curWorkCountry ="%";*/
        boolean checkDefUser = checkDefaultPeople(loginId);
        try {

            connection = ConnectionProvider.getInstance().getConnection();


            callableStatement = connection.prepareCall("{call spGetMyOppDashboard(?,?,?,?,?,?,?,?,?,?,?,?,?)}");
            callableStatement.setString(1, "-1");
            callableStatement.setString(2, state);
            if (dueStartDate.equals("") || dueStartDate.equals(" ") || dueStartDate == null) {
                newDueSDate = DateUtility.getInstance().convertStringToMySQLDate("01/01/1990");
                callableStatement.setString(3, newDueSDate);
            } else {
                dueStartDate = DateUtility.getInstance().convertStringToMySQLDate(dueStartDate);
                callableStatement.setString(3, dueStartDate);
            }
            if (dueEndDate.equals("") || dueEndDate.equals(" ") || dueEndDate == null) {
                newDueEDate = DateUtility.getInstance().convertStringToMySQLDate("01/01/2050");
                callableStatement.setString(4, newDueEDate);
            } else {
                dueEndDate = DateUtility.getInstance().convertStringToMySQLDate(dueEndDate);
                callableStatement.setString(4, dueEndDate);
            }

            callableStatement.setInt(5, empId);
            callableStatement.setString(6, "-1");
            callableStatement.setBoolean(7, checkDefUser);
            callableStatement.setString(8, practice);
            callableStatement.setInt(9, 2);
            callableStatement.setInt(10, sviValue);
            callableStatement.registerOutParameter(11, Types.VARCHAR);
            callableStatement.registerOutParameter(12, Types.INTEGER);
            callableStatement.registerOutParameter(13, Types.DOUBLE);
            callableStatement.executeUpdate();
            //oppDashboardList = ;
            //int count = ;

            stringBuffer.delete(0, stringBuffer.length());
            stringBuffer.append(callableStatement.getString(11));
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getInt(12));
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getInt(13));
            /*consultantList = callableStatement.getString(5);
            stringBuffer.append(callableStatement.getString(5));
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getString(6));*/

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }



        return stringBuffer.toString();

    }

    public String getRequirementList(String state, int accId) {
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String createdBy = "";
        String totalStream = "";
        int i = 0;
        //System.out.println("---------------------------------------");
        try {
            /* queryString="SELECT AccountId,Id,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title FROM tblCrmContact" +
            " WHERE AccountId ="+accId+" and ( FirstName like '"+name+"%' OR LastName like '"+name+"%' )"+
            " ORDER BY FirstName";*/

            /*   queryString = "SELECT AccountId,Id,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title,iFlag,Designation FROM tblCrmContact"
            + " WHERE AccountId =" + accId + " and ( FirstName like '" + name + "%' OR LastName like '" + name + "%' )"
            + "GROUP BY AccountId,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title"
            + " ORDER BY ContactStatus='',ContactStatus like 'Deleted',ContactStatus like 'Terminated',ContactStatus like 'Inactive',ContactStatus like 'Active' ,trim(FirstName)";
             */

            //  queryString = "SELECT Id,State,AccountId,Title,Description,Value,DueDate,CreatedDate FROM tblCrmOpportunity ";
            //    queryString = queryString + " WHERE AccountId =" + accId+" AND State LIKE '"+state+"' ORDER BY CreatedDate DESC";
            // System.err.println("queryString-->"+queryString);

            queryString = "SELECT TRIM(Id) AS RequirementId,CustomerId AS accId,TRIM(JobTitle) AS JobTitle ,CONCAT(`tblRecRequirement`.`State`,', ',`tblRecRequirement`.`Country`) AS Location,STATUS,StartDate,AssignedTo AS Recruiter,AssignToTechLead AS PreSales,Skills,Status FROM tblRecRequirement";
            queryString = queryString + " WHERE CustomerId=" + accId + " AND FIND_IN_SET(STATUS,'" + state + "') ORDER BY DatePosted DESC ";
            // System.out.println("--"+queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            while (resultSet.next()) {
                String Id = resultSet.getString("RequirementId");
                String AccountId = resultSet.getString("accId");
                String JobTitle = resultSet.getString("JobTitle");
                String Location = resultSet.getString("Location");
                String Status = resultSet.getString("Status");
                String StartDate = resultSet.getString("StartDate");
                String Recruiter = "";
                String PreSales = "";
                if (resultSet.getString("Recruiter") != null || "".equals(resultSet.getString("Recruiter"))) {
                    Recruiter = resultSet.getString("Recruiter");
                } else {
                    Recruiter = "-";
                }
                if (resultSet.getString("PreSales") != null || "".equals(resultSet.getString("PreSales"))) {
                    PreSales = resultSet.getString("PreSales");
                } else {
                    PreSales = "-";
                }
                //    resultSet.getString("");
//              
//                String Skills = resultSet.getString("Skills");
//             System.out.println("--PreSales.............."+PreSales);
//             System.out.println("--Recruiter.............."+Recruiter);
                i++;
                /*createdBy=resultSet.getString("CreatedById");
                count =resultSet.getInt("total");*/
                //totalStream=totalStream+i+"|"+sal+"|"+FName+"|"+LName+"|"+aliasName+"|"+title+"|"+offPhone+"|"+email+"|"+contactId+"|"+accountId+"|"+"^";
                //    totalStream = totalStream + i + "|" + sal + "|" + FName + "|" + LName + "|" + aliasName + "|" + title + "|" + offPhone + "|" + email + "|" + contactId + "|" + accountId + "|" + iFlag + "|" + designation + "^";
                //   totalStream = totalStream + i + "#^$" + Id + "#^$" + AccountId + "#^$" + JobTitle + "#^$" + Location + "#^$" + Status + "#^$" + StartDate + "#^$" + Recruiter + "#^$" + PreSales + "#^$" + Skills + "*@!";
                //  totalActivities=totalActivities+count;
                totalStream = totalStream + i + "#^$" + Id + "#^$" + AccountId + "#^$" + JobTitle + "#^$" + Location + "#^$" + Status + "#^$" + StartDate + "#^$" + Recruiter + "#^$" + PreSales + "*@!";
                //  System.out.println("--totalStream......................................................."+totalStream);
            }
            stringBuffer.append(totalStream);
            if (i > 0) {
                stringBuffer.append("addto");
                stringBuffer.append(i);
            }


        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.err.println("response string is"+stringBuffer.toString());
        return stringBuffer.toString();
    }

    /*Lead Search
     * Author : Santosh Kola
     * Date : 04/20/2016
     */
    public String getLeadSearch(String leadTitle, String leadStatus, String createdDateFrom, String createdDateTo, String inactiveDateFrom, String inactiveDateTo, int investmentId, String analystId, String state, String priority, String userId, int AdminFlag, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String createdBy = "";
        String totalStream = "";
        int i = 0;

        try {
            /* queryString="SELECT AccountId,Id,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title FROM tblCrmContact" +
            " WHERE AccountId ="+accId+" and ( FirstName like '"+name+"%' OR LastName like '"+name+"%' )"+
            " ORDER BY FirstName";*/

            /*   queryString = "SELECT AccountId,Id,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title,iFlag,Designation FROM tblCrmContact"
            + " WHERE AccountId =" + accId + " and ( FirstName like '" + name + "%' OR LastName like '" + name + "%' )"
            + "GROUP BY AccountId,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title"
            + " ORDER BY ContactStatus='',ContactStatus like 'Deleted',ContactStatus like 'Terminated',ContactStatus like 'Inactive',ContactStatus like 'Active' ,trim(FirstName)";
             */
            queryString = "SELECT Title,tblCrmLeads.CreatedDate AS CreatedDate,tblCrmLeads.CreatedBy AS CreatedBy,CurrStatus,tblCrmAccount.NAME,tblInvestments.Inv_Name,"
                    + "InvestmentType,AccountId,tblCrmLeads.Id AS LeadId, tblCrmLeads.ExpiryDate,tblCrmLeads.Priority FROM tblCrmLeads LEFT OUTER JOIN tblCrmAccount ON tblCrmLeads.AccountId=tblCrmAccount.Id "
                    + "LEFT OUTER JOIN tblInvestments ON tblCrmLeads.InvestmentId=tblInvestments.Inv_Id WHERE AccountId !=0 ";

            if (leadTitle != null && !"".equals(leadTitle)) {
                queryString = queryString + " AND Title LIKE '%" + leadTitle + "%' ";
            }
            if (leadStatus != null && !"".equals(leadStatus)) {
                queryString = queryString + " AND CurrStatus = '" + leadStatus + "' ";
            }

            if (createdDateFrom != null && !"".equals(createdDateFrom)) {
                queryString = queryString + " AND DATE(tblCrmLeads.CreatedDate) >= DATE('" + DateUtility.getInstance().convertStringToMySQLDate(createdDateFrom) + "') ";
            }
            if (createdDateTo != null && !"".equals(createdDateTo)) {
                queryString = queryString + " AND DATE(tblCrmLeads.CreatedDate) <= DATE('" + DateUtility.getInstance().convertStringToMySQLDate(createdDateTo) + "') ";
            }

            if (inactiveDateFrom != null && !"".equals(inactiveDateFrom)) {
                queryString = queryString + " AND DATE(ExpiryDate) >= DATE('" + DateUtility.getInstance().convertStringToMySQLDate(inactiveDateFrom) + "') ";
            }
            if (inactiveDateTo != null && !"".equals(inactiveDateTo)) {
                queryString = queryString + " AND DATE(ExpiryDate) <= DATE('" + DateUtility.getInstance().convertStringToMySQLDate(inactiveDateTo) + "') ";
            }

            if (investmentId > 0) {
                queryString = queryString + " AND Inv_Id = " + investmentId;
            }

            // if(analystId!=null && !"".equals(analystId))
            //    queryString = queryString+" AND tblCrmLeads.CreatedBy = '"+analystId+"' ";


            if (AdminFlag == 1) {
                if (analystId != null && !"".equals(analystId)) {
                    queryString = queryString + " AND tblCrmLeads.CreatedBy = '" + analystId + "' ";
                }
            } else {
                if (analystId != null && !"".equals(analystId)) {
                    queryString = queryString + " AND tblCrmLeads.CreatedBy = '" + analystId + "' ";
                } else {
                    Map teamMap = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
                    Map analistMap = DataSourceDataProvider.getInstance().getMarketingAnalystMap();
                    Map tempAnalistsMap = new HashMap();
                    Iterator iterator = teamMap.entrySet().iterator();
                    while (iterator.hasNext()) {
                        Map.Entry<String, String> entry = (Map.Entry<String, String>) iterator.next();
                        if (analistMap.containsKey(entry.getKey())) {
                            tempAnalistsMap.put(entry.getKey(), entry.getValue());
                        }

                    }

//                       teamMembers = DataSourceDataProvider.getInstance().getMyTeamMembers(userId, "Marketing");
//                        String TeamLoginIdList = DataSourceDataProvider.getInstance().getTeamLoginIdList(teamMembers);
                    String TeamLoginIdList = "'" + userId + "'";
                    if (tempAnalistsMap.size() > 0) {
                        TeamLoginIdList = TeamLoginIdList + "," + getKeys(tempAnalistsMap, ",");
                    }

                    //   System.out.println("Lead-->"+TeamLoginIdList);

                    queryString = queryString + " AND tblCrmLeads.CreatedBy IN ( " + TeamLoginIdList + " ) ";
                }
            }




            if (priority != null && !"".equals(priority)) {
                queryString = queryString + " AND tblCrmLeads.Priority = '" + priority + "' ";
            }



            if (state != null && !"".equals(state)) {
                queryString = queryString + " AND AccountId IN (SELECT tblCrmAccount.Id FROM tblCrmAccount INNER JOIN tblCrmAddress ON PrimaryAddressId=tblCrmAddress.Id WHERE tblCrmAddress.State='" + state + "') ";
            }




            queryString = queryString + " ORDER BY tblCrmLeads.CreatedDate DESC";
            //  System.out.println("queryString-->"+queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);

            while (resultSet.next()) {
                String Title = resultSet.getString("Title");
                String CreatedDate = resultSet.getString("CreatedDate");
                String CreatedBy = resultSet.getString("CreatedBy");
                String AccountNAME = resultSet.getString("NAME");
                String Inv_Name = resultSet.getString("Inv_Name");
                String InvestmentType = resultSet.getString("InvestmentType");
                String CurrStatus = resultSet.getString("CurrStatus");
                String AccountId = resultSet.getString("AccountId");
                String leadId = resultSet.getString("LeadId");
                String ExpiryDate = resultSet.getString("ExpiryDate");
                String LeadPriority = resultSet.getString("Priority");
                i++;
                String type = InvestmentType;
                if (AccountNAME == null || "".equals(AccountNAME)) {
                    AccountNAME = "-";
                }
                if ("P".equals(InvestmentType)) {
                    InvestmentType = "Lead Pass";
                } else {
                    InvestmentType = "Lead Source";
                }
                /*createdBy=resultSet.getString("CreatedById");
                count =resultSet.getInt("total");*/
                //totalStream=totalStream+i+"|"+sal+"|"+FName+"|"+LName+"|"+aliasName+"|"+title+"|"+offPhone+"|"+email+"|"+contactId+"|"+accountId+"|"+"^";
                //    totalStream = totalStream + i + "|" + sal + "|" + FName + "|" + LName + "|" + aliasName + "|" + title + "|" + offPhone + "|" + email + "|" + contactId + "|" + accountId + "|" + iFlag + "|" + designation + "^";
                totalStream = totalStream + i + "#^$" + Title + "#^$" + CreatedDate + "#^$" + CreatedBy + "#^$" + AccountNAME + "#^$" + Inv_Name + "-" + InvestmentType + "#^$" + CurrStatus + "#^$" + LeadPriority + "#^$" + ExpiryDate + "#^$" + AccountId + "#^$" + leadId + "#^$" + type + "*@!";
                //  totalActivities=totalActivities+count;
            }
            stringBuffer.append(totalStream);
            stringBuffer.append("addto");

            stringBuffer.append(i);
            // System.out.println("stringBuffer-->"+stringBuffer.toString());
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.err.println("response string is"+stringBuffer.toString());
        return stringBuffer.toString();
    }

    /*Get AccountDetails
     * 
     * 
     */
    public String getAccountDetailsById(int accountId) throws ServiceLocatorException {
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;

        String queryString = null;

        String accountDetails = "";
        String queryString1 = "SELECT CONCAT(FName,' ',MName,'.',LName) AS EmpName,Email1,WorkPhoneNo FROM tblEmployee WHERE LoginId IN (SELECT TeamMemberId FROM tblCrmAccountTeam WHERE AccountId=" + accountId + ") ";

        String queryString2 = "SELECT NAME ,tblCrmAddress.City,tblCrmAddress.State FROM tblCrmAccount INNER JOIN tblCrmAddress ON PrimaryAddressId=tblCrmAddress.Id WHERE tblCrmAccount.Id= " + accountId;

        connection = ConnectionProvider.getInstance().getConnection();

        try {

            statement = connection.createStatement();

            resultSet = statement.executeQuery(queryString2);
            if (resultSet.next()) {
                accountDetails = resultSet.getString("NAME") + "!" + resultSet.getString("City") + "!" + resultSet.getString("State") + "^";
            }

            resultSet = statement.executeQuery(queryString1);
            while (resultSet.next()) {
                accountDetails = accountDetails + resultSet.getString("EmpName") + "," + resultSet.getString("Email1") + "," + resultSet.getString("WorkPhoneNo") + "!";
            }

        } catch (SQLException sql) {
            throw new ServiceLocatorException(sql);
        } finally {
            try {
                // resultSet Object Checking if it's null then close and set null
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }

                if (statement != null) {
                    statement.close();
                    statement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                throw new ServiceLocatorException(ex);
            }
        }
        return accountDetails; // returning the object.
    }

    public String getContactNamesList(String accId) throws ServiceLocatorException {
        StringBuffer reportsToBuffer = new StringBuffer();
        String projectId = null;
        boolean isGetting = false;
        String topManagementPeople[] = null;
        boolean isTopManager = false;
//        queryString = "SELECT LoginId,FName,MName,LName FROM tblEmployee WHERE DepartmentId='"+deptName+"' AND (IsManager=1 OR IsTeamLead=1) AND CurStatus='Active' ORDER BY FName";


        try {

            Map contactsMap = DataSourceDataProvider.getInstance().getContactsNamesAgainstAccount(Integer.parseInt(accId));

            int count = 0;

            Iterator entries = contactsMap.entrySet().iterator();





            reportsToBuffer.append("<xml version=\"1.0\">");
            reportsToBuffer.append("<CONTACTS>");

            while (entries.hasNext()) {
                Map.Entry entry = (Map.Entry) entries.next();
                String contactName = (String) entry.getValue();
                int contactId = (Integer) entry.getKey();


                // projects.append(projectName);

                reportsToBuffer.append("<CONTACT contactId=\"" + contactId + "\">");
                if (contactName.contains("&")) {
                    contactName = contactName.replace("&", "&amp;");
                }
                reportsToBuffer.append(contactName);
                reportsToBuffer.append("</CONTACT>");

            }
            reportsToBuffer.append("</CONTACTS>");
            reportsToBuffer.append("</xml>");



            // System.out.println("XML-->"+reportsToBuffer);
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        //System.out.println("Team List: "+reportsToBuffer.toString());
        return reportsToBuffer.toString();
    }

    public String getOppurtunitySearch(int investmentId, String oppurtunityAccountName, String oppurtunitiesPersonId) throws ServiceLocatorException {
        stringBuffer = new StringBuffer();
        CallableStatement callableStatement = null;
        PreparedStatement preparedStatement = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String queryString = "";
        String totalStream = "";
        String createdBy = null;
        int i = 0;

        try {
            /* queryString="SELECT AccountId,Id,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title FROM tblCrmContact" +
            " WHERE AccountId ="+accId+" and ( FirstName like '"+name+"%' OR LastName like '"+name+"%' )"+
            " ORDER BY FirstName";*/
            // System.out.println("investment in service Impl-----"+investmentId);
            //   System.out.println("investment in service Impl-----"+oppurtunityAccountName);
            //  createdBy = DataSourceDataProvider.getInstance().getLoginIdByEmpNo(Integer.parseInt(oppurtunitiesPersonId));
            /*   queryString = "SELECT AccountId,Id,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title,iFlag,Designation FROM tblCrmContact"
            + " WHERE AccountId =" + accId + " and ( FirstName like '" + name + "%' OR LastName like '" + name + "%' )"
            + "GROUP BY AccountId,Salutation,Gender,LastName,FirstName,AliasName,OfficePhone,Email1,Title"
            + " ORDER BY ContactStatus='',ContactStatus like 'Deleted',ContactStatus like 'Terminated',ContactStatus like 'Inactive',ContactStatus like 'Active' ,trim(FirstName)";
             */
            queryString = "SELECT tblCrmOpportunity.AccountId,tblCrmOpportunity.Id,tblCrmAccount.NAME,tblCrmOpportunity.Title,tblCrmOpportunity.State,tblCrmOpportunity.CreatedDate,tblCrmOpportunity.CreatedBy,tblCrmOpportunity.VALUE FROM tblCrmOpportunity LEFT JOIN tblCrmLeads ON ( tblCrmOpportunity.LeadSourceId=tblCrmLeads.Id)LEFT JOIN tblInvestments ON ( tblCrmLeads.InvestmentId=tblInvestments.Inv_Id) LEFT JOIN tblCrmAccount ON ( tblCrmOpportunity.AccountId=tblCrmAccount.Id) WHERE  tblCrmAccount.NAME IS NOT NULL AND tblInvestments.Inv_Id = " + investmentId;

            if (oppurtunitiesPersonId != null && !"".equals(oppurtunitiesPersonId)) {
                queryString = queryString + " AND tblCrmOpportunity.CreatedBy = '" + oppurtunitiesPersonId + "' ";
            }


            if (oppurtunityAccountName != null && !"".equals(oppurtunityAccountName)) {
                queryString = queryString + " AND NAME LIKE '%" + oppurtunityAccountName + "%' ";
            }


            //  System.out.println("queryString-->"+queryString);
            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(queryString);
            String Account_Name = "";
            // System.err.println("--"+queryString);
            while (resultSet.next()) {
//                int Id = resultSet.getInt("Inv_Id");
                if (resultSet.getString("NAME") != null && !"".equals(resultSet.getString("NAME"))) {
                    Account_Name = resultSet.getString("NAME");
                } else {
                    Account_Name = " ";
                }


                String Title = resultSet.getString("Title");
//               int oppurtunityId = resultSet.getInt("State");
                String State = resultSet.getString("State");
                String CreatedDate = resultSet.getString("CreatedDate");
                String CreatedBy = resultSet.getString("CreatedBy");
                String VALUE = resultSet.getString("VALUE");
                String AccountId = resultSet.getString("AccountId");
                String OppurtunityId = resultSet.getString("Id");
//                 String InvestmentType = resultSet.getString("InvestmentType");
//                 String Country = resultSet.getString("Country");
//                 String CreatedDate = resultSet.getString("CreatedDate");

                i++;

                /*createdBy=resultSet.getString("CreatedById");
                count =resultSet.getInt("total");*/
                //totalStream=totalStream+i+"|"+sal+"|"+FName+"|"+LName+"|"+aliasName+"|"+title+"|"+offPhone+"|"+email+"|"+contactId+"|"+accountId+"|"+"^";
                //    totalStream = totalStream + i + "|" + sal + "|" + FName + "|" + LName + "|" + aliasName + "|" + title + "|" + offPhone + "|" + email + "|" + contactId + "|" + accountId + "|" + iFlag + "|" + designation + "^";
                totalStream = totalStream + i + "#^$" + Account_Name + "#^$" + Title + "#^$" + State + "#^$" + CreatedDate + "#^$" + CreatedBy + "#^$" + VALUE + "#^$" + AccountId + "#^$" + OppurtunityId + "*@!";
                //  totalActivities=totalActivities+count;
            }
            stringBuffer.append(totalStream);
            stringBuffer.append("addto");

            stringBuffer.append(i);
            //System.out.println("stringBuffer-->"+stringBuffer.toString());
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        // System.err.println("response string is"+stringBuffer.toString());
        return stringBuffer.toString();
    }

    public String getOppurtunityAccountDetails(int oppurtunityId) throws ServiceLocatorException {
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;

        String queryString = null;

        String accountDetails = "";
        String insideSalesId = "";



//           String queryString2 = "SELECT NAME ,tblCrmAddress.City,tblCrmAddress.State FROM tblCrmAccount INNER JOIN tblCrmAddress ON PrimaryAddressId=tblCrmAddress.Id WHERE tblCrmAccount.Id= "+oppurtunityAccountId;

        try {


            String queryString1 = "SELECT * FROM tblCrmOpportunity WHERE Id=" + oppurtunityId;

            connection = ConnectionProvider.getInstance().getConnection();

            //    System.out.println("insideSalesId----"+insideSalesId);
            statement = connection.createStatement();

            resultSet = statement.executeQuery(queryString1);
            while (resultSet.next()) {
                insideSalesId = DataSourceDataProvider.getInstance().getEmployeeNameByEmpNo(resultSet.getInt("InsideSalesId"));
                accountDetails = resultSet.getString("Title") + "#^$" + resultSet.getString("State") + "#^$" + resultSet.getString("Practice") + "#^$" + resultSet.getString("Type") + "#^$" + resultSet.getString("Stage") + "#^$" + insideSalesId + "#^$" + resultSet.getString("DueDate") + "#^$" + resultSet.getInt("Value") + "#^$" + resultSet.getString("Description") + "*@!";
            }
            // System.out.println("response is----->"+accountDetails);
        } catch (SQLException sql) {
            sql.printStackTrace();
            throw new ServiceLocatorException(sql);
        } finally {
            try {
                // resultSet Object Checking if it's null then close and set null
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }

                if (statement != null) {
                    statement.close();
                    statement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                throw new ServiceLocatorException(ex);
            }
        }
        return accountDetails; // returning the object.
    }

    // Cc methods start
    /*
     * 
     * Constant Contact related methods begins:-
     * Written by:Sri Harsha Chepena
     * ------------------------------------------------------------------------------------------------
     */
    /*
     * Written by:Sri Harsha Chepena
     * This doConstantContactListSearch method for getting constant contact list and its details.
     */
    public String doConstantContactListSearch(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {
        // int userRoleId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_ROLE_ID).toString());

        String responseString = "";
        String Api_Key = Properties.getProperty("API_KEY");
        String Access_Tocken = Properties.getProperty("ACCESS_TOCKEN");
        ContactListService cls = null;
        try {
            /* new code */

            String startDate = ajaxHandlerAction.getStartDate();
            String endDate = ajaxHandlerAction.getEndDate();

            cls = new ContactListService(Api_Key, Access_Tocken);

            ArrayList conList = new ArrayList();
            conList = (ArrayList) cls.getLists(null);

            for (int j = 0; j < conList.size(); j++) {
                ContactList contactList = (ContactList) conList.get(j);
                String createdDate = com.mss.mirage.util.DateUtility.getInstance().sqlTimeStampTousTimeStamp(contactList.getCreatedDate());
                Date creDate = com.mss.mirage.util.DateUtility.getInstance().getConstatcontactDate(createdDate.substring(0, 10));

                if (endDate != null && !"".equals(endDate) && startDate != null && !"".equals(startDate)) {

                    Date endDate1 = com.mss.mirage.util.DateUtility.getInstance().getConstatcontactDate(endDate);
                    Date startDate1 = com.mss.mirage.util.DateUtility.getInstance().getConstatcontactDate(startDate);
                    if (startDate1.compareTo(creDate) <= 0) {
                        if (endDate1.compareTo(creDate) >= 0) {
                            responseString = responseString + contactList.getId() + "#^$" + contactList.getName() + "#^$" + contactList.getCreatedDate() + "#^$" + contactList.getStatus() + "#^$" + contactList.getContactCount() + "*@!";
                        }

                    }

                } else if (startDate != null && !"".equals(startDate)) {
                    Date startDate1 = com.mss.mirage.util.DateUtility.getInstance().getConstatcontactDate(startDate);
                    if (startDate1.compareTo(creDate) <= 0) {
                        responseString = responseString + contactList.getId() + "#^$" + contactList.getName() + "#^$" + contactList.getCreatedDate() + "#^$" + contactList.getStatus() + "#^$" + contactList.getContactCount() + "*@!";
                    }
                } else if (endDate != null && !"".equals(endDate)) {
                    Date endDate1 = com.mss.mirage.util.DateUtility.getInstance().getConstatcontactDate(endDate);
                    if (endDate1.compareTo(creDate) >= 0) {
                        responseString = responseString + contactList.getId() + "#^$" + contactList.getName() + "#^$" + contactList.getCreatedDate() + "#^$" + contactList.getStatus() + "#^$" + contactList.getContactCount() + "*@!";
                    }
                } else {
                    responseString = responseString + contactList.getId() + "#^$" + contactList.getName() + "#^$" + contactList.getCreatedDate() + "#^$" + contactList.getStatus() + "#^$" + contactList.getContactCount() + "*@!";
                }

            }

            if ("".equals(responseString)) {
                responseString = "NoData";
            }

        } catch (ConstantContactServiceException e) {

            e.printStackTrace();
            responseString = "issue";
            System.out.println(e.getMessage());
        } catch (Exception e) {

            e.printStackTrace();
            responseString = "issue";
            System.out.println(e.getMessage());
        } finally {
            try {

                if (cls != null) {

                    cls = null;
                }

            } catch (Exception e) {
            }
        }
        return responseString;
    }
    /*
     * Written by:Sri Harsha Chepena
     * this doCampaignContactListSearch method for getting Campaign details
     * 
     */

    public String doCampaignContactListSearch(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {


        String responseString = "";
        String Api_Key = Properties.getProperty("API_KEY");
        String Access_Tocken = Properties.getProperty("ACCESS_TOCKEN");
        ConstantContactFactory _serviceFactory = null;
        PaginationHelperService _pagingService = null;
        IEmailCampaignService ies = null;
        com.constantcontact.components.generic.response.ResultSet<EmailCampaignResponse> resultEcs = null;
        try {
            /* new code */

            String startDate = ajaxHandlerAction.getStartDate();
            String endDate = ajaxHandlerAction.getEndDate();
            //   System.out.println("startDate" + startDate);
            //         System.out.println("startDate" + endDate);

            _serviceFactory = new ConstantContactFactory(Api_Key, Access_Tocken);
            _pagingService = _serviceFactory.createPaginationHelperService();
            ies = _serviceFactory.createEmailCampaignService();


            List<EmailCampaignResponse> ecrList = new ArrayList<EmailCampaignResponse>();
            resultEcs = ies.getCampaigns(50, null);
            ecrList.addAll(resultEcs.getResults());
            while (resultEcs.getMeta().getPagination() != null) {
                resultEcs = _pagingService.getPage(resultEcs.getMeta().getPagination(), EmailCampaignResponse.class);
                // Store the contacts as we fetch them

                if (resultEcs != null && resultEcs.getResults() != null) {
                    //System.out.println("results" + resultEcs.size());
                    ecrList.addAll(resultEcs.getResults());
                } else {
                    break;
                }
                // if(results==null)break;

            }
            //     System.out.println(ecrList.size());




            for (int l = 0; l < ecrList.size(); l++) {
                EmailCampaignResponse resE = ecrList.get(l);


                String createdDate = com.mss.mirage.util.DateUtility.getInstance().sqlTimeStampTousTimeStamp(resE.getModifiedDate());

                Date creDate = com.mss.mirage.util.DateUtility.getInstance().getConstatcontactDate(createdDate.substring(0, 10));
                if (endDate != null && !"".equals(endDate) && startDate != null && !"".equals(startDate)) {
                    Date endDate1 = com.mss.mirage.util.DateUtility.getInstance().getConstatcontactDate(endDate);
                    Date startDate1 = com.mss.mirage.util.DateUtility.getInstance().getConstatcontactDate(startDate);
                    if (startDate1.compareTo(creDate) <= 0) {
                        if (endDate1.compareTo(creDate) >= 0) {


                            responseString = responseString + resE.getId() + "#^$" + resE.getName() + "#^$" + resE.getModifiedDate() + "#^$" + resE.getStatus() + "*@!";
                        }
                    }
                } else if (startDate != null && !"".equals(startDate)) {
                    Date startDate1 = com.mss.mirage.util.DateUtility.getInstance().getConstatcontactDate(startDate);
                    if (startDate1.compareTo(creDate) <= 0) {

                        responseString = responseString + resE.getId() + "#^$" + resE.getName() + "#^$" + resE.getModifiedDate() + "#^$" + resE.getStatus() + "*@!";
                    }
                } else if (endDate != null && !"".equals(endDate)) {
                    //   System.out.println("end condition");
                    Date endDate1 = com.mss.mirage.util.DateUtility.getInstance().getConstatcontactDate(endDate);
                    if (endDate1.compareTo(creDate) >= 0) {

                        responseString = responseString + resE.getId() + "#^$" + resE.getName() + "#^$" + resE.getModifiedDate() + "#^$" + resE.getStatus() + "*@!";
                    }
                } else {
                    //   System.out.println("no condition");

                    responseString = responseString + resE.getId() + "#^$" + resE.getName() + "#^$" + resE.getModifiedDate() + "#^$" + resE.getStatus() + "*@!";
                }


            }


///
            //    System.out.println("responseString...." + responseString);
            if ("".equals(responseString)) {
                responseString = "NoData";
            }
            //   System.out.println("resutString" + responseString);


        } catch (ConstantContactServiceException e) {

            e.printStackTrace();
            //System.out.println(e.getMessage());
        } catch (Exception e) {

            e.printStackTrace();
            //System.out.println(e.getMessage());
        } finally {
            try {

                if (_serviceFactory != null) {

                    _serviceFactory = null;
                }

                if (_pagingService != null) {

                    _pagingService = null;
                }

                if (ies != null) {

                    ies = null;
                }

                if (resultEcs != null) {

                    resultEcs = null;
                }

            } catch (Exception e) {
            }
        }
        return responseString;
    }
    /*
     * Written by:Sri Harsha Chepena
     * This doGetCampaignEmailsList method getting Email Campaign Tracking details
     * 
     */

    public String doGetCampaignEmailsList(String campaignId, String requirement) throws ServiceLocatorException {
        // int userRoleId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_ROLE_ID).toString());

        String responseString = "";

        String Api_Key = Properties.getProperty("API_KEY");
        String Access_Tocken = Properties.getProperty("ACCESS_TOCKEN");


        EmailCampaignTrackingService ect = null;
        com.constantcontact.components.generic.response.ResultSet<EmailCampaignTrackingSend> resultsend = null;
        com.constantcontact.components.generic.response.ResultSet<EmailCampaignTrackingOpen> resultopen = null;
        com.constantcontact.components.generic.response.ResultSet<EmailCampaignTrackingBounce> resultBounce = null;
        com.constantcontact.components.generic.response.ResultSet<EmailCampaignTrackingUnsubscribe> resultUnsubscribe = null;
        com.constantcontact.components.generic.response.ResultSet<EmailCampaignTrackingForward> resultForward = null;
        try {
            /* new code */

            ect = new EmailCampaignTrackingService(Api_Key, Access_Tocken);
            if (requirement.equalsIgnoreCase("send")) {
                responseString = responseString + "SEND records" + "^";
                resultsend = ect.getSends(campaignId, 500, null);
                //    System.out.println("send item" + resultsend.size());
                for (int l = 0; l < resultsend.size(); l++) {
                    // System.out.println("send");
                    EmailCampaignTrackingSend esen = resultsend.get(l);
//                    System.out.println("bbb" + esen.getContactId());
//                    System.out.println(esen.getEmailAddress());

                    responseString = responseString + esen.getEmailAddress() + "|";
                }

            } else if (requirement.equalsIgnoreCase("open")) {
                responseString = responseString + "OPENED records" + "^";
                resultopen = ect.getOpens(campaignId, 500, null);
                Set openSet = new HashSet();
                for (int l = 0; l < resultopen.size(); l++) {
                    //  System.out.println("reopen");
                    EmailCampaignTrackingOpen eop = resultopen.get(l);
//                    System.out.println("bbb" + eop.getContactId());
//                    System.out.println(eop.getEmailAddress());
                    openSet.add(eop.getEmailAddress());

                }
                List openList = new ArrayList(openSet);
                for (int i = 0; i < openList.size(); i++) {
                    responseString = responseString + openList.get(i) + "|";
                }

            } else if (requirement.equalsIgnoreCase("bounce")) {
                responseString = responseString + "BOUNCED records" + "^";
                resultBounce = ect.getBounces(campaignId, 500);
                //    System.out.println(resultBounce.size());
                //   System.out.println("Bounsingggggggggggggg");
                for (int l = 0; l < resultBounce.size(); l++) {
                    EmailCampaignTrackingBounce ebo = resultBounce.get(l);

                    ebo.getContactId();

                    responseString = responseString + ebo.getEmailAddress() + "|";
                }
            } else if (requirement.equalsIgnoreCase("unsubscribe")) {
                responseString = responseString + "Unsubscribed records" + "^";
                resultUnsubscribe = ect.getUnsubscribes(campaignId, Integer.SIZE, null);

                for (int l = 0; l < resultUnsubscribe.size(); l++) {
                    //       System.out.println("send");
                    EmailCampaignTrackingUnsubscribe esuu = resultUnsubscribe.get(l);
//                    System.out.println("bbb" + esuu.getContactId());
//                    System.out.println(esuu.getEmailAddress());
                    responseString = responseString + esuu.getEmailAddress() + "|";
                }
            } else if (requirement.equalsIgnoreCase("forward")) {
                responseString = responseString + "Forwarded records" + "^";
                resultForward = ect.getForwards(campaignId, Integer.SIZE, null);
                for (int l = 0; l < resultForward.size(); l++) {
                    EmailCampaignTrackingForward ecfw = resultForward.get(l);
                    responseString = responseString + ecfw.getEmailAddress() + "|";
                }
            }


            if ("".equals(responseString)) {
                responseString = "No records present";
            }
            //   System.out.println("resutString" + responseString);


        } catch (ConstantContactServiceException e) {
//            ConstantContactServiceException c = (ConstantContactServiceException) e.getCause();
//            for (Iterator<RawApiRequestError> i = c.getErrorInfo().iterator(); i.hasNext();) {
//                RawApiRequestError item = i.next();
//                System.out.println(item.getErrorKey() + " : " + item.getErrorMessage());
//            }
            e.printStackTrace();
            //System.out.println(e.getMessage());
        } finally {
            try {

                if (ect != null) {

                    ect = null;
                }

                if (resultsend != null) {

                    resultsend = null;
                }

                if (resultopen != null) {

                    resultopen = null;
                }

                if (resultBounce != null) {

                    resultBounce = null;
                }
                if (resultUnsubscribe != null) {

                    resultUnsubscribe = null;
                }
                if (resultForward != null) {

                    resultForward = null;
                }

            } catch (Exception e) {
            }
        }
        return responseString;
    }
    /*
     *  Written by:Sri Harsha Chepena
     * this doSynchronizeToHubble for getting Synchronization with hubble functionility
     */

    public String doSynchronizeToHubble(String contactList) throws ServiceLocatorException {


        String responseString = "";
        Connection connection = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String Api_Key = Properties.getProperty("API_KEY");
        String Access_Tocken = Properties.getProperty("ACCESS_TOCKEN");
        ConstantContactFactory _serviceFactory = null;
        PaginationHelperService _pagingService = null;
        IContactListService icls = null;
        com.constantcontact.components.generic.response.ResultSet<Contact> results = null;
        ContactService cs = null;
        try {
            /* new code */


            _serviceFactory = new ConstantContactFactory(Api_Key, Access_Tocken);
            _pagingService = _serviceFactory.createPaginationHelperService();

            icls = _serviceFactory.createContactListService();

            List<Contact> contacts = new ArrayList<Contact>();
            String contactId = "";

            List<ContactList> conLists = new ArrayList<ContactList>();
            conLists = icls.getLists(null);

            for (int j = 0; j < conLists.size(); j++) {
                ContactList contList = (ContactList) conLists.get(j);
                if (contList.getName().equalsIgnoreCase(contactList.trim())) {
                    contactId = contList.getId();
                    //   System.out.println(contList.getName());
                }

            }

            if ("".equalsIgnoreCase(contactId)) {


                ContactList contList = new ContactList();
                contList.setName(contactList);
                contList.setStatus("ACTIVE");
                contList = icls.addList(contList);
                contactId = contList.getId();
            }

            results = icls.getContactsFromList(contactId, 500, null);
            contacts.addAll(results.getResults());


            while (results.getMeta().getPagination() != null) {
                results = _pagingService.getPage(results.getMeta().getPagination(), Contact.class);


                if (results != null && results.getResults() != null) {
                    //System.out.println("results" + results.size());
                    contacts.addAll(results.getResults());
                } else {
                    break;
                }


            }
            List emails = new ArrayList();
            for (int j = 0; j < contacts.size(); j++) {
                emails.add(contacts.get(j).getEmailAddresses().get(0).getEmailAddress());
            }


            cs = new ContactService(Api_Key, Access_Tocken);
            connection = ConnectionProvider.getInstance().getConnection();
            ContactList contList = icls.getList(contactId);
            String contListName = contList.getName();



            String query = "SELECT FName,LName,OrgId,CurStatus,Email1 FROM tblEmployee WHERE CurStatus='Active' And Location IN('" + contListName + "')";
//            System.out.println("query-----" + query);

            preparedStatement = connection.prepareStatement(query);

            resultSet = preparedStatement.executeQuery();

            // System.out.println(con2.getCreatedDate()+"...."+con2.getName()+"...."+con2.getStatus()+"..."+con2.getId());

            while (resultSet.next()) {
                //System.out.println("here");
                // System.out.println(resultSet.getString("Email1"));
                if (resultSet.getString("Email1") != null && !"".equals(resultSet.getString("Email1"))) {
                    if (emails.contains(resultSet.getString("Email1").trim())) {
                        //  System.out.println("remove from cc-->" + resultSet.getString("Email1"));
                        emails.remove(resultSet.getString("Email1").trim());
                    } else {

                        com.constantcontact.components.generic.response.ResultSet rs = null;
                        Contact contact = null;
                        String resString = "";
                        try {
                            rs = cs.getContactByEmail(resultSet.getString("Email1"));
                            // System.out.println("mail-->" + resultSet.getString("Email1"));
                            contact = new Contact();
                            if (rs.size() > 0) {
                                // System.out.println("exits mail--->" + resultSet.getString("Email1"));
                                //   System.out.println("Email Exits ra babuuu");
                                contact = (Contact) rs.getResults().get(0);
                                contact = cs.getContact(contact.getId());
                                ContactList cl = null;
                                List<ContactList> clist1 = new ArrayList();


                                cl = new ContactList();

                                cl.setId(contactId);
                                clist1.add(cl);


                                contact.setLists(clist1);
                                contact = cs.updateContact(contact, true);


                            } else {
                                // System.out.println("add contact once emails no exits-->"+resultSet.getString("Email1"));

                                contact.setFirstName(resultSet.getString("FName"));
                                contact.setLastName(resultSet.getString("LName"));
                                contact.setStatus(resultSet.getString("CurStatus").toUpperCase());
                                contact.setCompanyName(resultSet.getString("OrgId"));

                                ContactList cl = new ContactList();
                                cl.setId(contactId);
                                List<ContactList> clist = new ArrayList();
                                clist.add(cl);
                                contact.setLists(clist);

                                EmailAddress email = new EmailAddress(resultSet.getString("Email1"));
                                List<EmailAddress> lem = new ArrayList();
                                lem.add(email);
                                contact.setEmailAddresses(lem);
                                cs.addContact(contact, Boolean.TRUE);

                            }
                        } catch (ConstantContactServiceException exp) {

                            resString = "Unsuccess do to Constant contact Error! at" + contactList + " for" + resultSet.getString("FName");
                            //  System.out.println("resString" + resString);
                        } finally {
                            try {

                                if (rs != null) {

                                    rs = null;
                                }

                                if (contact != null) {

                                    contact = null;
                                }
                            } catch (Exception e) {
                            }
                        }
                    }

                }

            }
            //  System.out.println(emails.size());
            for (int k = 0; k < emails.size(); k++) {
                //  System.out.println("email.." + emails.get(k));
                results = cs.getContactByEmail(emails.get(k).toString());
                //  System.out.println("email.." + emails.get(k)+">>id.."+results.get(0).getId());
                cs.deleteContactFromList(results.get(0).getId(), contactId);
            }
            responseString = "success";
        } catch (SQLException ex) {
            // Logger.getLogger(AjaxHandlerServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            responseString = "<font color=red>Unsuccess do to sql! try Again</font>";
        } catch (ConstantContactServiceException e) {
//            ConstantContactServiceException c = (ConstantContactServiceException) e.getCause();
//            for (Iterator<RawApiRequestError> i = c.getErrorInfo().iterator(); i.hasNext();) {
//                RawApiRequestError item = i.next();
//                System.out.println(item.getErrorKey() + " : " + item.getErrorMessage());
//            }
            e.printStackTrace();
            //     System.out.println(e.getMessage());
            responseString = "<font color=red>Unsuccess do to Constant contact Error! try Again</font>";
        } finally {
            try {
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
                if (_serviceFactory != null) {

                    _serviceFactory = null;
                }

                if (_pagingService != null) {

                    _pagingService = null;
                }
                if (icls != null) {

                    icls = null;
                }
                if (results != null) {

                    results = null;
                }
                if (cs != null) {

                    cs = null;
                }
            } catch (SQLException ex) {
                throw new ServiceLocatorException(ex);
            } catch (Exception e) {
            }
        }
        //     System.out.println("responseString" + responseString);
        return responseString;
    }

    /*
     * Written by:Sri harsha Chepena
     * this below method for getting all the contacts that are in selectedlist (or) getting contact details of
     * particular email.
     */
    public String doConstantContactEmailList(String contactId, String contactEmailID) throws ServiceLocatorException {
        String responseString = "";
        String Api_Key = Properties.getProperty("API_KEY");
        String Access_Tocken = Properties.getProperty("ACCESS_TOCKEN");
        ConstantContactFactory _serviceFactory = null;
        PaginationHelperService _pagingService = null;
        IContactService cs = null;
        IContactListService cls = null;
        com.constantcontact.components.generic.response.ResultSet<Contact> results = null;
        try {




            _serviceFactory = new ConstantContactFactory(Api_Key, Access_Tocken);
            _pagingService = _serviceFactory.createPaginationHelperService();
            cs = _serviceFactory.createContactService();
            cls = _serviceFactory.createContactListService();

            List<Contact> contacts = new ArrayList<Contact>();

            if (contactEmailID != null && !"".equalsIgnoreCase(contactEmailID.trim())) {

                results = cs.getContactByEmail(contactEmailID.trim());
                contacts.addAll(results.getResults());
                for (int i = 0; i < contacts.size(); i++) {
                    Contact contactt = contacts.get(i);
                    List<EmailAddress> lem = contactt.getEmailAddresses();
                    List<ContactList> cl = contactt.getLists();

                    // System.out.println(contactId);
                    if (contactId.trim().equalsIgnoreCase("All")) {
                        responseString = responseString + contactt.getFirstName() + "#^$" + contactt.getLastName() + "#^$" + contactt.getStatus() + "#^$" + lem.get(0).getEmailAddress() + "#^$" + contactt.getCreatedDate() + "*@!";
                    } else if (contactId.trim().equalsIgnoreCase("REMOVED")) {
                        if (contactt.getStatus().equalsIgnoreCase("REMOVED")) {
                            //    System.out.println("removedd");
                            responseString = responseString + contactt.getFirstName() + "#^$" + contactt.getLastName() + "#^$" + contactt.getStatus() + "#^$" + lem.get(0).getEmailAddress() + "#^$" + contactt.getCreatedDate() + "*@!";
                        }
                    } else {
                        for (int a = 0; a < cl.size(); a++) {
                            if (cl.get(a).getId().equalsIgnoreCase(contactId.trim())) {
                                responseString = responseString + contactt.getFirstName() + "#^$" + contactt.getLastName() + "#^$" + contactt.getStatus() + "#^$" + lem.get(0).getEmailAddress() + "#^$" + contactt.getCreatedDate() + "*@!";
                            }
                        }
                    }


                }


            } else {
                if (contactId.equalsIgnoreCase("All")) {

                    results = cs.getContacts(500, null, Contact.Status.ACTIVE);
                } else if (contactId.equalsIgnoreCase("REMOVED")) {
                    String date = com.mss.mirage.util.DateUtility.getInstance().getLastTenDaysDateFromCurrentDate();
                    Date lastMonthdate = com.mss.mirage.util.DateUtility.getInstance().getConstatcontactDate(date);
                    //  System.out.println("date"+lastMonthdate);
                    results = cs.getContacts(500, lastMonthdate.toString(), Contact.Status.REMOVED);
                } else {
                    results = cls.getContactsFromList(contactId, 500, null);
                }

                contacts.addAll(results.getResults());

                while (results.getMeta().getPagination() != null) {
                    results = _pagingService.getPage(results.getMeta().getPagination(), Contact.class);
                    if (results != null && results.getResults() != null) {

                        contacts.addAll(results.getResults());
                    } else {
                        break;
                    }
                    //   System.out.println("contacts"+contacts.size());
                }

                for (int i = 0; i < contacts.size(); i++) {
                    Contact contactt = contacts.get(i);
                    List<EmailAddress> lem = contactt.getEmailAddresses();

                    responseString = responseString + contactt.getFirstName() + "#^$" + contactt.getLastName() + "#^$" + contactt.getStatus() + "#^$" + lem.get(0).getEmailAddress() + "#^$" + contactt.getCreatedDate() + "*@!";

                }
            }
            // System.out.println("resutString" + responseString);
            if ("".equals(responseString)) {
                responseString = "NoData";
            }

        } catch (ConstantContactServiceException e) {

            e.printStackTrace();
            System.out.println(e.getMessage());
            // System.out.println("Issue with constant Contact");
            responseString = "Issue";
        } catch (Exception e) {

            e.printStackTrace();
            System.out.println(e.getMessage());
            // System.out.println("Issue with constant Contact");
            responseString = "Issue";
        } finally {
            try {
                if (_serviceFactory != null) {

                    _serviceFactory = null;
                }
                if (_pagingService != null) {

                    _pagingService = null;
                }
                if (cls != null) {

                    cls = null;
                }
                if (cs != null) {

                    cs = null;
                }
                if (results != null) {

                    results = null;
                }
            } catch (Exception e) {
            }
        }
        //   System.out.println("responseString==========" + responseString);
        return responseString;

    }
    /*
     * Written by:Sri harsha Chepena
     * This  doGetSyncListSearch for comparing hubble location with related constant contact list
     * 
     */

    public String doGetSyncListSearch(String locationName) throws ServiceLocatorException {


        String responseString = "";
        String Api_Key = Properties.getProperty("API_KEY");
        String Access_Tocken = Properties.getProperty("ACCESS_TOCKEN");
        ContactListService cls = null;
        Map locationMap = new HashMap();
        try {

            cls = new ContactListService(Api_Key, Access_Tocken);
            if ("All".equalsIgnoreCase(locationName)) {
                locationMap = DataSourceDataProvider.getInstance().getEmployeeLocationsLst();
            } else {
                locationMap.put(locationName, locationName);
            }
            Map locationCountMap = DataSourceDataProvider.getInstance().getEmployeeLocationsListCount();


            ArrayList conList = new ArrayList();
            conList = (ArrayList) cls.getLists(null);
            Map contactList = new HashMap();
            for (int i = 0; i < conList.size(); i++) {
                ContactList listContact = (ContactList) conList.get(i);
                contactList.put(listContact.getName(), listContact.getContactCount());
            }

            Iterator it = locationMap.entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry entry = (Map.Entry) it.next();
                // System.out.println("Key : " + entry.getKey());
                String res = "";
                res = res + entry.getKey().toString() + "#^$";
                if (locationCountMap.containsKey(entry.getKey())) {
                    res = res + locationCountMap.get(entry.getKey().toString()) + "#^$";
                } else {
                    res = res + "Not Assigned" + "#^$";
                }
                if (contactList.containsKey(entry.getKey())) {

                    res = res + contactList.get(entry.getKey().toString());
                } else {
                    res = res + "Not Created";
                }
                responseString = responseString + res + "*@!";
            }

            if ("".equals(responseString)) {
                responseString = "NoData";
            }

        } catch (ConstantContactServiceException e) {
//            ConstantContactServiceException c = (ConstantContactServiceException) e.getCause();
//            for (Iterator<RawApiRequestError> i = c.getErrorInfo().iterator(); i.hasNext();) {
//                RawApiRequestError item = i.next();
//                System.out.println(item.getErrorKey() + " : " + item.getErrorMessage());
//            }
//            e.printStackTrace();
            responseString = "issue";
            //System.out.println(e.getMessage());
        } finally {
            try {

                if (cls != null) {

                    cls = null;
                }
                if (locationMap != null) {

                    locationMap = null;
                }

            } catch (Exception e) {
            }
        }
        // System.out.println(responseString);
        return responseString;
    }
    /*
     * Written by:Sri harsha Chepena
     * 
     * this dotrackingEmailCampaign method for getting total tracking details of paricular selected campaign email.
     * 
     * 
     */

    public String dotrackingEmailCampaign(String campaignId) throws ServiceLocatorException {
        // int userRoleId = Integer.parseInt(httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_ROLE_ID).toString());
        //  System.out.println("campaignId  " + campaignId);
        String responseString = "";
        String Api_Key = Properties.getProperty("API_KEY");
        String Access_Tocken = Properties.getProperty("ACCESS_TOCKEN");
        EmailCampaignService ies = null;
        try {
            ies = new EmailCampaignService(Api_Key, Access_Tocken);
            EmailCampaignResponse resE = ies.getCampaign(campaignId.trim());
            TrackingSummary ts = resE.getTrackingSummary();
            String lastrunDate = "";
            if (resE.getLastRunDate() == null) {
                lastrunDate = "-";
            } else {
                lastrunDate = resE.getCreatedDate();
            }
            responseString = responseString + resE.getId() + "#^$" + lastrunDate + "#^$" + ts.getSends() + "#^$" + ts.getOpens() + "#^$" + ts.getBounces() + "#^$" + ts.getUnsubscribes() + "#^$" + ts.getForwards() + "*@!";


            if ("".equals(responseString)) {
                responseString = "NoData";
            }

        } catch (ConstantContactServiceException e) {

            e.printStackTrace();
            responseString = "issue";
            System.out.println(e.getMessage());
        } finally {
            try {

                if (ies != null) {

                    ies = null;
                }

            } catch (Exception e) {
            }
        }
        //System.out.println(responseString);
        return responseString;
    }

    public String getLostClosedOpportunities(int pastMonths, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        //String qsTitle = "";
        stringBuffer = new StringBuffer();
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        String practice = "";
        //Map myTeamMembersMap = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
        //String myTeamMembers = getKeys(myTeamMembersMap,",");
        String response = "";


        /* if(curWorkCountry==null || curWorkCountry=="")
        curWorkCountry ="%";*/
        try {
            String dueStartDate = "";
            String dueEndDate = DateUtility.getInstance().CurrentMonthLastDate();
            dueStartDate = DateUtility.getInstance().getPastMonthsFirstDate(pastMonths - 1);
            // dueStartDate="10/01/2011";
            StringBuffer querStringBuffer = new StringBuffer();
            querStringBuffer.append("SELECT tblCrmOpportunity.Id,tblCrmAccount.NAME,tblCrmOpportunity.Title,tblCrmOpportunity.VALUE,tblCrmAccount.Region,");
            querStringBuffer.append("DATE(tblCrmOpportunity.DueDate) AS DueDate,tblCrmOpportunity.Practice,tblCrmOpportunity.CreatedBy,tblCrmOpportunity.State FROM tblCrmOpportunity ");
            querStringBuffer.append("JOIN tblCrmAccount ON tblCrmAccount.Id = tblCrmOpportunity.AccountId ");
            querStringBuffer.append("where (Region='Central' OR Region='West' OR Region='East' OR Region='Enterprise') AND ");
            querStringBuffer.append("  (DATE(DueDate) >= '" + DateUtility.getInstance().convertStringToMySQLDate(dueStartDate) + "') ");
            querStringBuffer.append("AND (DATE(DueDate) <= '" + DateUtility.getInstance().convertStringToMySQLDate(dueEndDate) + "')  AND tblCrmOpportunity.State IN('Lost','Closed') ORDER BY Region,NAME,tblCrmOpportunity.DueDate DESC");
            // System.out.println("Query-->" + querStringBuffer.toString());
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(querStringBuffer.toString());
            resultSet = preparedStatement.executeQuery();

            double totalCost = 0.00;
            int i = 0;
            DecimalFormat decimalFormat = new DecimalFormat("0.00");
            while (resultSet.next()) {
                if (!"".equals(resultSet.getString("Practice")) && resultSet.getString("Practice") != null) {
                    practice = resultSet.getString("Practice");

                } else {
                    practice = "-";
                }
                i += 1;
                response = response + resultSet.getString("Id") + "#^$" + i + "#^$" + resultSet.getString("NAME") + "#^$" + resultSet.getString("Title") + "#^$$ " + decimalFormat.format(resultSet.getDouble("VALUE")) + "#^$" + resultSet.getString("Region") + "#^$" + resultSet.getString("DueDate") + "#^$" + practice + "#^$" + resultSet.getString("State") + "*@!";
                totalCost += resultSet.getDouble("VALUE");
            }
            String tCost = decimalFormat.format(totalCost);

            if (i == 0) {
                response = "no data";
            } else {
                response += "addto" + tCost;
            }
            //    System.out.println("stringBuffer.toString()-----"+response);
            /*consultantList = callableStatement.getString(5);
            stringBuffer.append(callableStatement.getString(5));
            stringBuffer.append("addto");
            stringBuffer.append(callableStatement.getString(6));*/

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }



        return response;
    }

    public String getEmployeeTypeDetails(String country, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        //String qsTitle = "";
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String query = "";

        String response = "";
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            query = "SELECT COUNT(Id),SUM(CASE WHEN EmployeeTypeId='Full Time' THEN 1 ELSE 0 END) AS FullTime,SUM(CASE WHEN EmployeeTypeId='Contractor' THEN 1 ELSE 0 END) AS Contractor,SUM(CASE WHEN EmployeeTypeId='Intern' THEN 1 ELSE 0 END) AS Intern,SUM(CASE WHEN EmployeeTypeId='1099 Independent' THEN 1 ELSE 0 END) AS 1099Independent,SUM(CASE WHEN EmployeeTypeId='Trainee' THEN 1 ELSE 0 END) AS Trainee,SUM(CASE WHEN EmployeeTypeId='Part Time Hourly' THEN 1 ELSE 0 END) AS PartTimeHourly,SUM(CASE WHEN EmployeeTypeId='Onsite' THEN 1 ELSE 0 END) AS Onsite FROM tblEmployee WHERE Country='" + country + "' AND CurStatus='Active'";
            // System.out.println("query.."+query);
            statement = connection.createStatement();
            resultSet = statement.executeQuery(query);
            while (resultSet.next()) {
                if (resultSet.getInt("FullTime") > 0) {
                    response = response + "Full Time" + "#^$" + resultSet.getInt("FullTime") + "*@!";
                }
                if (resultSet.getInt("Contractor") > 0) {
                    response = response + "Contractor" + "#^$" + resultSet.getInt("Contractor") + "*@!";
                }
                if (resultSet.getInt("Intern") > 0) {
                    response = response + "Intern" + "#^$" + resultSet.getInt("Intern") + "*@!";
                }
                if (resultSet.getInt("1099Independent") > 0) {
                    response = response + "1099 Independent" + "#^$" + resultSet.getInt("1099Independent") + "*@!";
                }
                if (resultSet.getInt("Trainee") > 0) {
                    response = response + "Trainee" + "#^$" + resultSet.getInt("Trainee") + "*@!";
                }
                if (resultSet.getInt("PartTimeHourly") > 0) {
                    response = response + "Part Time Hourly" + "#^$" + resultSet.getInt("PartTimeHourly") + "*@!";
                }
                if (resultSet.getInt("Onsite") > 0) {
                    response = response + "Onsite" + "#^$" + resultSet.getInt("Onsite") + "*@!";
                }
                // response=response +"Full Time"+ "#^$"+resultSet.getInt("FullTime")+"*@!"+"Contractor"+ "#^$"+ resultSet.getInt("Contractor")+"*@!"  +"Intern" +"#^$" +resultSet.getInt("Intern")+"*@!" +"1099 Independent"+ "#^$" + resultSet.getInt("1099Independent")+"*@!" +"Trainee"+ "#^$" + resultSet.getInt("Trainee")+"*@!" +"Part Time Hourly"+ "#^$" + resultSet.getInt("PartTimeHourly")+"*@!" +"Onsite"+ "#^$" + resultSet.getInt("Onsite")+"*@!";
                // System.out.println("response.."+response);
            }
            // System.out.println("query..."+query);
            // System.out.println("response.."+response);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }



        return response;
    }

   public String getResourceTypeDetails(String projectId, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        //String qsTitle = "";
        stringBuffer = new StringBuffer();
        Statement statement = null;
        ResultSet resultSet = null;
        String query = "";

        String response = "";
        try {
            connection = ConnectionProvider.getInstance().getConnection();
            query = "SELECT COUNT(tblProjectContacts.Id) AS Total,SUM(CASE WHEN EmpProjStatus='Main' THEN 1 ELSE 0 END) AS Main ,"
                    + "SUM(CASE WHEN EmpProjStatus='Shadow' THEN 1 ELSE 0 END) AS Shadow ,"
                    + "SUM(CASE WHEN EmpProjStatus='Training' THEN 1 ELSE 0 END) AS Training ,"
                    + "SUM(CASE WHEN EmpProjStatus='Overhead' THEN 1 ELSE 0 END) AS Overhead "
                    + "FROM tblProjectContacts LEFT JOIN tblEmployee ON (tblProjectContacts.ObjectId=tblEmployee.Id) "
                    + "WHERE  ProjectId="+projectId+" AND STATUS='Active' AND CurStatus='Active'";
            // System.out.println("query.."+query);
            statement = connection.createStatement();
            resultSet = statement.executeQuery(query);
            while (resultSet.next()) {
                if (resultSet.getInt("Main") > 0) {
                    response = response + "Main" + "#^$" + resultSet.getInt("Main") + "*@!";
                }
                if (resultSet.getInt("Shadow") > 0) {
                    response = response + "Shadow" + "#^$" + resultSet.getInt("Shadow") + "*@!";
                }
                if (resultSet.getInt("Training") > 0) {
                    response = response + "Training" + "#^$" + resultSet.getInt("Training") + "*@!";
                }
                if (resultSet.getInt("Overhead") > 0) {
                    response = response + "Overhead" + "#^$" + resultSet.getInt("Overhead") + "*@!";
                }
                }
            //System.out.println("query..."+query);
            // System.out.println("response.."+response);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
                sqle.printStackTrace();
            }
        }



        return response;
    }

    public String doGetTitleType(String loginId) throws ServiceLocatorException {
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;

        String responseString = "";
        try {


            String queryString1 = "SELECT TitleTypeId FROM tblEmployee WHERE LoginId='" + loginId + "'";
            //   System.out.println(queryString1);
            connection = ConnectionProvider.getInstance().getConnection();

            //    System.out.println("insideSalesId----"+insideSalesId);
            statement = connection.createStatement();

            resultSet = statement.executeQuery(queryString1);
            while (resultSet.next()) {
                responseString = resultSet.getString("TitleTypeId");
            }
            // System.out.println("responseString........."+responseString);

        } catch (SQLException sql) {
            sql.printStackTrace();
            throw new ServiceLocatorException(sql);
        } finally {
            try {
                // resultSet Object Checking if it's null then close and set null
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }

                if (statement != null) {
                    statement.close();
                    statement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                throw new ServiceLocatorException(ex);
            }
        }
        return responseString; // returning the object.
    }

    public String projectDetailsDashboard(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        String totalStream = "";
        Statement statement = null;
        String query = "";
        String pmoList = "";

        String responseString = "";
        int updatedRows = 0;
        CallableStatement callableStatement = null;

        ajaxHandlerAction.setLoginId((String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID));

        try {
            //    query = "SELECT tblProjects.ProjectName,tblPmoAuthors.AccountId,tblProjects.ProjectStartDate,tblProjects.STATUS, tblCrmAccount.NAME,tblPmoAuthors.ProjectId FROM tblPmoAuthors JOIN tblProjects ON (tblProjects.Id=tblPmoAuthors.ProjectId) JOIN tblCrmAccount ON (tblCrmAccount.Id = tblPmoAuthors.AccountId) WHERE tblPmoAuthors.AuthorId = '" + ajaxHandlerAction.getLoginId() + "'  AND tblPmoAuthors.STATUS =  'Active' ";


            Map rolesMap = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_ROLES);
        if (rolesMap.containsValue("Admin") || httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_PMO_ACTIVITY_ACCESS).toString().equals("1") ) {

               if (ajaxHandlerAction.getPmoLoginId() != null && !"".equalsIgnoreCase(ajaxHandlerAction.getPmoLoginId())) {
                    pmoList = ajaxHandlerAction.getPmoLoginId();
                    //  System.out.println("pmoLoginId "+ajaxHandlerAction.getPmoLoginId());
                }
           }else {
                if (httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_IS_TEAM_LEAD).toString().equals("1") || httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_IS_USER_MANAGER).toString().equals("1")) {
                    Map teamMap = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
                    teamMap.put(ajaxHandlerAction.getLoginId(), httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_NAME).toString());

                    if (!"".equalsIgnoreCase(ajaxHandlerAction.getPmoLoginId())) {
                        pmoList = ajaxHandlerAction.getPmoLoginId();
                    } else {
                        pmoList = DataSourceDataProvider.getInstance().getTeamLoginIdList(teamMap);
                        // System.out.println("pmoList-->"+pmoList);
                    }


                } else {
                    pmoList = ajaxHandlerAction.getLoginId();
                }
           }
            
            
           
            if (!"".equalsIgnoreCase(ajaxHandlerAction.getProjectStartDate())) {
                ajaxHandlerAction.setProjectStartDate(DateUtility.getInstance().convertStringToMySQLDate(ajaxHandlerAction.getProjectStartDate()));
            } else {
                ajaxHandlerAction.setProjectStartDate("-1");
            }
            if (pmoList == null || "".equalsIgnoreCase(pmoList)) {
                pmoList = "-1";
            }
            if (ajaxHandlerAction.getCustomerName() == null || "".equalsIgnoreCase(ajaxHandlerAction.getCustomerName())) {
                ajaxHandlerAction.setCustomerName("-1");
            }else{
                ajaxHandlerAction.setCustomerName(DataSourceDataProvider.getInstance().getCustometNameById(Integer.parseInt(ajaxHandlerAction.getCustomerName())));
            }
            if (ajaxHandlerAction.getProjectName() == null || "".equalsIgnoreCase(ajaxHandlerAction.getProjectName())) {
                ajaxHandlerAction.setProjectName("-1");
            }else{
                ajaxHandlerAction.setProjectName(DataSourceDataProvider.getInstance().getProjectName(Integer.parseInt(ajaxHandlerAction.getProjectName())));
            }
            if (ajaxHandlerAction.getStatus() == null || "".equalsIgnoreCase(ajaxHandlerAction.getStatus())) {
                ajaxHandlerAction.setStatus("-1");
            }

            if (ajaxHandlerAction.getPracticeId() == null || "".equalsIgnoreCase(ajaxHandlerAction.getPracticeId())) {
                ajaxHandlerAction.setPracticeId("-1");
            }
            if (ajaxHandlerAction.getEmpStatus() == null || "".equalsIgnoreCase(ajaxHandlerAction.getEmpStatus())) {
                ajaxHandlerAction.setEmpStatus("-1");
            }

//      System.out.println("pmoList "+pmoList);
//      System.out.println("ajaxHandlerAction.getCustomerName() "+ajaxHandlerAction.getCustomerName());
//      System.out.println("ajaxHandlerAction.getProjectName() "+ajaxHandlerAction.getProjectName());
//      System.out.println("ajaxHandlerAction.getStatus() "+ajaxHandlerAction.getStatus());
//      System.out.println("ajaxHandlerAction.getProjectStartDate() "+ajaxHandlerAction.getProjectStartDate());
//      System.out.println("ajaxHandlerAction.getPreAssignEmpId() "+ajaxHandlerAction.getPreAssignEmpId());
            //   System.out.println("ajaxHandlerAction.getPracticeId() "+ajaxHandlerAction.getPracticeId());
            //    System.out.println("ajaxHandlerAction.getEmpStatus() "+ajaxHandlerAction.getEmpStatus());

            //  System.out.println("pmoList11 -->"+pmoList);
            connection = ConnectionProvider.getInstance().getConnection();

            callableStatement = connection.prepareCall("{call spPMOProjectDeatils(?,?,?,?,?,?,?,?,?)}");

            callableStatement.setString(1, pmoList.replaceAll("'", ""));
            callableStatement.setString(2, ajaxHandlerAction.getCustomerName());
            callableStatement.setString(3, ajaxHandlerAction.getProjectName());
            callableStatement.setString(4, ajaxHandlerAction.getStatus());
            callableStatement.setString(5, ajaxHandlerAction.getProjectStartDate());
            callableStatement.setInt(6, ajaxHandlerAction.getPreAssignEmpId());
            callableStatement.setString(7, ajaxHandlerAction.getPracticeId());
            callableStatement.setString(8, ajaxHandlerAction.getEmpStatus());
            callableStatement.registerOutParameter(9, Types.VARCHAR);
            callableStatement.executeQuery();
            responseString = callableStatement.getString(9);
            // System.out.println("responseString "+responseString);      
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {

                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    
	  public String getProjectEmployeeDetails(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {
        Connection connection = null;
        Statement statement = null;
        ResultSet resultSet = null;
        String queryString = "";
        String responseString = "";
        try {
            String flag = ajaxHandlerAction.getFlag();
            String status = ajaxHandlerAction.getEmpStatus();
            if ("-1".equals(status)) {
                status = "%";
            }
            if ("1".equals(flag)) {
                queryString = " SELECT ResourceName,Email,MobilePhone,Utilization  FROM tblProjectContacts WHERE STATUS LIKE '" + status + "' AND ProjectId = " + ajaxHandlerAction.getProjectId();
            }
            if ("2".equals(flag)) {
                queryString = " SELECT ResourceName,Email,MobilePhone,Utilization  FROM tblProjectContacts LEFT JOIN tblEmployee ON (tblEmployee.Id=tblProjectContacts.ObjectId) WHERE tblProjectContacts.STATUS LIKE '" + status + "' AND tblProjectContacts.ProjectId = " + ajaxHandlerAction.getProjectId() + " AND tblProjectContacts.Billable='1' AND tblProjectContacts.EmpProjStatus='Main' and tblEmployee.Country LIKE 'India'";

            }
            
             if ("3".equals(flag)) {
                queryString = " SELECT ResourceName,Email,MobilePhone,Utilization  FROM tblProjectContacts LEFT JOIN tblEmployee ON (tblEmployee.Id=tblProjectContacts.ObjectId) WHERE tblProjectContacts.STATUS LIKE '" + status + "' AND tblProjectContacts.ProjectId = " + ajaxHandlerAction.getProjectId() + " AND tblProjectContacts.Billable='0' AND tblProjectContacts.EmpProjStatus='Main' and tblEmployee.Country LIKE 'India'";

            }
            if ("4".equals(flag)) {
                queryString = " SELECT ResourceName,Email,MobilePhone,Utilization  FROM tblProjectContacts LEFT JOIN tblEmployee ON (tblEmployee.Id=tblProjectContacts.ObjectId) WHERE tblProjectContacts.STATUS LIKE '" + status + "' AND tblProjectContacts.ProjectId = " + ajaxHandlerAction.getProjectId() + " AND  tblProjectContacts.EmpProjStatus='Shadow' and tblEmployee.Country LIKE 'India'";
            }
             if ("5".equals(flag)) {
                queryString = " SELECT ResourceName,Email,MobilePhone,Utilization  FROM tblProjectContacts LEFT JOIN tblEmployee ON (tblEmployee.Id=tblProjectContacts.ObjectId) WHERE tblProjectContacts.STATUS LIKE '" + status + "' AND tblProjectContacts.ProjectId = " + ajaxHandlerAction.getProjectId() + " AND  tblProjectContacts.EmpProjStatus='Training' and tblEmployee.Country LIKE 'India'";
            }
              if ("6".equals(flag)) {
                queryString = " SELECT ResourceName,Email,MobilePhone,Utilization  FROM tblProjectContacts LEFT JOIN tblEmployee ON (tblEmployee.Id=tblProjectContacts.ObjectId) WHERE tblProjectContacts.STATUS LIKE '" + status + "' AND tblProjectContacts.ProjectId = " + ajaxHandlerAction.getProjectId() + " AND  tblProjectContacts.EmpProjStatus='Overhead' and tblEmployee.Country LIKE 'India'";
            }
            if ("7".equals(flag)) {
                queryString = " SELECT ResourceName,Email,MobilePhone,Utilization  FROM tblProjectContacts LEFT JOIN tblEmployee ON (tblEmployee.Id=tblProjectContacts.ObjectId) WHERE tblProjectContacts.STATUS LIKE '" + status + "' AND tblProjectContacts.ProjectId = " + ajaxHandlerAction.getProjectId() + " AND tblEmployee.Country LIKE 'USA' AND tblProjectContacts.Billable='1' AND tblProjectContacts.EmpProjStatus='Main'";
            }
             if ("8".equals(flag)) {
                queryString = " SELECT ResourceName,Email,MobilePhone,Utilization  FROM tblProjectContacts LEFT JOIN tblEmployee ON (tblEmployee.Id=tblProjectContacts.ObjectId) WHERE tblProjectContacts.STATUS LIKE '" + status + "' AND tblProjectContacts.ProjectId = " + ajaxHandlerAction.getProjectId() + " AND tblEmployee.Country LIKE 'USA' AND tblProjectContacts.Billable='0' AND tblProjectContacts.EmpProjStatus='Main'";
            }
            if ("9".equals(flag)) {
                queryString = " SELECT ResourceName,Email,MobilePhone,Utilization  FROM tblProjectContacts LEFT JOIN tblEmployee ON (tblEmployee.Id=tblProjectContacts.ObjectId) WHERE tblProjectContacts.STATUS LIKE '" + status + "' AND tblProjectContacts.ProjectId = " + ajaxHandlerAction.getProjectId() + " AND tblEmployee.Country LIKE 'USA' AND  tblProjectContacts.EmpProjStatus='Shadow'";
            }
            if ("10".equals(flag)) {
                queryString = " SELECT ResourceName,Email,MobilePhone,Utilization  FROM tblProjectContacts LEFT JOIN tblEmployee ON (tblEmployee.Id=tblProjectContacts.ObjectId) WHERE tblProjectContacts.STATUS LIKE '" + status + "' AND tblProjectContacts.ProjectId = " + ajaxHandlerAction.getProjectId() + " AND tblEmployee.Country LIKE 'USA' AND  tblProjectContacts.EmpProjStatus='Training'";
            }
             if ("11".equals(flag)) {
                queryString = " SELECT ResourceName,Email,MobilePhone,Utilization  FROM tblProjectContacts LEFT JOIN tblEmployee ON (tblEmployee.Id=tblProjectContacts.ObjectId) WHERE tblProjectContacts.STATUS LIKE '" + status + "' AND tblProjectContacts.ProjectId = " + ajaxHandlerAction.getProjectId() + " AND tblEmployee.Country LIKE 'USA' AND  tblProjectContacts.EmpProjStatus='Overhead'";
            }


            connection = ConnectionProvider.getInstance().getConnection();

            //    System.out.println("insideSalesId----"+insideSalesId);
            statement = connection.createStatement();
            //  System.out.println("queryString " + queryString);
            resultSet = statement.executeQuery(queryString);
            while (resultSet.next()) {
                responseString = responseString + resultSet.getString("ResourceName") + "#^$";
                if (!"".equals(resultSet.getString("Email")) && resultSet.getString("Email") != null) {
                    responseString = responseString + resultSet.getString("Email") + "#^$";
                } else {
                    responseString = responseString + "-" + "#^$";
                }
                if (!"".equals(resultSet.getString("MobilePhone")) && resultSet.getString("MobilePhone") != null) {
                    responseString = responseString + resultSet.getString("MobilePhone") + "#^$";
                } else {
                    responseString = responseString + "-" + "#^$";
                }
                responseString = responseString + resultSet.getInt("Utilization") + "*@!";
            }

        } catch (SQLException sql) {
            sql.printStackTrace();
            throw new ServiceLocatorException(sql);
        } finally {
            try {
                // resultSet Object Checking if it's null then close and set null
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }

                if (statement != null) {
                    statement.close();
                    statement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                throw new ServiceLocatorException(ex);
            }
        }
        return responseString; // returning the object.
    }
	
	
	

   /* public String getMonthlyStatusReport(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        Connection connection = null;
        ResultSet resultSet = null;
        String responseString = "";
        int updatedRows = 0;
        CallableStatement callableStatement = null;
        String myTeamMembers = "";
        Map teamMembers = new TreeMap();
        DataSourceDataProvider dataSourceDataProvider = null;

        try {

            String teamMemberId = ajaxHandlerAction.getTeamMemberId();
            int includeTeamFlag = ajaxHandlerAction.getIncludeTeamFlag();

            //    System.out.println("includeTeamFlag "+includeTeamFlag);
            if (includeTeamFlag == 1) {
                String Derpartment = DataSourceDataProvider.getInstance().getDepartmentName(teamMemberId);
                teamMembers = DataSourceDataProvider.getInstance().getMyTeamMembers(teamMemberId, Derpartment);

                String TeamLoginIdList = DataSourceDataProvider.getInstance().getTeamLoginIdList(teamMembers);
                myTeamMembers = TeamLoginIdList.replaceAll("'", "");
                if (teamMembers.size() > 0) {
                    myTeamMembers = myTeamMembers;
                } else {
                    myTeamMembers = "'" + teamMemberId + "'";
                }
                myTeamMembers = myTeamMembers.replaceAll("'", "");
            } else {
                if (teamMemberId.equals("-1")) {

                    teamMemberId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
                    teamMembers = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
                    myTeamMembers = getKeys(teamMembers, ",");
                    if (teamMembers.size() > 0) {
                        myTeamMembers = myTeamMembers;
                    } else {
                        myTeamMembers = "'" + teamMemberId + "'";
                    }
                    myTeamMembers = myTeamMembers.replaceAll("'", "");
                } else {
                    myTeamMembers = myTeamMembers + teamMemberId;
                }
            }

            // System.out.println("myTeamMembers "+myTeamMembers);
            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spMonthlyStatusReport(?,?,?)}");

            callableStatement.setString(1, myTeamMembers);
            callableStatement.setString(2, ajaxHandlerAction.getYear());
            callableStatement.registerOutParameter(3, Types.VARCHAR);
            updatedRows = callableStatement.executeUpdate();
            responseString = callableStatement.getString(3);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        //System.out.println("responseString-->"+responseString);
        return responseString;
    }*/
public String getMonthlyStatusReport(AjaxHandlerAction ajaxHandlerAction, HttpServletRequest httpServletRequest) throws ServiceLocatorException {

        Connection connection = null;
        ResultSet resultSet = null;
        String responseString = "";
        int updatedRows = 0;
        CallableStatement callableStatement = null;
        String myTeamMembers = "";
        Map teamMembers = new TreeMap();
        DataSourceDataProvider dataSourceDataProvider = null;

        try {

            String teamMemberId = ajaxHandlerAction.getTeamMemberId();
            int includeTeamFlag = ajaxHandlerAction.getIncludeTeamFlag();

                //System.out.println("includeTeamFlag "+includeTeamFlag);
            if (includeTeamFlag == 1) {
                String Derpartment = DataSourceDataProvider.getInstance().getDepartmentName(teamMemberId);
                teamMembers = DataSourceDataProvider.getInstance().getMyTeamMembers(teamMemberId, Derpartment);

                String TeamLoginIdList = DataSourceDataProvider.getInstance().getTeamLoginIdList(teamMembers);
                myTeamMembers = TeamLoginIdList.replaceAll("'", "");
                if (teamMembers.size() > 0) {
                    myTeamMembers = myTeamMembers;
                } else {
                    myTeamMembers = "'" + teamMemberId + "'";
                }
                myTeamMembers = myTeamMembers.replaceAll("'", "");
               // System.out.println("myTeamMembers is---->"+myTeamMembers);
            } else {
                if (teamMemberId.equals("-1")) {

                    teamMemberId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_ID).toString();
                   
                    String titleType = (String) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_TITLE);
                    if(titleType.equals("BDM")){
                            String empId = httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_EMP_ID).toString();   
                         teamMembers = DataSourceDataProvider.getInstance().getBdmAssociateList(empId);
                          
                    }
                    else{
                         teamMembers = (Map) httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_MY_TEAM_MAP);
                    }
                  //  System.out.println("teamMembers----->"+teamMembers);
                   teamMembers.put(teamMemberId, httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_NAME).toString());
                    myTeamMembers = getKeys(teamMembers, ",");
                   // System.out.println("myTeamMembers before if stmt---->"+myTeamMembers);
                     //myTeammembers.put(loginId, httpServletRequest.getSession(false).getAttribute(ApplicationConstants.SESSION_USER_NAME).toString());
                    //System.out.println("teamMembers.size()---->"+teamMembers.size());
                    if (teamMembers.size() > 0) {
                        myTeamMembers = myTeamMembers;
                    } else {
                        myTeamMembers = "'" + teamMemberId + "'";
                    }
                  //  System.out.println("myTeamMembers before is---->"+myTeamMembers);
                    myTeamMembers = myTeamMembers.replaceAll("'", "");
                    //System.out.println("myTeamMembers after is---->"+myTeamMembers); 
                } else {
                    myTeamMembers = myTeamMembers + teamMemberId;
                }
            }

             //System.out.println("myTeamMembers "+myTeamMembers);
            connection = ConnectionProvider.getInstance().getConnection();
            callableStatement = connection.prepareCall("{call spMonthlyStatusReport(?,?,?)}");

            callableStatement.setString(1, myTeamMembers);
            callableStatement.setString(2, ajaxHandlerAction.getYear());
            callableStatement.registerOutParameter(3, Types.VARCHAR);
            updatedRows = callableStatement.executeUpdate();
            responseString = callableStatement.getString(3);
        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (callableStatement != null) {
                    callableStatement.close();
                    callableStatement = null;
                }

                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        //System.out.println("responseString-->"+responseString);
        return responseString;
    }

    public String getProjectsForManagerByAccountId(int accountId, String empId) throws ServiceLocatorException {
        StringBuffer projects = new StringBuffer();
        String projectName = null;
        int projectId = 0;


        //queryString = "SELECT distinct tblProjectContacts.ProjectId AS projectId,ProjectName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE AccountId="+accountId;
        //queryString = "SELECT distinct tblProjectContacts.ProjectId AS projectId,ProjectName FROM tblProjectContacts LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id) WHERE AccountId=" + accountId + " and ObjectId=" + empId + " and tblProjects.Status='Active'";
        queryString = "SELECT DISTINCT tblProjectContacts.ProjectId AS projectId,ProjectName FROM tblProjectContacts "
                + "LEFT OUTER JOIN tblProjects ON(tblProjectContacts.ProjectId=tblProjects.Id)"
                + " WHERE AccountId=" + accountId + " AND ObjectId IN( SELECT Id FROM tblEmployee WHERE LoginId IN(" + empId + ") ) AND tblProjects.STATUS='Active' "
                + "AND tblProjectContacts.STATUS='Active'";
        // System.out.println("queryString---->"+queryString);

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement(queryString);
            resultSet = preparedStatement.executeQuery();
            projects.append("<xml version=\"1.0\">");
            projects.append("<PROJECTS>");
            projects.append("<USER projectId=\"-1\">--Please Select--</USER>");
            while (resultSet.next()) {
                projectId = resultSet.getInt("projectId");
                projectName = resultSet.getString("ProjectName");

                // projects.append(projectName);

                projects.append("<USER projectId=\"" + projectId + "\">");
                if (projectName.contains("&")) {
                    projectName = projectName.replace("&", "&amp;");
                }
                projects.append(projectName);
                projects.append("</USER>");

            }
            projects.append("</PROJECTS>");
            projects.append("</xml>");
        } catch (SQLException ex) {
            ex.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        //     System.out.println("Team List: "+projects.toString());
        return projects.toString();
    }

    public String getCerCommnets(int id) throws ServiceLocatorException {
        StringBuffer reportsToBuffer = new StringBuffer();
        int reqId = 0;
        String reqStage = "";
        String reqComments = "";
//        queryString = "SELECT LoginId,FName,MName,LName FROM tblEmployee WHERE DepartmentId='"+deptName+"' AND (IsManager=1 OR IsTeamLead=1) AND CurStatus='Active' ORDER BY FName";


        try {
            connection = ConnectionProvider.getInstance().getConnection();
            preparedStatement = connection.prepareStatement("SELECT Id,Comments,Stage FROM tblPSCER WHERE RequestId=" + id + " ORDER BY Id");
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                reqId = resultSet.getInt("Id");

                if (reqId == id) {

                    reqStage = resultSet.getString("Stage");

                    if (resultSet.getString("Comments") != null && !"".equals(resultSet.getString("Comments"))) {
                        reqComments = resultSet.getString("Comments");
                    } else {
                        reportsToBuffer.append("No data");
                    }

                } else {

                    reportsToBuffer.append(resultSet.getString("Stage"));
                    reportsToBuffer.append("#^$");
                    if (resultSet.getString("Comments") != null && !"".equals(resultSet.getString("Comments"))) {
                        reportsToBuffer.append(resultSet.getString("Comments"));

                    } else {
                        reportsToBuffer.append("No data");
                    }
                    reportsToBuffer.append("*@!");

                }
            }
            reportsToBuffer.append(reqStage);
            reportsToBuffer.append("#^$");
            reportsToBuffer.append(reqComments);
            reportsToBuffer.append("*@!");



        } catch (SQLException sle) {
            sle.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        //System.out.println("Team List: "+reportsToBuffer.toString());
        return reportsToBuffer.toString();
    }

    public String getStageRelatedComments(int requestId, String stage) throws ServiceLocatorException {
        StringBuffer reportsToBuffer = new StringBuffer();

//        queryString = "SELECT LoginId,FName,MName,LName FROM tblEmployee WHERE DepartmentId='"+deptName+"' AND (IsManager=1 OR IsTeamLead=1) AND CurStatus='Active' ORDER BY FName";
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;

        try {
            connection = ConnectionProvider.getInstance().getConnection();
            //  System.out.println("requestId.."+requestId+"  stage "+stage);

            String query = "SELECT Comments FROM tblPSCER WHERE RequestId=" + requestId + " and Stage='" + stage + "'";
            if ("Approved".equals(stage)) {
                query = "SELECT Comments FROM tblPSCER WHERE RequestId=" + requestId + " and Stage IN('Approved','Rejected')";
            }
            //  System.out.println("query.."+query);
            preparedStatement = connection.prepareStatement(query);
            resultSet = preparedStatement.executeQuery();
            if (resultSet.next()) {
                if (resultSet.getString("Comments") != null && !"".equals(resultSet.getString("Comments"))) {
                    reportsToBuffer.append(resultSet.getString("Comments"));
                } else {
                    reportsToBuffer.append("No data");
                }
            }
            if (reportsToBuffer.length() <= 0) {
                reportsToBuffer.append("No data");
            }


        } catch (SQLException sle) {
            sle.printStackTrace();
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        //  System.out.println("Team: "+reportsToBuffer.toString());
        return reportsToBuffer.toString();
    }

    public String getOpportunityNamesList(String accId) throws ServiceLocatorException {
        StringBuffer reportsToBuffer = new StringBuffer();
        String projectId = null;
        boolean isGetting = false;
        String topManagementPeople[] = null;
        boolean isTopManager = false;
//        queryString = "SELECT LoginId,FName,MName,LName FROM tblEmployee WHERE DepartmentId='"+deptName+"' AND (IsManager=1 OR IsTeamLead=1) AND CurStatus='Active' ORDER BY FName";


        try {

            Map contactsMap = DataSourceDataProvider.getInstance().getOppurtunitiesNames(Integer.parseInt(accId));

            int count = 0;

            Iterator entries = contactsMap.entrySet().iterator();





            reportsToBuffer.append("<xml version=\"1.0\">");
            reportsToBuffer.append("<OPPORTUNITIES>");
            reportsToBuffer.append("<OPPORTUNITY oppId=\"" + -1 + "\">");

            reportsToBuffer.append("--Please Select--");
            reportsToBuffer.append("</OPPORTUNITY>");
            while (entries.hasNext()) {
                Map.Entry entry = (Map.Entry) entries.next();
                String contactName = (String) entry.getValue();
                int contactId = (Integer) entry.getKey();


                // projects.append(projectName);

                reportsToBuffer.append("<OPPORTUNITY oppId=\"" + contactId + "\">");
                if (contactName.contains("&")) {
                    contactName = contactName.replace("&", "&amp;");
                }
                reportsToBuffer.append(contactName);
                reportsToBuffer.append("</OPPORTUNITY>");

            }
            reportsToBuffer.append("</OPPORTUNITIES>");
            reportsToBuffer.append("</xml>");



            //  System.out.println("XML-->"+reportsToBuffer);
        } catch (ServiceLocatorException sle) {
            sle.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (preparedStatement != null) {
                    preparedStatement.close();
                    preparedStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        //System.out.println("Team List: "+reportsToBuffer.toString());
        return reportsToBuffer.toString();
    }

    public String getTerminationDetailsForInActivePerson(String empId, String loginId) throws ServiceLocatorException {
        String totalStream = "";
        Statement statement = null;
        String query = "";
        String HireDate = "";
        String TerminationDate = "";
        String ReasonForTermination = "";

        //query = "SELECT TitleTypeId,HireDate,TerminationDate,Termination,CONCAT(FName,' ',MName,'.',LName) AS FullName,COUNT(ReportsTo) AS count1,CurStatus  FROM tblEmployee WHERE ReportsTo IN('" + loginId + "') OR Id=" + empId;
        query = "SELECT TitleTypeId,HireDate,TerminationDate,Termination,CONCAT(FName,' ',MName,'.',LName) AS FullName,CurStatus  FROM tblEmployee WHERE Id=" + empId;
        // System.out.println("query...."+query);
        try {

            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.createStatement();
            resultSet = statement.executeQuery(query);


            while (resultSet.next()) {


                String NAME = resultSet.getString("FullName");
                String designation = resultSet.getString("TitleTypeId");
                if (resultSet.getString("HireDate") != null && !"".equalsIgnoreCase(resultSet.getString("HireDate"))) {
                    HireDate = com.mss.mirage.util.DateUtility.getInstance().convertToviewFormat(resultSet.getString("HireDate"));
                }
                if (resultSet.getString("TerminationDate") != null && !"".equalsIgnoreCase(resultSet.getString("TerminationDate"))) {
                    TerminationDate = com.mss.mirage.util.DateUtility.getInstance().convertToviewFormat(resultSet.getString("TerminationDate"));
                }

                String status = resultSet.getString("CurStatus");
                if (resultSet.getString("Termination") != null && !"".equalsIgnoreCase(resultSet.getString("Termination"))) {
                    ReasonForTermination = resultSet.getString("Termination");
                }

                totalStream = totalStream + "#^$" + NAME + "#^$" + designation + "#^$" + HireDate + "#^$" + TerminationDate + "#^$" + status + "#^$" + ReasonForTermination;

            }

        } catch (Exception sqe) {
            sqe.printStackTrace();
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return totalStream;
    }
    /*
     * Emeet Methods
     * Date : 01/17/2017
     * Author : Phani Kanuri
     */

    public String doAddAttendeesforExecitiveMeet(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement statement = null;
        String responseString = "";
        int count = 0;
        try {
            queryString = "INSERT INTO tblEAttendees (LoginId,AccessType,CurrStatus,CreatedBy) VALUES(?,?,?,?)";

            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.prepareStatement(queryString);
            statement.setString(1, ajaxHandlerAction.getExecutiveMeetingAttendeeEmail());
            statement.setString(2, ajaxHandlerAction.getExecutiveMeetAccessType());
            statement.setString(3, ajaxHandlerAction.getExecutiveMeetingAccessStatus());
            statement.setString(4, ajaxHandlerAction.getCreatedBy());
            count = statement.executeUpdate();

            if (count > 0) {
                String emailId = DataSourceDataProvider.getInstance().getEmailIdForLoginId(ajaxHandlerAction.getExecutiveMeetingAttendeeEmail());
                String Name = DataSourceDataProvider.getInstance().getemployeenamebyloginId(ajaxHandlerAction.getExecutiveMeetingAttendeeEmail());
                responseString = "<font size='2' color='green'>Executive Meet Attendee added Successfully..!</font>";
                JSONObject upcomingEmeetJson = ServiceLocator.getAjaxHandlerWebService().getUpcomingExecutivemeets(ajaxHandlerAction.getExecutiveMeetAccessType());
                for (int i = 0; i < upcomingEmeetJson.length(); i++) {
                    JSONObject subJson = upcomingEmeetJson.getJSONObject(String.valueOf(i));
                    doSendEmailInvitationForExeMeet(subJson, emailId, Name);
                }


            } else {
                responseString = "<font size='2' color='red'>Adding failed..!</font>";
            }

        } catch (Exception sqe) {
            sqe.printStackTrace();
            responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {

                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }

    public JSONObject doEditExecutiveMeetingAttendees(int Id) throws ServiceLocatorException {

        Connection connection = null;
        PreparedStatement prepareStatement = null;
        ResultSet resultSet = null;
        JSONObject subJson = null;
        String queryString = "";

        int count = 0;
        try {

            queryString = "SELECT tblEAttendees.LoginId,tblEAttendees.Id AS Id,Email1,AccessType,tblEAttendees.CurrStatus,tblEAttendees.CreatedBy,tblEAttendees.CreatedDate FROM tblEAttendees "
                    + "LEFT JOIN tblEmployee ON(tblEmployee.LoginId=tblEAttendees.LoginId) WHERE tblEAttendees.Id=" + Id;
            connection = ConnectionProvider.getInstance().getConnection();
            prepareStatement = connection.prepareStatement(queryString);
            resultSet = prepareStatement.executeQuery();
            while (resultSet.next()) {
                subJson = new JSONObject();
                subJson.put("Id", resultSet.getInt("Id"));
                subJson.put("Email1", resultSet.getString("Email1"));
                subJson.put("LoginId", resultSet.getString("LoginId"));
                subJson.put("AccessType", resultSet.getString("AccessType"));
                subJson.put("CurrStatus", resultSet.getString("CurrStatus"));
                subJson.put("CreatedBy", resultSet.getString("CreatedBy"));
                subJson.put("CreatedDate", resultSet.getString("CreatedDate"));

            }

        } catch (Exception sqe) {
            sqe.printStackTrace();
            //responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                    resultSet = null;
                }
                if (prepareStatement != null) {
                    prepareStatement.close();
                    prepareStatement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return subJson;
    }

    public String doUpdateAttendeesDetailsforExecitiveMeeting(AjaxHandlerAction ajaxHandlerAction) throws ServiceLocatorException {
        //   System.out.println("doUpdateAttendeesDetailsforExecitiveMeeting impl");
        Connection connection = null;
        PreparedStatement statement = null;
        String responseString = "";
        String queryString = "";
        int count = 0;
        try {

            queryString = "UPDATE tblEAttendees SET AccessType=?,CurrStatus=?,ModifiedBy=?,ModifiedDate=? WHERE Id=?";

            connection = ConnectionProvider.getInstance().getConnection();
            statement = connection.prepareStatement(queryString);
            statement.setString(1, ajaxHandlerAction.getExecutiveMeetAccessType());
            statement.setString(2, ajaxHandlerAction.getExecutiveMeetingAccessStatus());
            statement.setString(3, ajaxHandlerAction.getCreatedBy());
            statement.setTimestamp(4, DateUtility.getInstance().getCurrentMySqlDateTime());
            statement.setInt(5, ajaxHandlerAction.getId());
            count = statement.executeUpdate();


            if (count > 0) {
                responseString = "<font size='2' color='green'>Executive Meet Attendee updated Successfully..!</font>";
                if ("InActive".equals(ajaxHandlerAction.getPreviousStatus()) && "Active".equals(ajaxHandlerAction.getExecutiveMeetingAccessStatus())) {


                    JSONObject upcomingEmeetJson = ServiceLocator.getAjaxHandlerWebService().getUpcomingExecutivemeets(ajaxHandlerAction.getExecutiveMeetAccessType());
                    String emailId = DataSourceDataProvider.getInstance().getEmailIdForLoginId(ajaxHandlerAction.getLoginId());
                    String Name = DataSourceDataProvider.getInstance().getemployeenamebyloginId(ajaxHandlerAction.getLoginId());
                    for (int i = 0; i < upcomingEmeetJson.length(); i++) {
                        JSONObject subJson = upcomingEmeetJson.getJSONObject(String.valueOf(i));

                        doSendEmailInvitationForExeMeet(subJson, emailId, Name);
                    }
                }
            } else {
                responseString = "<font size='2' color='red'>Updating failed..!</font>";
            }

        } catch (Exception sqe) {
            sqe.printStackTrace();
            responseString = "<font size='2' color='red'>Error!</font>";
        } finally {
            try {

                if (statement != null) {
                    statement.close();
                    statement = null;
                }
                if (connection != null) {
                    connection.close();
                    connection = null;
                }
            } catch (SQLException sqle) {
            }
        }
        return responseString;
    }
}

enum Month {

    January, February, March, April, May, June, July, August, September, October, November, December
}